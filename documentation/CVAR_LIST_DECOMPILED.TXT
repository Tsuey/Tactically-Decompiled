FUN_10432010(&DAT_10713068,(int)"cl_showanimstate",&DAT_104ef1dc,0x4002,
	"Show the (client) animation state for the specified entity (-1 for none).");
FUN_10432010(&DAT_107131c8,(int)"mp_facefronttime",&DAT_104ef394,0x2002,
	"After this amount of time of standing in place but aiming to one side, go ahead and move feet to face upper body."
FUN_10432010(&DAT_10713170,(int)"mp_feetyawrate",&DAT_104ef308,0x2002,
	"How many degrees per second that we can turn our feet or upper body.");
FUN_10432010(&DAT_10713220,(int)"mp_ik",&DAT_104ef184,0x2002,"Use IK on in-place turns.");
FUN_10432010(&DAT_10713118,(int)"cl_showanimstate_activities",&DAT_104ef184,0x4000,
	"Show activities in the (client) animation state display.");
FUN_10432010(&DAT_107130c0,(int)"cl_showanimstate_log",&DAT_104ef188,0x4002,
	"1 to output cl_showanimstate to Msg(). 2 to store in AnimStateClient.log. 3 for both."
FUN_10432270(&DAT_10713278,(int)"cl_disable_water_render_targets",&DAT_104ef188,0);
FUN_10431ef0(&DAT_1071338c,(int)"reload_weapondata",(int)FUN_100467d0,
	"Reload Weapon Script for Active Weapon (Server Side)",0x4000,(undefined *)0x0);
FUN_10432270(&DAT_10713900,(int)"ai_debug_shoot_positions",&DAT_104ef188,0x6000);
FUN_10432270(&DAT_107138a8,(int)"ai_shot_bias_max",&DAT_104f04fc,0x2000);
FUN_10432270(&DAT_10713850,(int)"ai_shot_bias_min",&DAT_104f04e0,0x2000);
FUN_10432270(&DAT_107137f8,(int)"hl2_episodic",&DAT_104ef188,0x2000);
FUN_10432270(&DAT_10714558,(int)"cl_predict_motioncontrol",&DAT_104ef188,0);
FUN_10432270(&DAT_10714500,(int)"cl_shadowupdatespacing",&DAT_104f18a4,0);
FUN_10432010(&DAT_107145b0,(int)"mp_usehwmmodels",&DAT_104ef188,0,
	"Enable the use of the hw morph models. (-1 = never, 1 = always, 0 = based upon GPU)"
FUN_10432270(&DAT_107144a8,(int)"cl_physicsshadowupdate_render",&DAT_104ef188,0);
FUN_10432010(&DAT_10714298,(int)"player_can_use_painted_power",&DAT_104ef188,0x2002,
	"Allow/disallow players to be painted.");
FUN_10432010(&DAT_107142f0,(int)"player_loses_painted_power_over_time",&DAT_104ef184,0x2002,
	"The player should lose the power after having it for player_paint_effects_duration."
FUN_10432010(&DAT_10714348,(int)"player_paint_effects_duration",&DAT_104f16d4,0x2002,
	"Amount of time player maintains her power after being painted.");
FUN_10432010(&DAT_107143a0,(int)"player_paint_effects_enabled",&DAT_104ef184,0x2002,
	"Display the visual effects of being painted.");
FUN_10432010(&DAT_107143f8,(int)"player_paint_screen_effect_restart_delay",&DAT_104f17c0,0x2002,
	"Time to wait between particle system restarts when the player gets painted multiple times in rapid succession."
FUN_10432010(&DAT_107146b8,(int)"smoothstairs",&DAT_104ef184,0x2000,
	"Smooth player eye z coordinate when traversing stairs.");
FUN_10432010(&DAT_10714608,(int)"sv_debug_player_use",&DAT_104ef188,0x2000,
	"Visualizes +use logic. Green cross=trace success, Red cross=trace too far, Green box=radius success"
FUN_10432010(&DAT_10714450,(int)"sv_footstep_sound_frequency",&DAT_104f1860,0x6000,
	"How frequent to hear the player\'s step sound or how fast they appear to be running from first person."
FUN_10432270(&DAT_10714660,(int)"sv_suppress_viewpunch",&DAT_104ef188,0x6002);
FUN_10432270(&DAT_10715520,(int)"viewmodel_offset_x",&DAT_104f2504,0x80);
FUN_10432270(&DAT_10715578,(int)"viewmodel_offset_y",&DAT_104f2504,0x80);
FUN_10432270(&DAT_107155d0,(int)"viewmodel_offset_z",&DAT_104f2504,0x80);
FUN_10432270(&DAT_10716550,(int)"z_ragdoll_impact_strength",&DAT_104f444c,0);
FUN_10432270(&DAT_107163f0,(int)"cl_SetupAllBones",&DAT_104ef188,0);
FUN_10432270(&DAT_107165a8,(int)"cl_disable_ragdolls",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10716600,(int)"cl_ejectbrass",&DAT_104ef184,0x80080);
FUN_10432270(&DAT_10716658,(int)"cl_minimal_rtt_shadows",&DAT_104ef184,0x80);
FUN_10432010(&DAT_10716960,(int)"cl_threaded_bone_setup",&DAT_104ef188,0,
	"Enable parallel processing of C_BaseAnimating::SetupBones()");
FUN_10432010(&DAT_10716760,(int)"enable_skeleton_draw",&DAT_104ef188,0x4000,
	"Render skeletons in wireframe");
FUN_10432270(&DAT_10716838,(int)"g_debug_ragdoll_visualize",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10716890,(int)"g_ragdoll_fadespeed",&DAT_104f48c8,0);
FUN_10432270(&DAT_107168e8,(int)"g_ragdoll_lvfadespeed",&DAT_104f48e0,0);
FUN_10432270(&DAT_107164a0,(int)"r_debug_sequencesets",&DAT_104f4420,0);
FUN_10432270(&DAT_10716a18,(int)"r_drawmodelstatsoverlay",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_107169c0,(int)"r_drawothermodels",&DAT_104ef184,0x4000,
	"0=Off, 1=Normal, 2=Wireframe");
FUN_10432270(&DAT_107164f8,(int)"r_jiggle_bones",&DAT_104ef184,0);
FUN_10432270(&DAT_10716448,(int)"r_sequence_debug",&DAT_104eefb3,0);
FUN_10432270(&DAT_107166b0,(int)"sfm_record_hz",&DAT_104f44a8,0);
FUN_104320a0(&DAT_10716708,(int)"vcollide_wireframe",&DAT_104ef188,0x4000,
	"Render physics collision models in wireframe",(int)FUN_10067730);
FUN_10431e50(&DAT_10719ebc,(int)"cl_ent_absbox",(int)FUN_1003ffb0,
	"Displays the client\'s absbox for the entity under the crosshair.",0x4000,
FUN_10431e50(&DAT_10719e98,(int)"cl_ent_bbox",(int)FUN_1003ffb0,
	"Displays the client\'s bounding box for the entity under the crosshair.",0x4000,
FUN_10431e50(&DAT_10719ee0,(int)"cl_ent_rbox",(int)FUN_1007a1a0,
	"Displays the client\'s render box for the entity under the crosshair.",0x4000,
FUN_10432010(&DAT_10719950,(int)"cl_extrapolate",&DAT_104ef184,0x4000,
	"Enable/disable extrapolation if interpolation history runs out.");
FUN_10431e50(&DAT_10719f38,(int)"cl_find_ent",(int)FUN_1006e9d0,
	"Find and list all client entities with classnames that contain the specified substring.\nFormat: cl_find_ent <substring>\n"
FUN_10431e50(&DAT_10719f5c,(int)"cl_find_ent_index",(int)FUN_1006eac0,
	"Display data for clientside entity matching specified index.\nFormat: cl_find_ent_index <index>\n"
FUN_104321d0(&DAT_10719a00,(int)"cl_interp_all",&DAT_104ef188,0,
	"Disable interpolation list optimizations.",0,0,0,0,(int)FUN_1007a0f0);
FUN_10432010(&DAT_107199a8,(int)"cl_interp_npcs",&DAT_104f2504,0,
	"Interpolate NPC positions starting this many seconds in past (or cl_interp, if greater)"
FUN_10432270(&DAT_10719d48,(int)"cl_interp_watch",&DAT_104f4420,0);
FUN_10432270(&DAT_10719df8,(int)"cl_interpolate",&DAT_104f84b4,0x202);
FUN_10432270(&DAT_10719be0,(int)"cl_interpolate_demos",&DAT_104ef184,0);
FUN_10431ef0(&DAT_10719e74,(int)"cl_removedecals",(int)FUN_10076230,
	"Remove the decals from the entity under the crosshair.",0x4000,(undefined *)0x0);
FUN_10432270(&DAT_10719cf0,(int)"cl_simulationtimefix",&DAT_104ef184,2);
FUN_10431e50(&DAT_10719cb8,(int)"cl_updatevisibility",(int)FUN_1003ffb0,"Updates visibility bits."
FUN_10431e50(&DAT_10719e50,(int)"dlight_debug",(int)FUN_1003ffb0,
	"Creates a dlight in front of the player",0x4000,(undefined *)0x0);
FUN_10432010(&DAT_10719da0,(int)"hermite_fix",&DAT_104ef184,2,
	"Don\'t interpolate previous hermite sample when fixing up times.");
FUN_10432270(&DAT_10719a58,(int)"r_drawmodeldecals",&DAT_104ef184,0);
FUN_10432010(&DAT_10719ab0,(int)"r_drawrenderboxes",&DAT_104ef188,0x4000,
	"(0 - off) (1 - Draws the bounding box of entities) (2 - Draws the axis aligned bounding box used for culling) (3 - draws both bounding boxes)"
FUN_10432010(&DAT_107198f8,(int)"report_cliententitysim",&DAT_104ef188,0x4000,
	"List all clientside simulations and time - will report and turn itself off.");
FUN_10432010(&DAT_1071b8a0,(int)"blink_duration",&DAT_104f918c,0,
	"How many seconds an eye blink will last.");
FUN_10432010(&DAT_1071b848,(int)"flex_rules",&DAT_104ef184,0,"Allow flex animation rules to run.")
FUN_10432010(&DAT_1071b8f8,(int)"flex_smooth",&DAT_104ef184,0,
	"Applies smoothing/decay curve to flex animation controller changes.");
FUN_10432010(&DAT_1071b798,(int)"phonemedelay",&DAT_104ef188,0,
	"Phoneme delay to account for sound system latency.");
FUN_10432010(&DAT_1071b7f0,(int)"phonemefilter",&DAT_104f9208,0,
	"Time duration of box filter to pass over phonemes.");
FUN_10432010(&DAT_1071b988,(int)"phonemesnap",&DAT_104f94c0,0,
	"Lod at level at which visemes stops always considering two phonemes, regardless of duration."
FUN_10432010(&DAT_1071c010,(int)"cl_customsounds",&DAT_104ef188,0,
	"Enable customized player sound playback");
FUN_10432270(&DAT_1071c2d0,(int)"cl_player_fullupdate_predicted_origin_fix",&DAT_104ef184,0);
FUN_10432010(&DAT_1071c0c0,(int)"cl_smooth",&DAT_104ef184,0,
	"Smooth view/eye origin after prediction errors");
FUN_10432130(&DAT_1071c118,(int)"cl_smoothtime",&DAT_104fc1dc,0,
	"Smooth client\'s view after prediction error over this many seconds",1,0x3c23d70a,1,
FUN_10431e50(&DAT_1071c340,(int)"soundscape_dumpclient",(int)FUN_1008cfa0,
	"Dumps the client\'s soundscape data.\n",0x4000,(undefined *)0x0);
FUN_10432010(&DAT_1071c278,(int)"spec_freeze_distance_max",&DAT_104fc374,0x4000,
	"Maximum random distance from the target to stop when framing them in observer freeze cam."
FUN_10432010(&DAT_1071c220,(int)"spec_freeze_distance_min",&DAT_104fc2f4,0x4000,
	"Minimum random distance from the target to stop when framing them in observer freeze cam."
FUN_10432010(&DAT_1071c170,(int)"spec_freeze_time",&DAT_104fc21c,0x6000,
	"Time spend frozen in observer freeze cam.");
FUN_10432130(&DAT_1071c1c8,(int)"spec_freeze_traveltime",&DAT_104fc278,0x6000,
	"Time taken to zoom in to frame a target in observer freeze cam.",1,0x3c23d70a,0,0);
FUN_10432010(&DAT_1071c068,(int)"spec_track",&DAT_104ef188,0,"Tracks an entity in spec mode");
FUN_10432270(&DAT_1071cbb0,(int)"cl_predict_basetoggles",&DAT_104ef184,0);
FUN_10432270(&DAT_1071ce48,(int)"vm_debug",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_1071cea0,(int)"vm_draw_always",&DAT_104ef188,0);
FUN_10432010(&DAT_1071d248,(int)"mat_colcorrection_disableentities",&DAT_104ef188,0,
	"Disable map color-correction entities");
FUN_10432010(&DAT_1071d2a0,(int)"mat_colcorrection_forceentitiesclientside",&DAT_104ef188,0x4000,
	"Forces color correction entities to be updated on the client");
FUN_10432010(&DAT_1071da60,(int)"cl_portal_use_new_dissolve",&DAT_104ef184,0x4000,
	"Use new dissolve effect");
FUN_10432130(&DAT_1071deb8,(int)"cl_blobulator_freezing_max_metaball_radius",&DAT_10500474,0,
	"Setting this can create more complex surfaces on large hitboxes at the cost of performance."
FUN_10432010(&DAT_1071e200,(int)"cl_ambient_light_disableentities",&DAT_104ef188,0,
	"Disable map ambient light entities.");
FUN_10432010(&DAT_1071e448,(int)"cl_csm_capture_state",&DAT_104ef188,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071e4a0,(int)"cl_csm_clear_captured_state",&DAT_104ef188,2,&DAT_104eefb3);
FUN_10432270(&DAT_1071f4c8,(int)"cl_csm_cull_small_prop_threshold_volume","2000.0f ",2);
FUN_10432270(&DAT_1071e6b0,(int)"cl_csm_debug_2d",&DAT_104ef188,2);
FUN_10432270(&DAT_1071e708,(int)"cl_csm_debug_3d",&DAT_104ef188,2);
FUN_10432270(&DAT_1071e760,(int)"cl_csm_debug_culling",&DAT_104ef188,2);
FUN_10432270(&DAT_1071e7b8,(int)"cl_csm_debug_culling_cascade",&DAT_104ef1dc,2);
FUN_10432010(&DAT_1071e4f8,(int)"cl_csm_debug_render_ztest",&DAT_104ef184,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071e600,(int)"cl_csm_debug_vis_hi_range",&DAT_104f04fc,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071e5a8,(int)"cl_csm_debug_vis_lo_range",&DAT_10501b18,2,&DAT_104eefb3);
FUN_10432270(&DAT_1071f1b0,(int)"cl_csm_depthbias_c0",".000025",2);
FUN_10432270(&DAT_1071f208,(int)"cl_csm_depthbias_c1",".000025",2);
FUN_10432270(&DAT_1071f260,(int)"cl_csm_depthbias_c2",".000025",2);
FUN_10432270(&DAT_1071f2b8,(int)"cl_csm_depthbias_c3",".000025",2);
FUN_10432270(&DAT_1071ead0,(int)"cl_csm_disable_culling",&DAT_104ef188,2);
FUN_10432010(&DAT_1071e398,(int)"cl_csm_enabled",&DAT_104ef184,2,&DAT_104eefb3);
FUN_10432270(&DAT_1071eb80,(int)"cl_csm_entity_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071f470,(int)"cl_csm_force_no_csm_in_reflections",&DAT_104ef188,2);
FUN_10432270(&DAT_1071f3c0,(int)"cl_csm_hack_proj_matrices_for_cull_debugging",&DAT_104ef188,2);
FUN_10432270(&DAT_1071ee40,(int)"cl_csm_ignore_disable_shadow_depth_rendering",&DAT_104ef188,2);
FUN_10432010(&DAT_1071e3f0,(int)"cl_csm_max_shadow_dist",&DAT_104ef1dc,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071e550,(int)"cl_csm_max_visible_dist",&DAT_10501af8,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071ee98,(int)"cl_csm_optimize_static_props",&DAT_104ef184,2,
	"Enable/Disable optimal static prop rendering into CSM\'s (cull static props that make no visual contribution to shadows)"
FUN_10432270(&DAT_1071e810,(int)"cl_csm_print_culling_planes",&DAT_104ef188,2);
FUN_10432270(&DAT_1071ed38,(int)"cl_csm_rope_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071e970,(int)"cl_csm_rot_override",&DAT_104ef188,2);
FUN_10432270(&DAT_1071e9c8,(int)"cl_csm_rot_x",&DAT_10501c5c,2);
FUN_10432270(&DAT_1071ea20,(int)"cl_csm_rot_y",&DAT_10501c70,2);
FUN_10432270(&DAT_1071ea78,(int)"cl_csm_rot_z",&DAT_104ef188,2);
FUN_10432270(&DAT_1071eb28,(int)"cl_csm_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071f050,(int)"cl_csm_slopescaledepthbias_c0",&DAT_10501f00,2);
FUN_10432270(&DAT_1071f0a8,(int)"cl_csm_slopescaledepthbias_c1",&DAT_104f94c0,2);
FUN_10432270(&DAT_1071f100,(int)"cl_csm_slopescaledepthbias_c2",&DAT_104f94c0,2);
FUN_10432270(&DAT_1071f158,(int)"cl_csm_slopescaledepthbias_c3",&DAT_104f94c0,2);
FUN_10432270(&DAT_1071ece0,(int)"cl_csm_sprite_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071ebd8,(int)"cl_csm_static_prop_shadows",&DAT_104ef184,2);
FUN_10431e50(&DAT_1071e374,(int)"cl_csm_status",(int)FUN_1009b320,"Usage:\n   cl_csm_status\n",0,
FUN_10432270(&DAT_1071ed90,(int)"cl_csm_translucent_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071ede8,(int)"cl_csm_translucent_shadows_using_opaque_path",&DAT_104ef184,2);
FUN_10432270(&DAT_1071e918,(int)"cl_csm_use_env_light_direction",&DAT_104ef184,2);
FUN_10432010(&DAT_1071e658,(int)"cl_csm_use_forced_view_matrices",&DAT_104ef184,2,&DAT_104eefb3);
FUN_10432270(&DAT_1071f368,(int)"cl_csm_viewmodel_depthbias",".00005",2);
FUN_10432270(&DAT_1071efa0,(int)"cl_csm_viewmodel_farz",&DAT_104f44a8,2);
FUN_10432270(&DAT_1071ef48,(int)"cl_csm_viewmodel_max_shadow_dist",&DAT_10501e94,2);
FUN_10432270(&DAT_1071eff8,(int)"cl_csm_viewmodel_max_visible_dist",&DAT_10501ed4,2);
FUN_10432270(&DAT_1071eef0,(int)"cl_csm_viewmodel_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071f310,(int)"cl_csm_viewmodel_slopescaledepthbias",&DAT_10501fdc,2);
FUN_10432010(&DAT_1071e868,(int)"cl_csm_viz_numplanes",&DAT_104ef1dc,2,&DAT_104eefb3);
FUN_10432010(&DAT_1071e8c0,(int)"cl_csm_viz_polyhedron_quad_size","131072",2,&DAT_104eefb3);
FUN_10432270(&DAT_1071ec30,(int)"cl_csm_world_shadows",&DAT_104ef184,2);
FUN_10432270(&DAT_1071ec88,(int)"cl_csm_world_shadows_in_viewmodelcascade",&DAT_104ef184,2);
FUN_10432270(&DAT_1071f418,(int)"cl_csm_xlat_continuity",&DAT_104ef184,2);
FUN_10431e50(&DAT_10726358,(int)"-csm_rot_x_neg",(int)FUN_1009fa70,(undefined *)0x0,0,
FUN_10431e50(&DAT_10726310,(int)"-csm_rot_x_plus",(int)FUN_1009fa90,(undefined *)0x0,0,
FUN_10431e50(&DAT_107263e8,(int)"-csm_rot_y_neg",(int)FUN_1009fab0,(undefined *)0x0,0,
FUN_10431e50(&DAT_107263a0,(int)"-csm_rot_y_plus",(int)FUN_1009fad0,(undefined *)0x0,0,
FUN_10431e50(&DAT_10726334,(int)"+csm_rot_x_neg",(int)FUN_1009fa60,(undefined *)0x0,0,
FUN_10431e50(&DAT_107262ec,(int)"+csm_rot_x_plus",(int)FUN_1009fa80,(undefined *)0x0,0,
FUN_10431e50(&DAT_107263c4,(int)"+csm_rot_y_neg",(int)FUN_1009faa0,(undefined *)0x0,0,
FUN_10431e50(&DAT_1072637c,(int)"+csm_rot_y_plus",(int)FUN_1009fac0,(undefined *)0x0,0,
FUN_10432010(&DAT_10726de8,(int)"asw_perf_wtf",&DAT_104ef188,2,
	"Disable updating of projected shadow textures from UpdateLight");
FUN_10432010(&DAT_10727cd0,(int)"fish_debug",&DAT_104ef188,0x4000,"Show debug info for fish");
FUN_10432270(&DAT_107289c8,(int)"cl_elevator_physics",&DAT_104ef184,0);
FUN_10431e50(&DAT_10729a9c,(int)"gameinstructor_dump_open_lessons",(int)FUN_100ae320,
	"Gives a list of all currently open lessons.",0x4000,(undefined *)0x0);
FUN_104320a0(&DAT_10729970,(int)"gameinstructor_enable",&DAT_104ef184,0x88,
	"Display in game lessons that teach new players.",(int)FUN_100ac940);
FUN_10432010(&DAT_10729918,(int)"gameinstructor_find_errors",&DAT_104ef188,0x4000,
	"Set to 1 and the game instructor will run EVERY scripted command to uncover errors."
FUN_10431e50(&DAT_107297ec,(int)"gameinstructor_reload_lessons",(int)FUN_100ae3c0,
	"Shuts down all open lessons and reloads them from the script file.",0x4000,
FUN_10431e50(&DAT_10729a78,(int)"gameinstructor_reset_counts",(int)FUN_100ae3e0,
	"Resets all display and success counts to zero.",0,(undefined *)0x0);
FUN_10432010(&DAT_10729810,(int)"gameinstructor_save_restore_lessons",&DAT_104ef184,0x4000,
	"Set to 0 to disable save/load of open lesson opportunities in single player.");
FUN_10432010(&DAT_107299c8,(int)"gameinstructor_start_sound_cooldown",&DAT_104fc21c,0,
	"Number of seconds forced between similar lesson start sounds.");
FUN_10432010(&DAT_10729868,(int)"gameinstructor_verbose",&DAT_104ef188,0x4000,
	"Set to 1 for standard debugging or 2 (in combo with gameinstructor_verbose_lesson) to show update actions."
FUN_10432010(&DAT_107298c0,(int)"gameinstructor_verbose_lesson",&DAT_104eefb3,0x4000,
	"Display more verbose information for lessons have this name.");
FUN_104320a0(&DAT_10729a20,(int)"sv_gameinstructor_disable",&DAT_104ef188,0x2000,
	"Force all clients to disable their game instructors.",(int)FUN_100ad930);
FUN_10431ef0(&DAT_10729ac8,(int)"CreateHairball",(int)FUN_100aeff0,(undefined *)0x0,0x4002,
FUN_10432270(&DAT_10729c10,(int)"r_disable_lightglow",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10729f90,(int)"debug_materialmodifycontrol_client",&DAT_104ef188,0);
FUN_10432270(&DAT_1072aad0,(int)"r_PhysPropStaticLighting",&DAT_104ef188,0);
FUN_10432270(&DAT_1072ab28,(int)"r_visualizeproplightcaching",&DAT_104ef188,0);
FUN_10432270(&DAT_1072ad68,(int)"r_dopixelvisibility",&DAT_104ef184,0);
FUN_104320a0(&DAT_1072adc0,(int)"r_drawpixelvisibility",&DAT_104ef188,0,
	"Show the occlusion proxies",(int)FUN_100b4d00);
FUN_10432270(&DAT_1072ad10,(int)"r_pixelvisibility_partial",&DAT_104ef184,0);
FUN_10432270(&DAT_1072ae18,(int)"r_pixelvisibility_spew",&DAT_104ef188,0);
FUN_10432270(&DAT_1072b168,(int)"cl_names_debug",&DAT_104ef188,2);
FUN_10432270(&DAT_1072c278,(int)"mat_fullbright",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_1072c2d0,(int)"r_drawropes",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_1072c6a8,(int)"r_queued_ropes",&DAT_104ef184,0);
FUN_10432270(&DAT_1072c328,(int)"r_ropetranslucent",&DAT_104ef184,0);
FUN_10432010(&DAT_1072c3d8,(int)"rope_averagelight",&DAT_104ef184,0,
	"Makes ropes use average of cubemap lighting instead of max intensity.");
FUN_10432010(&DAT_1072c010,(int)"rope_collide",&DAT_104ef184,0,"Collide rope with the world");
FUN_10432270(&DAT_1072c430,(int)"rope_rendersolid",&DAT_104ef184,0);
FUN_10432270(&DAT_1072bf60,(int)"rope_shake",&DAT_104ef188,0);
FUN_10432010(&DAT_1072c068,(int)"rope_smooth",&DAT_104ef184,0,"Do an antialiasing effect on ropes"
FUN_10432010(&DAT_1072c0c0,(int)"rope_smooth_enlarge",&DAT_1051460c,0,
	"How much to enlarge ropes in screen space for antialiasing effect");
FUN_10432010(&DAT_1072c220,(int)"rope_smooth_maxalpha",&DAT_105146f8,0,
	"Alpha for rope antialiasing effect");
FUN_10432270(&DAT_1072c1c8,(int)"rope_smooth_maxalphawidth",&DAT_105146d4,0);
FUN_10432010(&DAT_1072c170,(int)"rope_smooth_minalpha",&DAT_104f918c,0,
	"Alpha for rope antialiasing effect");
FUN_10432010(&DAT_1072c118,(int)"rope_smooth_minwidth",&DAT_1051467c,0,
	"When using smoothing, this is the min screenspace width it lets a rope shrink to");
FUN_10432270(&DAT_1072c590,(int)"rope_solid_maxalpha",&DAT_104ef184,0);
FUN_10432270(&DAT_1072c4e0,(int)"rope_solid_maxwidth",&DAT_104ef184,0);
FUN_10432270(&DAT_1072c538,(int)"rope_solid_minalpha",&DAT_104f2504,0);
FUN_10432270(&DAT_1072c488,(int)"rope_solid_minwidth",&DAT_1051467c,0);
FUN_10432130(&DAT_1072bfb8,(int)"rope_subdiv",&DAT_104f94c0,0x800000,"Rope subdivision amount",1,0
FUN_10432010(&DAT_1072c380,(int)"rope_wind_dist",&DAT_10501ed4,0,
	"Don\'t use CPU applying small wind gusts to ropes when they\'re past this distance."
FUN_10432010(&DAT_1072cd10,(int)"cl_debugrumble",&DAT_104ef188,0x80,
	"Turn on rumble debugging spew");
FUN_10432010(&DAT_1072ccb8,(int)"cl_rumblescale",&DAT_104f04fc,0x8080,
	"Scale sensitivity of rumble effects (0 to 1.0)");
FUN_10432010(&DAT_1072e890,(int)"mp_usehwmvcds",&DAT_104ef188,0,
	"Enable the use of the hw morph vcd(s). (-1 = never, 1 = always, 0 = based upon GPU)"
FUN_10432010(&DAT_1072e8e8,(int)"scene_vcdautosave",&DAT_104ef188,0,
	"Create a savegame before VCD playback");
FUN_10431e50(&DAT_1072f160,(int)"cl_soundscape_flush",(int)FUN_100c3f20,
	"Flushes the client side soundscapes",0x10004000,(undefined *)0x0);
FUN_10431e50(&DAT_1072f1cc,(int)"cl_soundscape_printdebuginfo",(int)FUN_100c3f80,
	"print soundscapes",0,(undefined *)0x0);
FUN_10431e50(&DAT_1072f1f0,(int)"cl_ss_origin",(int)FUN_100c4030,"print origin in script format",0
FUN_10431e50(&DAT_1072f184,(int)"playsoundscape",(int)FUN_1003ffb0,"Forces a soundscape to play",
FUN_10432010(&DAT_1072ef80,(int)"soundscape_fadetime",&DAT_10515ed4,0x4000,
	"Time to crossfade sound effects between soundscapes");
FUN_10432270(&DAT_1072efd8,(int)"soundscape_message",&DAT_104ef188,0);
FUN_10432010(&DAT_1072f030,(int)"soundscape_radius_debug",&DAT_104ef188,0x4000,
	"Prints current volume of radius sounds");
FUN_10431e50(&DAT_1072f1a8,(int)"stopsoundscape",(int)FUN_1003ffb0,
	"Stops all soundscape processing and fades current looping sounds",0x4000,
FUN_10432270(&DAT_1072f4e8,(int)"r_drawsprites",&DAT_104ef184,0x4000);
FUN_10431e50(&DAT_1072fd78,(int)"Test_ProxyToggle_EnsureValue",(int)FUN_100c7bb0,
	"Test_ProxyToggle_EnsureValue",0x4000,(undefined *)0x0);
FUN_104320a0(&DAT_10730aa0,(int)"cl_thirdperson",&DAT_104ef188,0x400282,
	"Enables/Disables third person",(int)FUN_100ca8c0);
FUN_10432010(&DAT_10730bb0,(int)"cl_interp_ratio",&DAT_1051b05c,0x80200,
	"Sets the interpolation amount (final amount is cl_interp_ratio / cl_updaterate).");
FUN_10432130(&DAT_10730c08,(int)"cl_interp","0.015625",0x80200,
	"Sets the interpolation amount (bounded on low side by server interp ratio settings)."
FUN_10432010(&DAT_10730b58,(int)"cl_predict",&DAT_104f04fc,0x200,"Perform client side prediction."
FUN_10432270(&DAT_107311f0,(int)"bonecache_optimization",&DAT_104ef184,2);
FUN_10432010(&DAT_10730ef8,(int)"cl_ShowBoneSetupEnts",&DAT_104ef188,0,
	"Show which entities are having their bones setup each frame.");
FUN_10432010(&DAT_10731198,(int)"cl_disable_splitscreen_cpu_level_cfgs_in_pip",&DAT_104ef184,0,
FUN_10431e50(&DAT_10730e98,(int)"cl_dumpsplithacks",(int)FUN_1003ffb0,
	"Dump split screen workarounds.",0,(undefined *)0x0);
FUN_10431e50(&DAT_10731000,(int)"cl_modemanager_reload",(int)thunk_FUN_102f07a0,
	"Reloads the panel metaclasses for vgui screens.",0,(undefined *)0x0);
FUN_10432270(&DAT_10730fa8,(int)"cl_threaded_init",&DAT_104ef188,0);
FUN_10431e50(&DAT_10734790,(int)"count_world_lights",(int)FUN_100cfb20,"list count of worldlights"
FUN_104320a0(&DAT_10731038,(int)"cpu_level",&DAT_104f94c0,0,"CPU Level - Default: High",
FUN_104320a0(&DAT_10731090,(int)"gpu_level",&DAT_104ef394,0,"GPU Level - Default: High",
FUN_104320a0(&DAT_10731140,(int)"gpu_mem_level",&DAT_104f94c0,0,"Memory Level - Default: High",
FUN_104320a0(&DAT_107310e8,(int)"mem_level",&DAT_104f94c0,0,"Memory Level - Default: High",
FUN_10432270(&DAT_10730d38,(int)"no_driver_fps_limit",&DAT_104ef188,0x4002);
FUN_10432010(&DAT_10730d90,(int)"showparticlecounts",&DAT_104ef188,0,
	"Display number of particles drawn per frame");
FUN_10432010(&DAT_10730e40,(int)"cl_class","default",0x280,"Default class when joining a game");
FUN_10432010(&DAT_10730de8,(int)"cl_team","default",0x280,"Default team when joining a game");
FUN_10432270(&DAT_10731248,(int)"spew_local_drawcount",&DAT_104ef188,0);
FUN_10432270(&DAT_10734de8,(int)"mat_stub",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10734ef8,(int)"report_clientthinklist",&DAT_104ef188,0x4000,
	"List all clientside entities thinking and time - will report and turn itself off.");
FUN_10431e50(&DAT_10735c8c,(int)"vr_activate",(int)FUN_100d5fc0,"Switch to VR mode",0,
FUN_10432010(&DAT_10735168,(int)"vr_activate_default",&DAT_104ef184,0x80,
	"If this is true the game will switch to VR mode once startup is complete.");
FUN_10432010(&DAT_107353d0,(int)"vr_aim_yaw_offset",&DAT_1051c57c,0,
	"This value is added to Yaw when returning the vehicle aim angles to Source.");
FUN_10431e50(&DAT_10735c68,(int)"vr_cycle_aim_move_mode",(int)FUN_100d2e00,
	"Cycle through the aim & move modes.",0,(undefined *)0x0);
FUN_10431e50(&DAT_10735cb0,(int)"vr_deactivate",(int)FUN_100d5fd0,
	"Switch from VR mode to normal mode",0,(undefined *)0x0);
FUN_10432270(&DAT_107354d8,(int)"vr_debug_remote_cam",&DAT_104ef188,0);
FUN_10432270(&DAT_10735530,(int)"vr_debug_remote_cam_pos_x","150.0",0);
FUN_10432270(&DAT_10735588,(int)"vr_debug_remote_cam_pos_y",&DAT_104f2504,0);
FUN_10432270(&DAT_107355e0,(int)"vr_debug_remote_cam_pos_z",&DAT_104f2504,0);
FUN_10432270(&DAT_10735638,(int)"vr_debug_remote_cam_target_x",&DAT_104f2504,0);
FUN_10432270(&DAT_10735690,(int)"vr_debug_remote_cam_target_y",&DAT_104f2504,0);
FUN_10432270(&DAT_107356e8,(int)"vr_debug_remote_cam_target_z","-50.0",0);
FUN_10432010(&DAT_10735c10,(int)"vr_first_person_uses_world_model",&DAT_104ef184,0,
	"Causes the third person model to be drawn instead of the view model");
FUN_10432270(&DAT_10735bb8,(int)"vr_force_windowed",&DAT_104ef184,0x80);
FUN_10432010(&DAT_10735950,(int)"vr_hud_axis_lock_to_world",&DAT_104ef188,0x80,
	"Bitfield - locks HUD axes to the world - 0=pitch, 1=yaw, 2=roll");
FUN_10432270(&DAT_107358a0,(int)"vr_hud_display_ratio",&DAT_1051c7b0,0x80);
FUN_10432010(&DAT_10735848,(int)"vr_hud_forward",&DAT_104f444c,0x80,
	"Apparent distance of the HUD in inches");
FUN_10432010(&DAT_107357f0,(int)"vr_hud_max_fov",&DAT_1051c764,0x80,"Max FOV of the HUD");
FUN_10432270(&DAT_107358f8,(int)"vr_hud_never_overlay",&DAT_104ef188,0);
FUN_10432010(&DAT_107351c0,(int)"vr_moveaim_mode",&DAT_104ef394,0x80,
	"0=move+shoot from face. 1=move with torso. 2,3,4=shoot with face+mouse cursor. 5+ are probably not that useful."
FUN_10432010(&DAT_10735218,(int)"vr_moveaim_mode_zoom",&DAT_104ef394,0x80,
	"0=move+shoot from face. 1=move with torso. 2,3,4=shoot with face+mouse cursor. 5+ are probably not that useful."
FUN_10432010(&DAT_107352c8,(int)"vr_moveaim_reticle_pitch_limit",&DAT_104f44a8,0x80,
	"Beyond this number of degrees, the mouse clamps");
FUN_10432010(&DAT_10735378,(int)"vr_moveaim_reticle_pitch_limit_zoom",&DAT_104ef1dc,0x80,
	"Beyond this number of degrees, the mouse clamps");
FUN_10432010(&DAT_10735270,(int)"vr_moveaim_reticle_yaw_limit",&DAT_1051c474,0x80,
	"Beyond this number of degrees, the mouse drags the torso");
FUN_10432010(&DAT_10735320,(int)"vr_moveaim_reticle_yaw_limit_zoom",&DAT_104ef188,0x80,
	"Beyond this number of degrees, the mouse drags the torso");
FUN_10432010(&DAT_107359a8,(int)"vr_projection_znear_multiplier",&DAT_1051467c,0,
	"Allows moving the ZNear plane to deal with body clipping");
FUN_10432270(&DAT_10735798,(int)"vr_render_hud_in_world",&DAT_104ef184,0);
FUN_10432010(&DAT_10735480,(int)"vr_stereo_mono_set_eye",&DAT_104ef188,0,
	"0=off, Set all eyes to 1=left, 2=right, 3=middle eye");
FUN_10432010(&DAT_10735428,(int)"vr_stereo_swap_eyes",&DAT_104ef188,0,"1=swap eyes.");
FUN_10431e50(&DAT_10735cd4,(int)"vr_toggle",(int)FUN_100d5fe0,"Toggles VR mode",0,(undefined *)0x0
FUN_10432010(&DAT_10735740,(int)"vr_translation_limit",&DAT_104f18a4,0,
	"How far the in-game head will translate before being clamped.");
FUN_10432270(&DAT_10735b08,(int)"vr_viewmodel_offset_forward",&DAT_1051c98c,0);
FUN_10432270(&DAT_10735b60,(int)"vr_viewmodel_offset_forward_large",&DAT_1051c9ac,0);
FUN_10432010(&DAT_10735a00,(int)"vr_viewmodel_translate_with_head",&DAT_104ef188,0,
	"1=translate the viewmodel with the head motion.");
FUN_10432010(&DAT_10735a58,(int)"vr_zoom_multiplier",&DAT_1051b05c,0x80,
	"When zoomed, how big is the scope on your HUD?");
FUN_10432010(&DAT_10735ab0,(int)"vr_zoom_scope_scale",&DAT_1051c974,0,
	"Something to do with the default scope HUD overlay size.");
FUN_10432270(&DAT_10765dc0,(int)"cl_drawleaf",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10765f20,(int)"cl_leafsystemvis",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10765e18,(int)"r_PortalTestEnts",&DAT_104ef184,0x4000,
	"Clip entities against portal frustums.");
FUN_10432010(&DAT_10765f78,(int)"r_alphafade_usefov",&DAT_104ef184,0x4000,
	"Account for FOV when computing an entity\'s distance-based alpha fade");
FUN_10432010(&DAT_10766210,(int)"r_disable_distance_fade_on_big_props",&DAT_104ef188,0x4000,
	"Completely disable distance fading on large props");
FUN_10432010(&DAT_10766268,(int)"r_disable_distance_fade_on_big_props_thresh","48000",0x4000,
	"Distance prop fade disable threshold size");
FUN_10432010(&DAT_107662c0,(int)"r_drawallrenderables",&DAT_104ef188,0x4000,
	"Draw all renderables, even ones inside solid leaves.");
FUN_10432270(&DAT_10766318,(int)"r_fastreflectionfastpath",&DAT_104ef184,0);
FUN_10432270(&DAT_10766370,(int)"r_highlight_translucent_renderables",&DAT_104ef188,0);
FUN_10432010(&DAT_10765e70,(int)"r_portalsopenall",&DAT_104ef188,0x4000,"Open all portals");
FUN_10432010(&DAT_10765ec8,(int)"r_shadows_on_renderables_enable",&DAT_104ef188,0,
	"Support casting RTT shadows onto other renderables");
FUN_10432010(&DAT_107663d8,(int)"cl_drawhud",&DAT_104ef184,8,"Enable the rendering of the hud");
FUN_10432010(&DAT_10766488,(int)"hud_freezecamhide",&DAT_104ef188,0x88,
	"Hide the HUD during freeze-cam");
FUN_10431e50(&DAT_107664e0,(int)"hud_reloadscheme",(int)FUN_100dfa70,
	"Reloads hud layout and animation scripts.",0,(undefined *)0x0);
FUN_10432010(&DAT_10766430,(int)"hud_takesshots",&DAT_104ef188,0x88,
	"Auto-save a scoreboard screenshot at the end of a map.");
FUN_10432270(&DAT_10766528,(int)"r_disable_update_shadow",&DAT_104ef184,0x4000);
FUN_10432010(&DAT_107669f8,(int)"r_flashlight_info",&DAT_104ef188,0,
	"Information about currently enabled flashlights");
FUN_10432270(&DAT_10766b00,(int)"r_flashlightdepthres",&DAT_104ef308,0);
FUN_10432270(&DAT_10766aa8,(int)"r_flashlightdepthreshigh",&DAT_104ef308,0);
FUN_10432270(&DAT_10766a50,(int)"r_flashlightdepthtexture",&DAT_104ef184,0);
FUN_10432270(&DAT_10766580,(int)"r_flashlightdrawfrustum",&DAT_104ef188,0);
FUN_10432270(&DAT_107665d8,(int)"r_flashlightdrawfrustumbbox",&DAT_104ef188,0);
FUN_10432010(&DAT_10766840,(int)"r_flashlightenableculling",&DAT_104ef184,0,
	"Enable frustum culling of flashlights");
FUN_10432270(&DAT_10766630,(int)"r_flashlightmodels",&DAT_104ef184,0);
FUN_10432270(&DAT_107669a0,(int)"r_shadow_debug_spew",&DAT_104ef188,0x4000);
FUN_104320a0(&DAT_10766898,(int)"r_shadow_deferred",&DAT_104ef188,0x4000,
	"Toggle deferred shadow rendering",(int)FUN_100e4650);
FUN_104320a0(&DAT_107668f0,(int)"r_shadow_deferred_downsample",&DAT_104ef188,0,
	"Toggle low-res deferred shadow rendering",(int)FUN_100e4610);
FUN_10432270(&DAT_10766948,(int)"r_shadow_deferred_simd",&DAT_104ef188,0);
FUN_10432270(&DAT_107666e0,(int)"r_shadow_lightpos_lerptime",&DAT_105146f8,0);
FUN_10432010(&DAT_107667e8,(int)"r_shadow_shortenfactor",&DAT_104f94c0,0,
	"Makes shadows cast from local lights shorter");
FUN_10431e50(&DAT_10766e84,(int)"r_shadowangles",(int)FUN_100ed7e0,"Set shadow angles",0x4000,
FUN_10431e50(&DAT_10766ef0,(int)"r_shadowblobbycutoff",(int)FUN_100ed940,"some shadow stuff",
FUN_10431e50(&DAT_10766ea8,(int)"r_shadowcolor",(int)FUN_100ed990,"Set shadow color",0x4000,
FUN_10431e50(&DAT_10766e60,(int)"r_shadowdir",(int)FUN_100eda30,"Set shadow direction",0x4000,
FUN_10431e50(&DAT_10766ecc,(int)"r_shadowdist",(int)FUN_100edb80,"Set shadow distance",0x4000,
FUN_10432270(&DAT_10766790,(int)"r_shadowfromanyworldlight",&DAT_104ef188,0x4000);
FUN_104320a0(&DAT_10766f18,(int)"r_shadowfromworldlights",&DAT_104ef184,0,
	"Enable shadowing from world lights",(int)FUN_100ead60);
FUN_10432270(&DAT_10766738,(int)"r_shadowfromworldlights_debug",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10766bb0,(int)"r_shadowmaxrendered",&DAT_1051db24,0);
FUN_10432270(&DAT_10766688,(int)"r_shadowrendertotexture",&DAT_104ef188,2);
FUN_10432270(&DAT_10766b58,(int)"r_shadows",&DAT_104ef184,0);
FUN_10432270(&DAT_10766c08,(int)"r_shadows_gamecontrol",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10766fb8,(int)"cl_tracer_whiz_distance",&DAT_1051e494,0);
FUN_10432270(&DAT_107671a8,(int)"cl_show_bounds_errors",&DAT_104ef188,0);
FUN_10432270(&DAT_107674f0,(int)"mat_colcorrection_editor",&DAT_104ef188,0);
FUN_10432010(&DAT_107676d8,(int)"cl_csm_parallel_split_dist1",&DAT_104ef1dc,2,&DAT_104eefb3);
FUN_10432010(&DAT_10767730,(int)"cl_csm_parallel_split_dist2",&DAT_104ef1dc,2,&DAT_104eefb3);
FUN_10432010(&DAT_10767788,(int)"cl_csm_parallel_split_dist3",&DAT_104ef1dc,2,&DAT_104eefb3);
FUN_10432010(&DAT_10767680,(int)"cl_csm_parallel_split_log_lin_lerp",&DAT_1051edbc,2,&DAT_104eefb3
FUN_10432270(&DAT_107675d0,(int)"cl_csm_shadow_split_lerp_factor_range",&DAT_1051ed54,2);
FUN_10432270(&DAT_10767628,(int)"cl_csm_shadow_split_radial_dist_lerp_factor_multiplier",
FUN_10432010(&DAT_107679a0,(int)"cl_detail_avoid_force",&DAT_104ef188,0x4000,
	"force with which to avoid players ( in units, percentage of the width of the detail sprite )"
FUN_10432010(&DAT_10767948,(int)"cl_detail_avoid_radius",&DAT_104ef188,0x4000,
	"radius around detail sprite to avoid players");
FUN_10432010(&DAT_107679f8,(int)"cl_detail_avoid_recover_speed",&DAT_104ef188,0x4000,
	"how fast to recover position after avoiding players");
FUN_10432010(&DAT_107678f0,(int)"cl_detail_max_sway",&DAT_104ef188,0x4000,
	"Amplitude of the detail prop sway");
FUN_10432010(&DAT_10767d68,(int)"cl_detail_multiplier",&DAT_104ef184,0x4000,
	"extra details to create");
FUN_104320a0(&DAT_10767b58,(int)"cl_detaildist",&DAT_1051f540,2,
	"Distance at which detail props are no longer visible",(int)FUN_100f9fd0);
FUN_104320a0(&DAT_10767d10,(int)"cl_detailfade",&DAT_1051f584,2,
	"Distance across which detail props fade in",(int)FUN_100f9fd0);
FUN_10432010(&DAT_10767dc0,(int)"cl_fastdetailsprites",&DAT_104ef184,0x4000,
	"whether to use new detail sprite system");
FUN_10432270(&DAT_10767b00,(int)"mat_fullbright",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10767a50,(int)"r_FlashlightDetailProps",&DAT_104ef184,0,
	"Enable a flashlight drawing pass on detail props. 0 = off, 1 = single pass, 2 = multipass (multipass is PC ONLY)"
FUN_10432010(&DAT_10767aa8,(int)"r_threadeddetailprops",&DAT_104ef184,0,
	"enable threading of detail prop drawing");
FUN_10432270(&DAT_10768438,(int)"r_decals",(undefined *)&DAT_1051dc84,0);
FUN_10431e50(&DAT_1076867c,(int)"cl_tree_sway_dir",(int)FUN_10101c90,
	"sets tree sway wind direction and strength",0,(undefined *)0x0);
FUN_10432270(&DAT_10768da0,(int)"r_flashlight_topdown",&DAT_104ef188,0);
FUN_10432270(&DAT_10768c98,(int)"r_flashlightambient",&DAT_104f2504,0x4000);
FUN_10432270(&DAT_10768ea8,(int)"r_flashlightbacktraceoffset",&DAT_104fc278,0x4000);
FUN_10432270(&DAT_10768b38,(int)"r_flashlightconstant",&DAT_104f2504,0x4000);
FUN_10432270(&DAT_10768ae0,(int)"r_flashlightfar","1024.0",0x4000);
FUN_10432270(&DAT_10768928,(int)"r_flashlightfov",&DAT_105217e4,0x4000);
FUN_10432270(&DAT_10768d48,(int)"r_flashlightladderdist",&DAT_1052191c,0x4000);
FUN_10432270(&DAT_10768b90,(int)"r_flashlightlinear","100.0",0x4000);
FUN_10432270(&DAT_107688d0,(int)"r_flashlightlockposition",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10768f58,(int)"r_flashlightmuzzleflashfov",&DAT_1051fe0c,0x4000);
FUN_10432270(&DAT_10768a88,(int)"r_flashlightnear",&DAT_104fc21c,0x4000);
FUN_10432270(&DAT_10768df8,(int)"r_flashlightnearoffsetscale",&DAT_104f04fc,0x4000);
FUN_10432270(&DAT_10768980,(int)"r_flashlightoffsetright",&DAT_105217fc,0x4000);
FUN_10432270(&DAT_107689d8,(int)"r_flashlightoffsetup",&DAT_10521818,0x4000);
FUN_10432270(&DAT_10768a30,(int)"r_flashlightoffsetforward",&DAT_104f2504,0x4000);
FUN_10432270(&DAT_10768be8,(int)"r_flashlightquadratic",&DAT_104f2504,0x4000);
FUN_10432270(&DAT_10768cf0,(int)"r_flashlightshadowatten",&DAT_105218fc,0x4000);
FUN_10432270(&DAT_10768e50,(int)"r_flashlighttracedistcutoff",&DAT_1051fe2c,0);
FUN_10432270(&DAT_10768c40,(int)"r_flashlightvisualizetrace",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10768f00,(int)"ti_flashlight_brightness",&DAT_104f16d4,0x4000);
FUN_10432270(&DAT_107693d8,(int)"r_drawflecks",&DAT_104ef184,0);
FUN_10432270(&DAT_10769430,(int)"r_impacts_alt_orientation",&DAT_104ef184,0);
FUN_10432270(&DAT_107695e0,(int)"r_drawtracers",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10769638,(int)"r_drawtracers_firstperson",&DAT_104ef184,0);
FUN_10432270(&DAT_107696b8,(int)"cl_show_splashes",&DAT_104ef184,0);
FUN_10432010(&DAT_10769828,(int)"cl_pred_checkstuck",&DAT_104ef188,2,
	"Perform the additional \'stuck\' traces on the client side during prediction.");
FUN_10432270(&DAT_10769880,(int)"sv_optimizedmovement",&DAT_104ef184,0x2002);
FUN_10432270(&DAT_10769900,(int)"g_Language",&DAT_104ef188,0x2000);
FUN_10432270(&DAT_107699c8,(int)"old_radiusdamage",&DAT_104f2504,0x2000);
FUN_10432270(&DAT_10769958,(int)"sk_autoaim_mode",&DAT_104ef184,0x2080);
FUN_10432010(&DAT_1076db28,(int)"mp_friendlyfire",&DAT_104ef188,0x2100,
	"Allows team members to injure other members of their team");
FUN_10432010(&DAT_1076dad0,(int)"mp_allowspectators",&DAT_104f04fc,0x2000,
	"toggles whether the server allows spectator mode or not");
FUN_10432010(&DAT_1076db80,(int)"mp_fadetoblack",&DAT_104ef188,0x2100,
	"fade a player\'s screen to black when he dies");
FUN_10432010(&DAT_1076da78,(int)"mp_forcecamera",&DAT_104ef184,0x2000,
	"Restricts spectator modes for dead players");
FUN_10432010(&DAT_1076dc38,(int)"cl_glow_outline_effect_enable",&DAT_104ef184,0x4000,
	"Enable entity outline glow effects.");
FUN_10432010(&DAT_1076dc90,(int)"cl_glow_outline_effect_width",&DAT_1051c974,0x4000,
	"Width of glow outline effect in screen space.");
FUN_10432270(&DAT_1076dbe0,(int)"cl_glow_use_tolerance",&DAT_105248b4,0x6000);
FUN_10432010(&DAT_1076dd40,(int)"r_emissiveGlowEnable",&DAT_104ef188,8,&DAT_104eefb3);
FUN_10432010(&DAT_1076dce8,(int)"r_emissiveGlowIntensity",&DAT_1051b05c,8,
	"intensity of emissive glows");
FUN_10432270(&DAT_1076dd98,(int)"r_emissiveGlow_pvis",&DAT_104ef188,0);
FUN_10432270(&DAT_1076ddf0,(int)"r_emissive_Minimum","0.00768",0);
FUN_104320a0(&DAT_1076df28,(int)"building_cubemaps",&DAT_104ef188,0x4000,
	"Indicates we\'re building cubemaps",(int)thunk_FUN_10078fb0);
FUN_10432270(&DAT_1076de70,(int)"cl_ShowSunVectors",&DAT_104ef188,0);
FUN_10432270(&DAT_1076dec8,(int)"cl_sun_decay_rate",&DAT_10524bd4,0x4000);
FUN_10431ef0(&DAT_1076e1c0,(int)"cl_clearhinthistory",(int)FUN_10115000,
	"Clear memory of client side hints displayed to the player.",0,(undefined *)0x0);
FUN_10432010(&DAT_1076e168,(int)"cl_showhelp",&DAT_104ef184,0x280,
	"Set to 0 to not show on-screen help");
FUN_10432010(&DAT_1076e1e8,(int)"spec_autodirector",&DAT_104ef184,0x40000008,
	"Auto-director chooses best view modes while spectating");
FUN_10432010(&DAT_1076e2d8,(int)"cl_screenshots_hud",&DAT_104ef188,2,
	"Adding this so I can turn it off when I take screenshots for promotion purposes. It looks terrible for screenshots."
FUN_10432270(&DAT_1076e280,(int)"hidehud",&DAT_104ef188,0x4000);
FUN_10431e50(&DAT_1076e3b0,(int)"testhudanim",(int)FUN_1011a460,
	"Test a hud element animation.\n\tArguments: <anim name>\n",0x4000,(undefined *)0x0);
FUN_10432270(&DAT_1076e4e8,(int)"cl_chat_active",&DAT_104ef188,0);
FUN_10432010(&DAT_1076e540,(int)"cl_mute_all_comms",&DAT_104ef184,0x80,
	"If 1, then all communications from a player will be blocked when that player is muted, including chat messages."
FUN_10432010(&DAT_1076e490,(int)"cl_showtextmsg",&DAT_104ef184,0,
	"Enable/disable text messages printing on the screen.");
FUN_10432270(&DAT_1076e438,(int)"hud_saytext_time",&DAT_105268d8,0);
FUN_10431e50(&DAT_1076e76c,(int)"cl_dumpplayer",(int)FUN_10121ab0,"Dumps info about a player",
FUN_10431e50(&DAT_1076e654,(int)"g15_dumpplayer",(int)FUN_10121bc0,"Spew player data.",0,
FUN_10431e50(&DAT_1076e62c,(int)"g15_reload",(int)FUN_10121bf0,
	"Reloads the Logitech G-15 Keyboard configs.",0,(undefined *)0x0);
FUN_10432010(&DAT_1076e5d0,(int)"g15_update_msec",&DAT_10520010,0x80,
	"Logitech G-15 Keyboard update interval.");
FUN_10432010(&DAT_1076eb58,(int)"locator_background_border_color","255 255 255 15",0,
	"The default color for the border.");
FUN_10432010(&DAT_1076ed10,(int)"locator_background_border_thickness",&DAT_104ef394,0,
	"How many pixels the background borders the left and right.");
FUN_10432010(&DAT_1076eb00,(int)"locator_background_color","255 255 255 5",0,
	"The default color for the background.");
FUN_10432010(&DAT_1076ec60,(int)"locator_background_shift_x",&DAT_104ef394,0,
	"How many pixels the background is shifted right.");
FUN_10432010(&DAT_1076ecb8,(int)"locator_background_shift_y",&DAT_104ef184,0,
	"How many pixels the background is shifted down.");
FUN_10432010(&DAT_1076eaa8,(int)"locator_background_style",&DAT_104ef188,0,
	"Setting this to 1 will show rectangle backgrounds behind the items word-bubble pointers."
FUN_10432010(&DAT_1076ebb0,(int)"locator_background_thickness_x",&DAT_10527564,0,
	"How many pixels the background borders the left and right.");
FUN_10432010(&DAT_1076ec08,(int)"locator_background_thickness_y",&DAT_104ef188,0,
	"How many pixels the background borders the top and bottom.");
FUN_10432010(&DAT_1076e840,(int)"locator_fade_time",&DAT_1051467c,0,
	"Number of seconds it takes for a lesson to fully fade in/out.");
FUN_10432010(&DAT_1076e7e8,(int)"locator_icon_max_size_non_ss",&DAT_104f94c0,0,
	"Minimum scale of the icon on the screen");
FUN_10432010(&DAT_1076e790,(int)"locator_icon_min_size_non_ss",&DAT_104f04fc,0,
	"Minimum scale of the icon on the screen");
FUN_10432010(&DAT_1076e8f0,(int)"locator_lerp_rest","2.25f",0,
	"Number of seconds before moving from the center.");
FUN_10432010(&DAT_1076e898,(int)"locator_lerp_speed",&DAT_10527220,0,
	"Speed that static lessons move along the Y axis.");
FUN_10432010(&DAT_1076e948,(int)"locator_lerp_time","1.75f",0,
	"Number of seconds to lerp before reaching final destination");
FUN_10432010(&DAT_1076e9a0,(int)"locator_pulse_time",&DAT_104f84b4,0,
	"Number of seconds to pulse after changing icon or position");
FUN_10432270(&DAT_1076ee70,(int)"locator_split_len",&DAT_104f17c0,0x4000);
FUN_10432270(&DAT_1076ee18,(int)"locator_split_maxwide_percent","0.80f",0x4000);
FUN_10432010(&DAT_1076e9f8,(int)"locator_start_at_crosshair",&DAT_104ef188,0,
	"Start position at the crosshair instead of the top middle of the screen.");
FUN_10432010(&DAT_1076ed68,(int)"locator_target_offset_x",&DAT_104ef188,0,
	"How many pixels to offset the locator from the target position.");
FUN_10432010(&DAT_1076edc0,(int)"locator_target_offset_y",&DAT_104ef188,0,
	"How many pixels to offset the locator from the target position.");
FUN_10432010(&DAT_1076ea50,(int)"locator_topdown_style",&DAT_104ef188,0,
	"Topdown games set this to handle distance and offscreen location differently.");
FUN_104320a0(&DAT_1076ef28,(int)&DAT_105289c0,&DAT_104ef188,0,"Automates fov command to server.",
FUN_10432270(&DAT_1076f468,(int)"c_maxdistance",&DAT_1052041c,0x80);
FUN_10432270(&DAT_1076f308,(int)"c_maxpitch",&DAT_1051c57c,0x80);
FUN_10432270(&DAT_1076f3b8,(int)"c_maxyaw",&DAT_1051fe48,0x80);
FUN_10432270(&DAT_1076f4c0,(int)"c_mindistance",&DAT_104f44a8,0x80);
FUN_10432270(&DAT_1076f360,(int)"c_minpitch",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076f410,(int)"c_minyaw",&DAT_10528cfc,0x80);
FUN_10432270(&DAT_1076f570,(int)"c_orthoheight",&DAT_104f48e0,0x80);
FUN_10432270(&DAT_1076f518,(int)"c_orthowidth",&DAT_104f48e0,0x80);
FUN_10432270(&DAT_1076f5c8,(int)"c_thirdpersonshoulder","false",0x80);
FUN_10432270(&DAT_1076f728,(int)"c_thirdpersonshoulderaimdist","120.0",0x80);
FUN_10432270(&DAT_1076f678,(int)"c_thirdpersonshoulderdist",&DAT_1052191c,0x80);
FUN_10432270(&DAT_1076f6d0,(int)"c_thirdpersonshoulderheight",&DAT_105217fc,0x80);
FUN_10432270(&DAT_1076f620,(int)"c_thirdpersonshoulderoffset",&DAT_10528d50,0x80);
FUN_10432010(&DAT_1076f258,(int)"cam_collision",&DAT_104ef184,0x80,
	"When in thirdperson and cam_collision is set to 1, an attempt is made to keep the camera from passing though walls."
FUN_10431e50(&DAT_1076f780,(int)"cam_command",(int)FUN_1012aba0,"Tells camera to change modes",
FUN_10432010(&DAT_1076f048,(int)"cam_idealdelta",&DAT_104fc21c,0x80,
	"Controls the speed when matching offset to ideal angles in thirdperson view");
FUN_10432270(&DAT_1076f150,(int)"cam_idealdist",&DAT_1051fe84,0x80);
FUN_10432270(&DAT_1076f1a8,(int)"cam_idealdistright",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076f200,(int)"cam_idealdistup",&DAT_104ef188,0x80);
FUN_10432010(&DAT_1076eff0,(int)"cam_ideallag",&DAT_104fc21c,0x80,
	"Amount of lag used when matching offset to ideal angles in thirdperson view");
FUN_10432270(&DAT_1076f0f8,(int)"cam_idealpitch",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076f0a0,(int)"cam_idealyaw",&DAT_104ef188,0x80);
FUN_10432010(&DAT_1076f2b0,(int)"cam_showangles",&DAT_104ef188,0x4000,
	"When in thirdperson, print viewangles/idealangles/cameraoffsets to the console.");
FUN_10432270(&DAT_1076ef98,(int)"cam_snapto",&DAT_104ef188,0x80);
FUN_10431ef0(&DAT_1076f9e4,(int)"camortho",(int)FUN_1012aa70,"Switch to orthographic camera.",
FUN_10431e50(&DAT_1076f930,(int)"-camout",(int)FUN_101291c0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431ef0(&DAT_1076fa74,(int)"-camdistance",(int)FUN_10128f40,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f8e8,(int)"-camin",(int)FUN_10129000,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431ef0(&DAT_1076fa2c,(int)"-cammousemove",(int)FUN_10128f70,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f858,(int)"-camyawleft",(int)FUN_1012a960,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f8a0,(int)"-camyawright",(int)FUN_1012a9e0,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f810,(int)"-campitchdown",(int)FUN_10129240,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f7c8,(int)"-campitchup",(int)FUN_101292c0,(undefined *)0x0,0,
FUN_10431ef0(&DAT_1076f978,(int)"firstperson",(int)FUN_1012aa20,"Switch to firstperson camera.",0,
FUN_10431ef0(&DAT_1076fa98,(int)"snapto",(int)FUN_1012a8e0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431ef0(&DAT_1076fa50,(int)"+camdistance",(int)FUN_10129330,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f8c4,(int)"+camin",(int)FUN_10128fc0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431ef0(&DAT_1076fa08,(int)"+cammousemove",(int)FUN_10129410,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f90c,(int)"+camout",(int)FUN_10129180,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_1076f834,(int)"+camyawleft",(int)FUN_1012a920,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f87c,(int)"+camyawright",(int)FUN_1012a9a0,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f7ec,(int)"+campitchdown",(int)FUN_10129200,(undefined *)0x0,0,
FUN_10431e50(&DAT_1076f7a4,(int)"+campitchup",(int)FUN_10129280,(undefined *)0x0,0,
FUN_10431ef0(&DAT_1076f954,(int)"thirdperson",(int)FUN_1012aa80,"Switch to thirdperson camera.",
FUN_10431ef0(&DAT_1076f9c0,(int)"thirdpersonoverview",(int)FUN_1012aab0,
	"Switch to thirdperson-overview camera.",0x4002,(undefined *)0x0);
FUN_10431ef0(&DAT_1076f99c,(int)"thirdpersonshoulder",(int)FUN_1012aac0,
	"Switch to thirdperson-shoulder camera.",0,(undefined *)0x0);
FUN_10432270(&DAT_10770e00,(int)"joy_accel_filter",&DAT_104f918c,0);
FUN_10432270(&DAT_10770358,(int)"joy_accelmax",&DAT_104f04fc,0x80);
FUN_10432270(&DAT_10770300,(int)"joy_accelscale",&DAT_10529344,0x80);
FUN_10432270(&DAT_1076fbc8,(int)"joy_advanced",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fd28,(int)"joy_advaxisr",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fd80,(int)"joy_advaxisu",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fdd8,(int)"joy_advaxisv",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fc20,(int)"joy_advaxisx",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fc78,(int)"joy_advaxisy",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076fcd0,(int)"joy_advaxisz",&DAT_104ef188,0x80);
FUN_10432010(&DAT_10770408,(int)"joy_autoaimdampen",&DAT_104ef188,0x280,
	"How much to scale user stick input when the gun is pointing at a valid target.");
FUN_10432010(&DAT_107703b0,(int)"joy_autoaimdampenrange",&DAT_104ef188,0x80,
	"The stick range where autoaim dampening is applied. 0 = off");
FUN_10432010(&DAT_10770778,(int)"joy_autosprint",&DAT_104ef188,0,
	"Automatically sprint when moving with an analog joystick");
FUN_10432270(&DAT_10770ae8,(int)"joy_cfg_custom_bindingsA",&DAT_104ef188,0x1008080);
FUN_10432270(&DAT_10770b40,(int)"joy_cfg_custom_bindingsB",&DAT_104ef188,0x1008080);
FUN_10432270(&DAT_10770b98,(int)"joy_cfg_preset",&DAT_104ef184,0x1008080);
FUN_10432270(&DAT_10770618,(int)"joy_circle_correct",&DAT_104ef184,0x80);
FUN_10432270(&DAT_10770e58,(int)"joy_debug_ouput",(undefined *)0x0,0);
FUN_10432010(&DAT_10770670,(int)"joy_diagonalpov",&DAT_104ef188,0x80,
	"POV manipulator operates on diagonal axes, too.");
FUN_10432270(&DAT_107706c8,(int)"joy_display_input",&DAT_104ef188,0x80);
FUN_10432270(&DAT_1076ff90,(int)"joy_forwardsensitivity",&DAT_104ef1dc,0x80);
FUN_10432270(&DAT_1076fe30,(int)"joy_forwardthreshold",&DAT_10529118,0x80);
FUN_10432010(&DAT_107707d0,(int)"joy_invertx",&DAT_104ef188,0x1008080,
	"Whether to invert the X axis of the joystick for looking.");
FUN_10432010(&DAT_10770828,(int)"joy_inverty",&DAT_104ef188,0x1008080,
	"Whether to invert the Y axis of the joystick for looking.");
FUN_10432010(&DAT_107700f0,(int)"joy_legacy",&DAT_104ef188,0x1008080,
	"Turn on/off \'Legacy\' mapping for control sticks.");
FUN_10432270(&DAT_10770a90,(int)"joy_lookspin_default",&DAT_105218fc,0);
FUN_10432270(&DAT_10770250,(int)"joy_lowend",&DAT_104ef184,0x80);
FUN_10432270(&DAT_107702a8,(int)"joy_lowmap",&DAT_104ef184,0x80);
FUN_104320a0(&DAT_10770bf0,(int)"joy_movement_stick",&DAT_104ef188,0x1008080,
	"Which stick controls movement (0 is left stick)",(int)FUN_1012dbb0);
FUN_10432270(&DAT_1076fb70,(int)"joy_name","joystick",0x80);
FUN_10432270(&DAT_10770cf8,(int)"joy_no_accel_jump",&DAT_104ef188,0x80);
FUN_10432270(&DAT_10770d50,(int)"joy_pegged",&DAT_105296b0,0);
FUN_10432270(&DAT_10770040,(int)"joy_pitchsensitivity",&DAT_104ef184,0x1008080);
FUN_10432270(&DAT_107709e0,(int)"joy_pitchsensitivity_default",&DAT_104f04e0,0);
FUN_10432270(&DAT_1076fee0,(int)"joy_pitchthreshold",&DAT_10529118,0x80);
FUN_10432010(&DAT_107701f8,(int)"joy_response_look",&DAT_104ef188,0x80,
	"\'Look\' stick response mode: 0=Default, 1=Acceleration Promotion");
FUN_10432010(&DAT_10770148,(int)"joy_response_move",&DAT_104ef184,0x80,
	"\'Movement\' stick response mode: 0=Linear, 1=quadratic, 2=cubic, 3=quadratic extreme, 4=power function(i.e., pow(x,1/sensitivity)), 5=two-stage"
FUN_10432270(&DAT_107701a0,(int)"joy_response_move_vehicle",&DAT_105292b4,0);
FUN_10432270(&DAT_10770510,(int)"joy_sensitive_step0",&DAT_104fc1dc,0x80);
FUN_10432270(&DAT_10770568,(int)"joy_sensitive_step1",&DAT_104fc278,0x80);
FUN_10432270(&DAT_107705c0,(int)"joy_sensitive_step2",&DAT_1052947c,0x80);
FUN_10432270(&DAT_1076ffe8,(int)"joy_sidesensitivity",&DAT_104ef184,0x80);
FUN_10432270(&DAT_1076fe88,(int)"joy_sidethreshold",&DAT_10529118,0x80);
FUN_10432010(&DAT_10770ca0,(int)"joy_steamcontroller_cfg_loaded",&DAT_104ef188,0,
	"If 0, the steam controller .cfg file will be executed on startup & option changes.")
FUN_10432270(&DAT_1076fb18,(int)"joy_variable_frametime",&DAT_104ef184,0);
FUN_10432270(&DAT_10770460,(int)"joy_vehicle_turn_lowend",&DAT_105248b4,0);
FUN_10432270(&DAT_107704b8,(int)"joy_vehicle_turn_lowmap",&DAT_104fc278,0);
FUN_10432010(&DAT_10770880,(int)"joy_vibration",&DAT_104ef184,0x8080,"Controller vibration.");
FUN_10432270(&DAT_10770da8,(int)"joy_virtual_peg",&DAT_104ef188,0);
FUN_10432010(&DAT_10770720,(int)"joy_wingmanwarrior_turnhack",&DAT_104ef188,0x80,
	"Wingman warrior hack related to turn axes.");
FUN_10432010(&DAT_10770c48,(int)"joy_xcontroller_cfg_loaded",&DAT_104ef188,0,
	"If 0, the 360controller.cfg file will be executed on startup & option changes.");
FUN_10432270(&DAT_10770098,(int)"joy_yawsensitivity",&DAT_104ef1dc,0x1008080);
FUN_10432270(&DAT_10770988,(int)"joy_yawsensitivity_default","-1.25",0);
FUN_10432270(&DAT_1076ff38,(int)"joy_yawthreshold",&DAT_10529118,0x80);
FUN_10432010(&DAT_107708d8,(int)"sc_joystick_inner_deadzone_scale",&DAT_104ef184,0x80,
	"Scale of the default inner deadzone");
FUN_10432010(&DAT_10770930,(int)"sc_joystick_outer_deadzone_scale",&DAT_105296b0,0x80,
	"Scale of the default outer pegged amount");
FUN_10432270(&DAT_10770a38,(int)"sv_stickysprint_default",&DAT_104ef188,0);
FUN_10432270(&DAT_10771040,(int)"cl_anglespeedkey",&DAT_10529c4c,0);
FUN_10432010(&DAT_10771460,(int)"cl_lagcomp_errorcheck",&DAT_104ef188,0,
	"Player index of other player to check for position errors.");
FUN_10432270(&DAT_10771148,(int)"cl_pitchdown",&DAT_10529c84,0x4000);
FUN_10432270(&DAT_107710f0,(int)"cl_pitchspeed",&DAT_1051ffac,0);
FUN_10432270(&DAT_107711a0,(int)"cl_pitchup",&DAT_10529c98,0x4000);
FUN_10432270(&DAT_107711f8,(int)"cl_upspeed",&DAT_10520128,0x4000);
FUN_10432270(&DAT_10771098,(int)"cl_yawspeed",&DAT_1051ff70,0);
FUN_10431e50(&DAT_10771e04,(int)"-leanleft",(int)FUN_10130180,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771e4c,(int)"-leanright",(int)FUN_10130310,(undefined *)0x0,0,(undefined *)0x0
FUN_10431e50(&DAT_10771be8,(int)"-attack2",(int)FUN_101303f0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771ba0,(int)"-attack",(int)FUN_10130470,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771918,(int)"-back",(int)FUN_101304f0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771f6c,(int)"-break",(int)FUN_10130570,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771768,(int)"-commandermousemove",(int)FUN_10130700,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771d74,(int)"-duck",(int)FUN_10130920,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107718d0,(int)"-forward",(int)FUN_10130a90,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771f24,(int)"-graph",(int)FUN_10130b10,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10772020,(int)"-grenade",(int)FUN_10130b90,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10772068,(int)"-grenadeswap",(int)FUN_10130c20,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771d2c,(int)"-jlook",(int)FUN_10130ce0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771c78,(int)"-jump",(int)FUN_10130e50,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771ce4,(int)"-klook",(int)FUN_10130ed0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771840,(int)"-left",(int)FUN_101310b0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107720d4,(int)"-lookspin",(int)FUN_10131130,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771960,(int)"-lookup",(int)FUN_10131230,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107717f8,(int)"-movedown",(int)FUN_10130780,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771a38,(int)"-moveleft",(int)FUN_101312b0,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771a80,(int)"-moveright",(int)FUN_10131330,(undefined *)0x0,0,(undefined *)0x0
FUN_10431e50(&DAT_107717b0,(int)"-moveup",(int)FUN_101317c0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771dbc,(int)"-reload",(int)FUN_101313b0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771888,(int)"-right",(int)FUN_10131430,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771b10,(int)"-sprint",(int)FUN_10131570,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771e94,(int)"-score",(int)FUN_10131600,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771edc,(int)"-showscores",(int)FUN_10131600,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771ac8,(int)"-speed",(int)FUN_101316c0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107719f0,(int)"-strafe",(int)FUN_10131740,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771c30,(int)&DAT_1052a1f8,(int)FUN_10131840,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771b58,(int)"-roll",(int)FUN_101318c0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771ffc,(int)"-tactic",(int)FUN_10131940,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431ef0(&DAT_10771f90,(int)"force_centerview",(int)FUN_101305b0,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771c9c,(int)"impulse",(int)FUN_10130c60,(undefined *)0x0,0,(undefined *)0x0);
FUN_10432010(&DAT_10771618,(int)"in_forceuser",&DAT_104ef188,0x4002,
	"Force user input to this split screen player.");
FUN_104321d0(&DAT_10771300,(int)"joystick",&DAT_104ef184,0x80,
	"True if the joystick is enabled, false otherwise.",1,0,1,0x3f800000,
FUN_10432010(&DAT_10771710,(int)"in_usekeyboardsampletime",&DAT_104ef184,0,
	"Use keyboard sample time smoothing.");
FUN_10431e50(&DAT_10771fb4,(int)"joyadvancedupdate",(int)FUN_10130d30,&DAT_104eefb3,0x40000000,
FUN_10431e50(&DAT_107719a8,(int)"-lookdown",(int)FUN_101311b0,(undefined *)0x0,0,(undefined *)0x0)
FUN_10432270(&DAT_10771250,(int)"lookspring",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107712a8,(int)"lookstrafe",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107714b8,(int)"option_duck_method",&DAT_104ef188,0x88080);
FUN_10432270(&DAT_10771510,(int)"option_lean_method",&DAT_104ef188,0x88080);
FUN_10432270(&DAT_10771568,(int)"round_start_reset_duck",&DAT_104ef188,0);
FUN_10432270(&DAT_107715c0,(int)"round_start_reset_lean",&DAT_104ef188,0);
FUN_10432010(&DAT_10771670,(int)"ss_mimic",&DAT_104ef188,0x4002,
	"Split screen users mimic base player\'s CUserCmds");
FUN_10431e50(&DAT_107716c8,(int)"ss_teleport",(int)FUN_10132100,
	"Teleport other splitscreen player to my location.",0x4002,(undefined *)0x0);
FUN_10431e50(&DAT_10771de0,(int)"+leanleft",(int)FUN_10130090,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771e28,(int)"+leanright",(int)FUN_10130220,(undefined *)0x0,0,(undefined *)0x0
FUN_10431e50(&DAT_10771bc4,(int)"+attack2",(int)FUN_101303b0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771b7c,(int)"+attack",(int)FUN_10130430,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107718f4,(int)"+back",(int)FUN_101304b0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771f48,(int)"+break",(int)FUN_10130530,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107716ec,(int)"+commandermousemove",(int)FUN_101306c0,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771d50,(int)"+duck",(int)FUN_101307c0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107718ac,(int)"+forward",(int)FUN_10130a50,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771f00,(int)"+graph",(int)FUN_10130ad0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10772044,(int)"+grenade",(int)FUN_10130b50,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_1077208c,(int)"+grenadeswap",(int)FUN_10130bd0,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771d08,(int)"+jlook",(int)FUN_10130ca0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771c54,(int)"+jump",(int)FUN_10130d50,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771cc0,(int)"+klook",(int)FUN_10130e90,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_1077181c,(int)"+left",(int)FUN_10131070,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771984,(int)"+lookdown",(int)FUN_10131170,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_107720b0,(int)"+lookspin",(int)FUN_101310f0,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_1077193c,(int)"+lookup",(int)FUN_101311f0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107717d4,(int)"+movedown",(int)FUN_10130740,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771a14,(int)"+moveleft",(int)FUN_10131270,(undefined *)0x0,0,(undefined *)0x0)
FUN_10431e50(&DAT_10771a5c,(int)"+moveright",(int)FUN_101312f0,(undefined *)0x0,0,(undefined *)0x0
FUN_10431e50(&DAT_1077178c,(int)"+moveup",(int)FUN_10131780,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771d98,(int)"+reload",(int)FUN_10131370,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771864,(int)"+right",(int)FUN_101313f0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771aec,(int)"+sprint",(int)FUN_10131470,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771e70,(int)"+score",(int)FUN_101315b0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771eb8,(int)"+showscores",(int)FUN_101315b0,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771aa4,(int)"+speed",(int)FUN_10131680,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107719cc,(int)"+strafe",(int)FUN_10131700,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771c0c,(int)&DAT_1052a1f0,(int)FUN_10131800,(undefined *)0x0,0,
FUN_10431e50(&DAT_10771b34,(int)"+roll",(int)FUN_10131880,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_10771fd8,(int)"+tactic",(int)FUN_10131900,(undefined *)0x0,0,(undefined *)0x0);
FUN_10432010(&DAT_10771408,(int)"sv_noclipduringpause",&DAT_104ef188,0x6000,
	"If cheats are enabled, then you can noclip with the game paused (for doing screenshots, etc.)."
FUN_10432010(&DAT_10771358,(int)"thirdperson_platformer",&DAT_104ef188,0,
	"Player will aim in the direction they are moving.");
FUN_10432010(&DAT_107713b0,(int)"thirdperson_screenspace",&DAT_104ef188,0,
	"Movement will be relative to the camera, eg: left means screen-left");
FUN_10431e50(&DAT_1077211c,(int)"xlook",(int)FUN_1003ffb0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10431e50(&DAT_107720f8,(int)"xmove",(int)FUN_1003ffb0,(undefined *)0x0,0,(undefined *)0x0);
FUN_10432270(&DAT_10772748,(int)"cl_mouseenable",&DAT_104ef184,0x80000);
FUN_10432010(&DAT_10772430,(int)"cl_mouselook",&DAT_104ef184,0x408280,
	"Set to 1 to use mouse for look, 0 for keyboard look. Cannot be set while connected to a server."
FUN_10432010(&DAT_10772488,(int)"cl_mouselook_roll_compensation",&DAT_104ef184,0,
	"In Portal and Paint, if your view is being rolled, compensate for that. So mouse movements are always relative to the screen."
FUN_10432010(&DAT_10772590,(int)"m_pitch","0.022",0x8080,"Mouse pitch factor.");
FUN_10432010(&DAT_10772698,(int)"m_customaccel",&DAT_104ef188,0x80,
	"Custom mouse acceleration:\n0: custom accelaration disabled\n1: mouse_acceleration = min(m_customaccel_max, pow(raw_mouse_delta, m_customaccel_exponent) * m_customaccel_scale + sensitivity)\n2: Same as 1, with but x and y sensitivity are scaled by m_pitch and m_yaw respectively.\n3: mouse_acceleration = pow(raw_mouse_delta, m_customaccel_exponent - 1) * sensitivity"
FUN_10432130(&DAT_107722c8,(int)"m_customaccel_exponent",&DAT_10501f00,0x80,
	"Mouse move is raised to this power before being scaled by scale factor.",1,
FUN_10432010(&DAT_107724e0,(int)"m_customaccel_max",&DAT_104ef188,0x80,
	"Max mouse move scale factor, 0 for no limit");
FUN_10432130(&DAT_10772640,(int)"m_customaccel_scale",&DAT_1052a6d8,0x80,
	"Custom mouse acceleration value.",1,0,0,0);
FUN_10432010(&DAT_107727a0,(int)"m_forward",&DAT_104ef184,0x80,"Mouse forward factor.");
FUN_10432130(&DAT_107723d8,(int)"m_mouseaccel1",&DAT_104ef188,0x80,
	"Windows mouse acceleration initial threshold (2x movement).",1,0,0,0);
FUN_10432130(&DAT_10772328,(int)"m_mouseaccel2",&DAT_104ef188,0x80,
	"Windows mouse acceleration secondary threshold (4x movement).",1,0,0,0);
FUN_10432130(&DAT_107727f8,(int)"m_mousespeed",&DAT_104ef184,0x80,
	"Windows mouse acceleration (0 to disable, 1 to enable [Windows 2000: enable initial threshold], 2 to enable secondary threshold [Windows 2000 only])."
FUN_10432010(&DAT_10772380,(int)"m_rawinput",&DAT_104ef188,0x80,"Use Raw Input for mouse input.");
FUN_10432010(&DAT_10772538,(int)"m_side",&DAT_1052a4e8,0x80,"Mouse side factor.");
FUN_10432010(&DAT_107725e8,(int)"m_yaw","0.022",0x80,"Mouse yaw factor.");
FUN_10432130(&DAT_107726f0,(int)"sensitivity",&DAT_104ef394,0x80,"Mouse sensitivity.",1,0x38d1b717
FUN_10432010(&DAT_107728a8,(int)"sc_enable",&DAT_104f04fc,0x8080,"Enable SteamController");
FUN_10432010(&DAT_107729b8,(int)"sc_pitch_sensitivity",&DAT_1052aa60,0x8080,
	"SteamController pitch factor.");
FUN_10432270(&DAT_10772850,(int)"sc_pitch_sensitivity_default",&DAT_1052aa60,0);
FUN_10432010(&DAT_10772908,(int)"sc_yaw_sensitivity",&DAT_104f04fc,0x8080,
	"SteamController yaw factor.");
FUN_10432270(&DAT_10772960,(int)"sc_yaw_sensitivity_default",&DAT_104f04fc,0);
FUN_10432130(&DAT_107739e0,(int)"tir_maxpitch",&DAT_1052ab20,0x4000,"TrackIR Max Pitch",1,0,1,
FUN_10432130(&DAT_10773ae8,(int)"tir_maxroll",&DAT_1051c57c,0x4000,"TrackIR Max Roll",1,0,1,
FUN_10432130(&DAT_10773928,(int)"tir_maxx",&DAT_1052ab64,0x4000,"TrackIR Max X",1,0,1,0x42480000);
FUN_10432130(&DAT_10773ba8,(int)"tir_maxy",&DAT_105292b4,0x4000,"TrackIR Max Y",1,0,1,0x42480000);
FUN_10432130(&DAT_10773980,(int)"tir_maxyaw",&DAT_1051c57c,0x4000,"TrackIR Max Yaw",1,0,1,
FUN_10432130(&DAT_10773a90,(int)"tir_maxz",&DAT_104ef184,0x4000,"TrackIR Max Z",1,0,1,0x42480000);
FUN_10432130(&DAT_10773b50,(int)"tir_start",&DAT_104ef188,0,"TrackIR Start",1,0,1,0x3f800000);
FUN_10432130(&DAT_10773a38,(int)"tir_stop",&DAT_104ef188,0,"TrackIR Stop",1,0,1,0x3f800000);
FUN_10432010(&DAT_10773c10,(int)"cl_extrapolate_amount",&DAT_1052ad00,0x4000,
	"Set how many seconds the client will extrapolate entities for.");
FUN_10432010(&DAT_10773cd0,(int)"cl_jiggle_bone_debug",&DAT_104ef188,0x4000,
	"Display physics-based \'jiggle bone\' debugging information");
FUN_10432010(&DAT_10773c70,(int)"cl_jiggle_bone_debug_pitch_constraints",&DAT_104ef188,0x4000,
	"Display physics-based \'jiggle bone\' debugging information");
FUN_10432010(&DAT_10773dd8,(int)"cl_jiggle_bone_debug_yaw_constraints",&DAT_104ef188,0x4000,
	"Display physics-based \'jiggle bone\' debugging information");
FUN_10432270(&DAT_10773d28,(int)"cl_jiggle_bone_invert",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10773d80,(int)"cl_jiggle_bone_sanity",&DAT_104ef184,0,
	"Prevent jiggle bones from pointing directly away from their target in case of numerical instability."
FUN_10432270(&DAT_10776fb8,(int)"cl_colorfastpath",&DAT_104ef188,0);
FUN_10432010(&DAT_10777010,(int)"cl_skipfastpath",&DAT_104ef188,0x4000,
	"Set to 1 to stop all models that go through the model fast path from rendering");
FUN_10432270(&DAT_107746f0,(int)"r_DrawModelLightOrigin",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10774640,(int)"r_lod",&DAT_104ef1dc,0);
FUN_10432270(&DAT_10774698,(int)"r_shadowlod",&DAT_104ef1dc,0);
FUN_10432270(&DAT_10777a18,(int)"r_AirboatViewDampenDamp",&DAT_104f04fc,0x6100);
FUN_10432270(&DAT_107779c0,(int)"r_AirboatViewDampenFreq",&DAT_1052c8e0,0x6100);
FUN_10432270(&DAT_10777a70,(int)"r_AirboatViewZHeight",&DAT_104f2504,0x6100);
FUN_10432270(&DAT_10777910,(int)"r_JeepViewDampenDamp",&DAT_104f04fc,0x6100);
FUN_10432270(&DAT_107778b8,(int)"r_JeepViewDampenFreq",&DAT_1052c8e0,0x6100);
FUN_10432270(&DAT_10777968,(int)"r_JeepViewZHeight",&DAT_104f18a4,0x6100);
FUN_10432270(&DAT_10777860,(int)"r_VehicleViewDampen",&DAT_104ef184,0x6100);
FUN_10432270(&DAT_10777390,(int)"sv_accelerate",&DAT_1051c474,0x2102);
FUN_10432270(&DAT_107773e8,(int)"sv_airaccelerate",&DAT_1051c474,0x2102);
FUN_10432010(&DAT_107777b0,(int)"sv_backspeed",&DAT_10529344,0x2002,
	"How much to slow down backwards motion");
FUN_10432010(&DAT_10777650,(int)"sv_bounce",&DAT_104ef188,0x2102,
	"Bounce multiplier for when physically simulated objects collide with other objects."
FUN_10432010(&DAT_107774f0,(int)"sv_footsteps",&DAT_104ef184,0x2102,
	"Play footstep sound for players");
FUN_10432010(&DAT_107775f8,(int)"sv_friction",&DAT_1052ab64,0x2102,"World friction.");
FUN_10432010(&DAT_10777078,(int)"sv_gravity",&DAT_10520894,0x6100,"World gravity.");
FUN_10432010(&DAT_107770d0,(int)"sv_gravity_alt",&DAT_104f48c8,0x6100,"Sets alternate-gravity.");
FUN_10432270(&DAT_10777338,(int)"sv_maxspeed",&DAT_105200b0,0x2102);
FUN_10432010(&DAT_107776a8,(int)"sv_maxvelocity",&DAT_1052c7e8,0x2002,
	"Maximum speed any ballistically moving object is allowed to attain per axis.");
FUN_10432270(&DAT_10777180,(int)"sv_noclipaccelerate",&DAT_1052c600,0x2180);
FUN_10432270(&DAT_107771d8,(int)"sv_noclipspeed",&DAT_1052c600,0x2180);
FUN_10432010(&DAT_107775a0,(int)"sv_rollangle",&DAT_104ef188,0x2102,"Max view roll angle");
FUN_10432270(&DAT_10777548,(int)"sv_rollspeed",&DAT_104fc374,0x2102);
FUN_10432010(&DAT_10777758,(int)"sv_skyname","sky_ti_09_hdr",0x2080,
	"Current name of the skybox texture");
FUN_10432270(&DAT_10777230,(int)"sv_specaccelerate",&DAT_1052c600,0x2180);
FUN_10432270(&DAT_107772e0,(int)"sv_specnoclip",&DAT_104ef184,0x2180);
FUN_10432270(&DAT_10777288,(int)"sv_specspeed",&DAT_104ef394,0x2180);
FUN_10432270(&DAT_10777700,(int)"sv_stepsize",&DAT_1052c800,0x2102);
FUN_10432010(&DAT_10777128,(int)"sv_stopspeed",&DAT_104f48e0,0x2102,
	"Minimum stopping speed when on ground.");
FUN_10432270(&DAT_10777440,(int)"sv_wateraccelerate",&DAT_1051c474,0x2102);
FUN_10432010(&DAT_10777808,(int)"sv_waterdist",&DAT_105268d8,0x2002,
	"Vertical view fixup when eyes are near water plane.");
FUN_10432270(&DAT_10777498,(int)"sv_waterfriction",&DAT_104ef184,0x2102);
FUN_10432130(&DAT_10777ad8,(int)"mp_chattime",&DAT_1051c474,0x2000,
	"amount of time players can chat after the game is over",1,0x3f800000,1,0x42f00000);
FUN_10432010(&DAT_10777b30,(int)"mp_timelimit",&DAT_104ef188,0x2100,"game time per map in minutes"
FUN_10432010(&DAT_10777b98,(int)"sv_mumble_positionalaudio",&DAT_104ef184,0x2000,
	"Allows players using Mumble to have support for positional audio.");
FUN_10432270(&DAT_10777bf0,(int)"mat_object_motion_blur_enable",&DAT_104ef188,0);
FUN_10432270(&DAT_10777c48,(int)"mat_object_motion_blur_model_scale",&DAT_1052cd14,0);
FUN_10432010(&DAT_10777da8,(int)"sv_pushaway_clientside",&DAT_104ef188,0x2002,
	"Clientside physics push away (0=off, 1=only localplayer, 1=all players)");
FUN_10432010(&DAT_10777ca0,(int)"sv_pushaway_force","30000",0x2002,
	"How hard physics objects are pushed away from the players on the server.");
FUN_10432010(&DAT_10777d50,(int)"sv_pushaway_max_force",&DAT_10501ed4,0x2002,
	"Maximum amount of force applied to physics objects by players.");
FUN_10432010(&DAT_10777e58,(int)"sv_pushaway_max_player_force","10000",0x6002,
	"Maximum of how hard the player is pushed away from physics objects.");
FUN_10432010(&DAT_10777cf8,(int)"sv_pushaway_min_player_speed",&DAT_1052ce1c,0x2002,
	"If a player is moving slower than this, don\'t push away physics objects (enables ducking behind things)."
FUN_10432010(&DAT_10777e00,(int)"sv_pushaway_player_force","200000",0x6002,
	"How hard the player is pushed away from physics objects (falls off with inverse square of distance)."
FUN_10432010(&DAT_10777eb0,(int)"sv_turbophysics",&DAT_104ef188,0x2000,"Turns on turbo physics");
FUN_10432270(&DAT_10777f88,(int)"cl_particle_batch_mode",&DAT_104ef184,0);
FUN_10432010(&DAT_10778228,(int)"cl_particle_fallback_base",&DAT_104ef188,0,
	"Base for falling back to cheaper effects under load.");
FUN_10432010(&DAT_107781d0,(int)"cl_particle_fallback_multiplier",&DAT_104ef184,0,
	"Multiplier for falling back to cheaper effects under load.");
FUN_10432270(&DAT_107784e8,(int)"cl_particle_max_count",&DAT_104ef188,0);
FUN_10432270(&DAT_107783e0,(int)"cl_particle_retire_cost",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_107782d8,(int)"cl_particle_sim_fallback_base_multiplier",&DAT_1052c600,0,
	"How aggressive the switch to fallbacks will be depending on how far over the cl_particle_sim_fallback_threshold_ms the sim time is.  Higher numbers are more aggressive."
FUN_10432010(&DAT_10778280,(int)"cl_particle_sim_fallback_threshold_ms",&DAT_1051c974,0,
	"Amount of simulation time that can elapse before new systems start falling back to cheaper versions"
FUN_10431e50(&DAT_10778540,(int)"cl_particles_dump_effects",(int)FUN_1014cc40,&DAT_104eefb3,0,
FUN_10432270(&DAT_10778178,(int)"cl_particles_show_bbox",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10778438,(int)"particle_sim_alt_cores",&DAT_104f94c0,0);
FUN_10432010(&DAT_10778120,(int)"particle_simulateoverflow",&DAT_104ef188,0x4000,
	"Used for stress-testing particle systems. Randomly denies creation of particles.");
FUN_10432010(&DAT_107780c8,(int)"r_drawparticles",&DAT_104ef184,0x4000,
	"Enable/disable particle rendering");
FUN_10432270(&DAT_10778330,(int)"r_particle_sim_spike_threshold_ms",&DAT_104ef188,0);
FUN_10432270(&DAT_10778490,(int)"r_particle_timescale",&DAT_104f04fc,0);
FUN_10432270(&DAT_10778388,(int)"r_threaded_particles",&DAT_104ef184,0);
FUN_10432270(&DAT_10778790,(int)"cl_aggregate_particles",&DAT_104ef184,0);
FUN_10431ef0(&DAT_107787e8,(int)"cl_dump_particle_stats",(int)FUN_1014e570,
	"dump particle profiling info to particle_profile.csv",0,(undefined *)0x0);
FUN_10431e50(&DAT_1077880c,(int)"cl_particles_dumplist",(int)FUN_1014f680,
	"Dump all new particles, optional name substring.",0,(undefined *)0x0);
FUN_10432270(&DAT_10778738,(int)"cl_particles_show_controlpoints",&DAT_104ef188,0x4000);
FUN_10431ef0(&DAT_107788f8,(int)"perfvisualbenchmark",(int)FUN_101530b0,(undefined *)0x0,0,
FUN_10431ef0(&DAT_1077891c,(int)"perfvisualbenchmark_abort",(int)FUN_10153060,(undefined *)0x0,0,
FUN_10432270(&DAT_10778ab0,(int)"cl_phys_block_dist",&DAT_104f04fc,0);
FUN_10432270(&DAT_10778a58,(int)"cl_phys_block_fraction",&DAT_104fc1dc,0);
FUN_10432010(&DAT_107789a8,(int)"cl_phys_maxticks",&DAT_104ef188,0,
	"Sets the max number of physics ticks allowed for client-side physics (ragdolls)");
FUN_10432270(&DAT_10778d70,(int)"cl_phys_show_active",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10778950,(int)"cl_phys_timescale",&DAT_104f04fc,0x4000,
	"Sets the scale of time for client-side physics (ragdolls)");
FUN_10432010(&DAT_10778c78,(int)"cl_predict_physics",&DAT_104ef188,0,
	"Use a prediction-friendly physics interface on the client");
FUN_10432270(&DAT_10778cd0,(int)"cl_ragdoll_collide",&DAT_104ef188,0);
FUN_10432270(&DAT_10778a00,(int)"phys_debug_check_contacts",&DAT_104ef188,0x6000);
FUN_10432270(&DAT_10778eb0,(int)"PhysicsInitialAverageFrameTime","0.01667",0x6000);
FUN_10432270(&DAT_10778e00,(int)"PhysicsSimulateTicks",&DAT_1052e9c0,0x6000);
FUN_10432270(&DAT_10778e58,(int)"PhysicsSmoothingFactor",&DAT_104f2504,0x6000);
FUN_10432010(&DAT_10778f68,(int)"think_limit",&DAT_1051c474,0x82000,
	"Maximum think time in milliseconds, warning is printed if this is exceeded.");
FUN_10432010(&DAT_1077b390,(int)"cl_phys_props_enable",&DAT_104ef184,0,
	"Disable clientside physics props (must be set before loading a level).");
FUN_10432010(&DAT_1077b2e0,(int)"cl_phys_props_max",&DAT_1051f540,0,
	"Maximum clientside physic props");
FUN_10432010(&DAT_1077b3e8,(int)"cl_phys_props_respawndist",&DAT_10530430,0,
	"Minimum distance from the player that a clientside prop must be before it\'s allowed to respawn."
FUN_10432010(&DAT_1077b440,(int)"cl_phys_props_respawnrate",&DAT_1051c764,0,
	"Time, in seconds, between clientside prop respawns.");
FUN_10432270(&DAT_1077b4f0,(int)"cl_prop_active_gib_limit",&DAT_10520010,0);
FUN_10432270(&DAT_1077b498,(int)"props_break_fadetime",&DAT_105146f8,8);
FUN_10432010(&DAT_1077b338,(int)"r_propsmaxdist",&DAT_10530358,0,"Maximum visible distance");
FUN_10432010(&DAT_1077b928,(int)"ui_posedebug_fade_in_time",&DAT_104f918c,0x24000,
	"Time during which a new pose activity layer is shown in green in +posedebug UI");
FUN_10432010(&DAT_1077b8d0,(int)"ui_posedebug_fade_out_time",&DAT_1052a4e8,0x24000,
	"Time to keep a no longer active pose activity layer in red until removing it from +posedebug UI"
FUN_10432270(&DAT_1077bae8,(int)"cl_wpn_sway_interp",&DAT_104fc1dc,8);
FUN_10432270(&DAT_1077bb40,(int)"cl_wpn_sway_scale",&DAT_104f04fc,0x4008);
FUN_10432270(&DAT_1077bd20,(int)"cl_idealpitchscale",&DAT_1052a4e8,0x80);
FUN_10432010(&DAT_1077bc70,(int)"cl_lagcompensation",&DAT_104ef184,0x200,
	"Perform server side lag compensation of weapon firing events.");
FUN_10432270(&DAT_1077bed8,(int)"cl_pred_doresetlatch",&DAT_104ef184,0);
FUN_10432010(&DAT_1077be80,(int)"cl_pred_optimize",&DAT_104f94c0,0,
	"Optimize for not copying data if didn\'t receive a network update (1), and also for not repredicting if there were no errors (2)."
FUN_10432270(&DAT_1077bf30,(int)"cl_prediction_error_timestamps",&DAT_104ef188,0);
FUN_10432010(&DAT_1077bdd0,(int)"cl_pdump",&DAT_104ef1dc,0x4000,
	"Dump info about this entity to screen.");
FUN_10432010(&DAT_1077be28,(int)"cl_pclass",&DAT_104eefb3,0x4000,
	"Dump entity by prediction classname.");
FUN_10432010(&DAT_1077bd78,(int)"cl_predictionlist",&DAT_104ef188,0x4000,
	"Show which entities are predicting\n");
FUN_10432010(&DAT_1077bc18,(int)"cl_predictweapons",&DAT_104ef184,0x200,
	"Perform client side prediction of weapon effects.");
FUN_10432010(&DAT_1077bcc8,(int)"cl_showerror",&DAT_104ef188,0,
	"Show prediction errors, 2 for above plus detailed field deltas.");
FUN_10432010(&DAT_1077bfc0,(int)"cl_pred_error_verbose",&DAT_104ef188,0,
	"Show more field info when spewing prediction errors.");
FUN_10431e50(&DAT_1077c0c8,(int)"cl_predictioncopy_describe",(int)FUN_1016a5f0,
	"Describe datamap_t for entindex",0,(undefined *)0x0);
FUN_10432010(&DAT_1077c018,(int)"pwatchent",&DAT_104ef1dc,0x4000,
	"Entity to watch for prediction system changes.");
FUN_10432010(&DAT_1077c070,(int)"pwatchvar",&DAT_104eefb3,0x4000,
	"Entity variable to watch in prediction system for changes.");
FUN_10431e50(&DAT_1077c1b0,(int)"cl_pred_track",(int)FUN_1016a830,
	"<entindex> <fieldname>:  Track changes to entity index entindex, for field fieldname."
FUN_10432010(&DAT_1077c2e0,(int)"cl_burninggibs",&DAT_104ef188,0,
	"A burning player that gibs has burning gibs.");
FUN_10432010(&DAT_1077c230,(int)"props_break_max_pieces",&DAT_104ef1dc,0x2000,
	"Maximum prop breakable piece count (-1 = model default)");
FUN_10432010(&DAT_1077c288,(int)"props_break_max_pieces_perframe",&DAT_104ef1dc,0x2000,
	"Maximum prop breakable piece count per frame (-1 = model default)");
FUN_10432010(&DAT_1077c1d8,(int)"sv_pushaway_clientside_size",&DAT_1052ab20,0x2002,
	"Minimum size of pushback objects");
FUN_10432270(&DAT_1077c3e0,(int)"cl_ragdoll_self_collision",&DAT_104ef184,2);
FUN_10432010(&DAT_1077c438,(int)"ragdoll_sleepaftertime",&DAT_1052c600,0,
	"After this many seconds of being basically stationary, the ragdoll will go to sleep."
FUN_10432270(&DAT_1077c8d8,(int)"g_debug_ragdoll_removal",&DAT_104ef188,0x6000);
FUN_10432270(&DAT_1077c980,(int)"g_ragdoll_important_maxcount",&DAT_104f94c0,0x2000);
FUN_10432270(&DAT_1077c880,(int)"g_ragdoll_maxcount",&DAT_10527564,0x2000);
FUN_10432010(&DAT_1077e348,(int)"scene_clientflex",&DAT_104ef184,0x2000,
	"Do client side flex animation.");
FUN_10432010(&DAT_1077e2f0,(int)"scene_print",&DAT_104ef188,0x2000,
	"When playing back a scene, print timing and event info to console.");
FUN_10431e50(&DAT_1077e6c8,(int)"playgamesound",(int)FUN_10180180,
	"Play a sound from the game sounds txt file",0x50000000,FUN_1017fed0);
FUN_10431e50(&DAT_1077e6ec,(int)"snd_playsounds",(int)FUN_101803c0,
	"Play sounds from the game sounds txt file at a given location",0x50000000,
FUN_10431e50(&DAT_1077e710,(int)"snd_setsoundparam",(int)FUN_10180510,"Set a sound paramater",
FUN_10432010(&DAT_1077e628,(int)"cc_showmissing",&DAT_104ef188,0x2000,
	"Show missing closecaption entries.");
FUN_10431e50(&DAT_1077e758,(int)"cl_sos_test_get_opvar",(int)FUN_10180b00,&DAT_104eefb3,0x4000,
FUN_10431e50(&DAT_1077e734,(int)"cl_sos_test_set_opvar",(int)FUN_10180b70,&DAT_104eefb3,0x4000,
FUN_10431e50(&DAT_1077e6a4,(int)"cl_soundemitter_flush",(int)FUN_10180bc0,
	"Flushes the sounds.txt system (server only)",0,(undefined *)0x0);
FUN_10431e50(&DAT_1077e680,(int)"cl_soundemitter_reload",(int)FUN_10180bf0,
	"Flushes the sounds.txt system",0,(undefined *)0x0);
FUN_10432010(&DAT_1077e520,(int)"snd_prevent_ss_duplicates",&DAT_104ef188,0x6002,
	"switch to en/disable the prevention of splitscreen audio file duplicates\n");
FUN_10432270(&DAT_1077e578,(int)"snd_sos_show_client_xmit",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_1077e5d0,(int)"sv_soundemitter_trace",&DAT_104ef1dc,0x2000,
	"Show all EmitSound calls including their symbolic name and the actual wave file they resolved to. (-1 = for nobody, 0 = for everybody, n = for one entity)\n"
FUN_10432010(&DAT_1077e4c8,(int)"sv_soundemitter_version",&DAT_104f94c0,0x6002,
	"specfies what version of soundemitter system to use\n");
FUN_10431e50(&DAT_1077e820,(int)"cl_report_soundpatch",(int)FUN_10182d00,
	"reports client-side sound patch count",0,(undefined *)0x0);
FUN_10432010(&DAT_1077e7c0,(int)"soundpatch_captionlength",&DAT_1051b05c,0x2000,
	"How long looping soundpatch captions should display for.");
FUN_10432010(&DAT_1077f0c8,(int)"mod_load_preload",&DAT_104f04fc,0,
	"Indicates how far ahead in seconds to preload animations.");
FUN_10432010(&DAT_1077f070,(int)"mod_load_showstall",&DAT_104ef188,0,
	"1 - show hitches , 2 - show stalls");
FUN_10432270(&DAT_1077f280,(int)"phys_pushscale",&DAT_104ef184,0x2000);
FUN_10432010(&DAT_1077f9b0,(int)"net_showusercmd",&DAT_104ef188,0,"Show user command encoding");
FUN_10432010(&DAT_1077fa68,(int)"developer",&DAT_104ef188,0x80000,"Set developer message level");
FUN_10432270(&DAT_1077fa10,(int)"r_visualizetraces",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_1077fb70,(int)"violence_ablood",&DAT_104ef184,0,"Draw alien blood");
FUN_10432010(&DAT_1077fbc8,(int)"violence_agibs",&DAT_104ef184,0,"Show alien gib entities");
FUN_10432010(&DAT_1077fac0,(int)"violence_hblood",&DAT_104ef184,0,"Draw human blood");
FUN_10432010(&DAT_1077fb18,(int)"violence_hgibs",&DAT_104ef184,0,"Show human gib entities");
FUN_10432270(&DAT_10780058,(int)"scr_centertime",&DAT_104f94c0,0);
FUN_10432010(&DAT_10780320,(int)"cl_countbones",&DAT_104ef188,0x4000,&DAT_104eefb3);
FUN_10432010(&DAT_10780218,(int)"cl_showbattery",&DAT_104ef188,0,
	"Draw current battery level at top of screen when on battery power");
FUN_10432010(&DAT_107802c8,(int)"cl_showfps5_btlneck_disp_time",&DAT_105217fc,0,
	"Time interval (s) for which main/render/gpu bottleneck times are displayed");
FUN_10432010(&DAT_10780270,(int)"cl_showfps5_disp_time",&DAT_104f04fc,0,
	"Time interval (s) at which thread and wait times are sampled and display is updated"
FUN_10432010(&DAT_10780168,(int)"cl_showfps",&DAT_104ef188,0x80080,
	"Draw fps meter (1 = fps, 2 = smooth, 3 = server, 4 = Show+LogToFile, +10 = detailed )"
FUN_10432010(&DAT_107801c0,(int)"cl_showpos",&DAT_104ef188,0x80000,
	"Draw current position at top of screen");
FUN_104320a0(&DAT_10780f60,(int)"cl_enable_remote_splitscreen",&DAT_104ef188,0,
	"Allows viewing of nonlocal players in a split screen fashion",
FUN_10431e50(&DAT_10780ecc,(int)"cl_panelanimation",(int)FUN_10196590,
	"Shows panel animation variables: <panelname | blank for all panels>.",0,
FUN_10432010(&DAT_10780ef0,(int)"cl_showpausedimage",&DAT_104ef184,0,
	"Show the \'Paused\' image when game is paused.");
FUN_10432010(&DAT_10780e50,(int)"ss_enable",&DAT_104ef188,0x12,
	"Enables Split Screen support. Play Single Player now launches into split screen mode. NO ONLINE SUPPORT"
FUN_104320a0(&DAT_10780d48,(int)"ss_force_primary_fullscreen",&DAT_104ef188,0,
	"If enabled, all splitscreen users will only see the first user\'s screen full screen"
FUN_104320a0(&DAT_10780cf0,(int)"ss_pip_bottom_offset",&DAT_1053b594,0,
	"PIP offset vector from the bottom of the screen",(int)thunk_FUN_10195ea0);
FUN_104320a0(&DAT_10780c98,(int)"ss_pip_right_offset",&DAT_1053b594,0,
	"PIP offset vector from the right of the screen",(int)thunk_FUN_10195ea0);
FUN_104320a0(&DAT_10780c40,(int)"ss_pipscale",&DAT_1053b550,0,
	"Scale of the PIP aspect ratio to our resolution.",(int)thunk_FUN_10195ea0);
FUN_104320a0(&DAT_10780be8,(int)"ss_pipsplit",&DAT_104ef184,0,
	"If enabled, use PIP instead of splitscreen. (Only works for 2 players)",
FUN_10431e50(&DAT_10780ea8,(int)"ss_reloadletterbox",(int)FUN_101965d0,"ss_reloadletterbox",0,
FUN_104320a0(&DAT_10780df8,(int)"ss_splitmode",&DAT_104ef188,0x12,
	"Two player split screen mode (0 - recommended settings base on the width, 1 - horizontal, 2 - vertical (only allowed in widescreen)"
FUN_104320a0(&DAT_10780da0,(int)"ss_verticalsplit",&DAT_104ef188,0,
	"Two player split screen uses vertical split (do not set this directly, use ss_splitmode instead)."
FUN_104320a0(&DAT_10781348,(int)"net_graph",&DAT_104ef188,0x80,
	"Draw the network usage data, = 2 prints in/out data, = 3 draws data on payload,",
FUN_104320a0(&DAT_107813a0,(int)"net_graphheight",&DAT_1052e9c0,0x80,"Height of netgraph panel",
FUN_10432010(&DAT_107812f0,(int)"net_graphholdsvframerate",&DAT_104ef188,0x80,
	"Hold worst case in server framerate line.");
FUN_10432010(&DAT_10781190,(int)"net_graphmsecs",&DAT_1051f584,0x80,
	"The latency graph represents this many milliseconds.");
FUN_10432270(&DAT_10781088,(int)"net_graphpos",&DAT_104ef184,0x80);
FUN_104320a0(&DAT_107813f8,(int)"net_graphproportionalfont",&DAT_104ef184,0x80,
	"Determines whether netgraph font is proportional or not",(int)FUN_1019a320);
FUN_10432010(&DAT_10781240,(int)"net_graphshowinterp",&DAT_104ef184,0x80,
	"Draw the interpolation graph.");
FUN_10432010(&DAT_107811e8,(int)"net_graphshowlatency",&DAT_104ef184,0x80,
	"Draw the ping/packet loss graph.");
FUN_10432010(&DAT_10781298,(int)"net_graphshowsvframerate",&DAT_104ef188,0x80,
	"Draw the server framerate graph.");
FUN_10432270(&DAT_107810e0,(int)"net_graphsolid",&DAT_104ef184,0x80);
FUN_10432010(&DAT_10781138,(int)"net_graphtext",&DAT_104ef184,0x80,"Draw text fields");
FUN_10432130(&DAT_10781030,(int)"net_scale",&DAT_1052c600,0x80,"Graph Scale",1,0x3dcccccd,1,
FUN_10432010(&DAT_10781470,(int)"bink_preload_videopanel_movies",&DAT_104ef184,0,
	"Preload Bink movies used by VideoPanel.");
FUN_10431e50(&DAT_107814dc,(int)"playvideo",(int)FUN_1019c9c0,
	"Plays a video: <filename> [width height]",0,(undefined *)0x0);
FUN_10431e50(&DAT_10781524,(int)"playvideo_end_level_transition",(int)FUN_1019ca40,
	"Plays a video fullscreen without ability to skip (unless dev 1) and fades in: <filename> <time>"
FUN_10431e50(&DAT_10781548,(int)"playvideo_exitcommand",(int)FUN_1019cc00,
	"Plays a video and fires and exit command when it is stopped or finishes: <filename> <exit command>"
FUN_10431e50(&DAT_1078156c,(int)"playvideo_exitcommand_nointerrupt",(int)FUN_1019cd00,
	"Plays a video (without interruption) and fires and exit command when it is stopped or finishes: <filename> <exit command>"
FUN_10431e50(&DAT_10781500,(int)"playvideo_nointerrupt",(int)FUN_1019ce00,
	"Plays a video without ability to skip: <filename> [width height]",0,(undefined *)0x0
FUN_10431e50(&DAT_107815d8,(int)"stop_transition_videos_fadeout",(int)FUN_1019ce80,
	"Fades out all transition videos playing to the screen: <time>",0,(undefined *)0x0);
FUN_10431e50(&DAT_10781590,(int)"stopvideos",(int)FUN_1019cf20,
	"Stops all videos playing to the screen",0,(undefined *)0x0);
FUN_10431e50(&DAT_107815b4,(int)"stopvideos_fadeout",(int)FUN_1019cf60,
	"Fades out all videos playing to the screen: <time>",0,(undefined *)0x0);
FUN_10431ef0(&DAT_10781c50,(int)"centerview",(int)FUN_1019f3b0,(undefined *)0x0,0,(undefined *)0x0
FUN_10432010(&DAT_107819d0,(int)"cl_camera_follow_bone_index",&DAT_104f4420,0x4000,
	"Index of the bone to follow.  -2 == disabled.  -1 == root bone.  0+ is bone index.")
FUN_10432010(&DAT_10781b88,(int)"cl_demoviewoverride",&DAT_104ef188,0,
	"Override view during demo playback");
FUN_10432270(&DAT_10781920,(int)"cl_leveloverview",&DAT_104ef188,0x4000);
FUN_104320a0(&DAT_10781be0,(int)"cl_software_cursor",&DAT_104ef188,0x80,
	"Switches the game to use a larger software cursor instead of the normal OS cursor",
FUN_10431e50(&DAT_10781cf0,(int)"getpos",(int)FUN_1019f7b0,
	"dump position and angles to the console",0,(undefined *)0x0);
FUN_10431e50(&DAT_10781d14,(int)"getpos_exact",(int)FUN_1019f7b0,
	"dump origin and angles to the console",0,(undefined *)0x0);
FUN_10432270(&DAT_10781a28,(int)"gl_clear",&DAT_104ef188,0);
FUN_10432010(&DAT_10781a80,(int)"gl_clear_randomcolor",&DAT_104ef188,0x4000,
	"Clear the back buffer to random colors every frame. Helps spot open seams in geometry."
FUN_10432130(&DAT_10781870,(int)"mat_viewportscale",&DAT_104f04fc,0x4000,
	"Scale down the main viewport (to reduce GPU impact on CPU profiling)",1,0x3acccccd,1
FUN_10432010(&DAT_107818c8,(int)"mat_viewportupscale",&DAT_104ef184,0x4000,
	"Scale the viewport back up");
FUN_10432010(&DAT_10781ad8,(int)"r_farz",&DAT_104ef1dc,0x4000,
	"Override the far clipping plane. -1 means to use the value in env_fog_controller.");
FUN_10432010(&DAT_10781978,(int)"r_mapextents","16384",0x4000,
	"Set the max dimension for the map.  This determines the far clipping plane");
FUN_10432010(&DAT_10781b30,(int)"r_nearz",&DAT_104ef1dc,0x4000,
	"Override the near clipping plane., 7 is defualt, unless running in a megawide aspect ratio."
FUN_10431e50(&DAT_10781c74,(int)"spec_pos",(int)FUN_1019f8a0,
	"dump position and angles to the console",0,(undefined *)0x0);
FUN_10432270(&DAT_10781c98,(int)"ss_debug_draw_player",&DAT_104ef1dc,0x4002);
FUN_10432270(&DAT_10781768,(int)"v_centermove",&DAT_10529118,0);
FUN_10432270(&DAT_107817c0,(int)"v_centerspeed",&DAT_104f444c,0);
FUN_10432270(&DAT_10781818,(int)"viewmodel_fov",&DAT_1053da14,0x4000);
FUN_10432010(&DAT_10781618,(int)"zoom_sensitivity_ratio_joystick",&DAT_104f04fc,0x8080,
	"Additional controller sensitivity scale factor applied when FOV is zoomed in.");
FUN_10432010(&DAT_10781670,(int)"zoom_sensitivity_ratio_mouse",&DAT_104f04fc,0x1008080,
	"Additional mouse sensitivity scale factor applied when FOV is zoomed in.");
FUN_10432010(&DAT_10781e40,(int)"cl_beam_test_traces",&DAT_104ef188,2,
	"Enable debug overlay on traces that determine where the client-side visible env_beam is drawn. Has no bearing on the server-side damage-causing part of the beam."
FUN_10432010(&DAT_10781d50,(int)"r_DrawBeams",&DAT_104ef184,0x4000,"0=Off, 1=Normal, 2=Wireframe")
FUN_10432010(&DAT_10781f10,(int)"shake_show",&DAT_104ef188,0,
	"Displays a list of the active screen shakes.");
FUN_10431ef0(&DAT_10781eec,(int)"shake_stop",(int)FUN_101a3de0,"Stops all active screen shakes.\n"
FUN_10431e50(&DAT_10781f68,(int)"shake_testpunch",(int)FUN_101a3df0,
	"Test a punch-style screen shake.\n",0x4000,(undefined *)0x0);
FUN_10432010(&DAT_10782050,(int)"r_depthoverlay",&DAT_104ef188,0x4000,
	"Replaces opaque objects with their grayscaled depth values. r_showz_power scales the output."
FUN_10432270(&DAT_10781ff8,(int)"r_updaterefracttexture",&DAT_104ef184,0x4000);
FUN_10431e50(&DAT_10782118,(int)"viewanim_addkeyframe",(int)FUN_101a66e0,&DAT_104eefb3,0x4000,
FUN_10431e50(&DAT_107820ac,(int)"viewanim_create",(int)FUN_101a67f0,"viewanim_create",0,
FUN_10431e50(&DAT_10782160,(int)"viewanim_load",(int)FUN_101a6880,"load animation from file",0,
FUN_10431ef0(&DAT_107820f4,(int)"viewanim_reset",(int)FUN_101a62f0,"reset view angles!",0x4000,
FUN_10431e50(&DAT_1078213c,(int)"viewanim_save",(int)FUN_101a68c0,"Save current animation to file"
FUN_10431ef0(&DAT_107820d0,(int)"viewanim_test",(int)FUN_101a6680,"test view animation",0,
FUN_10432010(&DAT_10782190,(int)"cl_drawmaterial",&DAT_104eefb3,0x4000,
	"Draw a particular material over the frame");
FUN_10432270(&DAT_10782660,(int)"cl_drawshadowtexture",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107824a8,(int)"cl_overdraw_test",&DAT_104ef188,0x5000);
FUN_10432270(&DAT_107826b8,(int)"cl_shadowtextureoverlaysize",&DAT_10520028,0x4000);
FUN_10432270(&DAT_107823a0,(int)"mat_camerarendertargetoverlaysize",&DAT_1051fe2c,0x4000);
FUN_10432010(&DAT_10782500,(int)"mat_drawTexture",&DAT_104eefb3,0,"Enable debug view texture");
FUN_10432010(&DAT_10782558,(int)"mat_drawTextureScale",&DAT_104f04fc,0,"Debug view texture scale")
FUN_10432270(&DAT_107822f0,(int)"mat_framebuffercopyoverlaysize",&DAT_1051fe2c,0);
FUN_10432270(&DAT_107823f8,(int)"mat_hsv",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782348,(int)"mat_showcamerarendertarget",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782298,(int)"mat_showframebuffertexture",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782608,(int)"mat_showlightmappage",&DAT_104ef1dc,0);
FUN_10432270(&DAT_107821e8,(int)"mat_showwatertextures",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782240,(int)"mat_wateroverlaysize",&DAT_1051fe2c,0);
FUN_10432270(&DAT_107825b0,(int)"mat_wireframe",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782450,(int)"mat_yuv",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782710,(int)"r_flashlightdrawdepth",&DAT_104ef188,0);
FUN_10431e50(&DAT_10782768,(int)"r_screenoverlay",(int)FUN_101a8070,
	"Draw specified material as an overlay",0x10004000,(undefined *)0x0);
FUN_10432010(&DAT_10783df8,(int)"cl_blurClearAlpha",&DAT_104ef188,0,
	"0-255, but 0 has errors at the moment");
FUN_10432270(&DAT_10783e50,(int)"cl_blurDebug",&DAT_104ef188,0);
FUN_10432270(&DAT_10783f00,(int)"cl_blurPasses",&DAT_104ef184,0);
FUN_10432270(&DAT_10783ea8,(int)"cl_blurTapSize",&DAT_105146f8,0);
FUN_10432010(&DAT_10782938,(int)"mat_debug_postprocessing_effects",&DAT_104ef188,0x4000,
	"0 = off, 1 = show post-processing passes in quadrants of the screen, 2 = only apply post-processing to the centre of the screen"
FUN_10432270(&DAT_10782d58,(int)"mat_accelerate_adjust_exposure_down",&DAT_1052191c,0x4000);
FUN_10432270(&DAT_10782a40,(int)"mat_autoexposure_max",&DAT_104f94c0,0x4000);
FUN_10432270(&DAT_10782a98,(int)"mat_autoexposure_max_multiplier",&DAT_104f04fc,0x4000);
FUN_10432270(&DAT_10782af0,(int)"mat_autoexposure_min",&DAT_105146f8,0x4000);
FUN_10432270(&DAT_10782e08,(int)"mat_bloom_scalefactor_scalar",&DAT_104f04fc,0x4002);
FUN_10432270(&DAT_107828e0,(int)"mat_bloomamount_rate","0.05f",0x4000);
FUN_10432270(&DAT_10782830,(int)"mat_bloomscale",&DAT_104ef184,0x4002);
FUN_10432270(&DAT_10783228,(int)"mat_blur_b",&DAT_105248b4,0);
FUN_10432270(&DAT_107831d0,(int)"mat_blur_g",&DAT_105248b4,0);
FUN_10432270(&DAT_10783178,(int)"mat_blur_r",&DAT_105248b4,0);
FUN_10432270(&DAT_10782d00,(int)"mat_colorcorrection",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10782ca8,(int)"mat_debug_bloom",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10782c50,(int)"mat_disable_bloom",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10783ae0,(int)"mat_dof_enabled",&DAT_104ef184,0);
FUN_10432270(&DAT_10783c98,(int)"mat_dof_far_blur_depth","1000.0",0);
FUN_10432270(&DAT_10783d48,(int)"mat_dof_far_blur_radius",&DAT_105217fc,0);
FUN_10432270(&DAT_10783c40,(int)"mat_dof_far_focus_depth","250.0",0);
FUN_10432270(&DAT_10783b90,(int)"mat_dof_near_blur_depth",&DAT_10528d50,0);
FUN_10432270(&DAT_10783cf0,(int)"mat_dof_near_blur_radius",&DAT_104f18a4,0);
FUN_10432270(&DAT_10783be8,(int)"mat_dof_near_focus_depth","100.0",0);
FUN_10432270(&DAT_10783b38,(int)"mat_dof_override",&DAT_104ef188,0);
FUN_10432270(&DAT_10783da0,(int)"mat_dof_quality",&DAT_104ef188,0);
FUN_10432270(&DAT_10783710,(int)"mat_dump_rts",&DAT_104ef188,2);
FUN_10432270(&DAT_10782990,(int)"mat_dynamic_tonemapping",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10782e60,(int)"mat_exposure_center_region_x",&DAT_1052aa60,0x4000);
FUN_10432270(&DAT_10782eb8,(int)"mat_exposure_center_region_y",&DAT_1053f150,0x4000);
FUN_10432270(&DAT_10782bf8,(int)"mat_force_bloom",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10783018,(int)"mat_force_tonemap_min_avglum",&DAT_104ef1dc,0x4000,
	"Override. Old default was 3.0");
FUN_10432010(&DAT_10782fc0,(int)"mat_force_tonemap_percent_bright_pixels",&DAT_104ef1dc,0x4000,
	"Override. Old value was 2.0");
FUN_10432010(&DAT_10782f68,(int)"mat_force_tonemap_percent_target",&DAT_104ef1dc,0x4000,
	"Override. Old default was 60.");
FUN_10432270(&DAT_10783070,(int)"mat_force_tonemap_scale",&DAT_104f2504,0x4000);
FUN_10432270(&DAT_107830c8,(int)"mat_fullbright",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10783500,(int)"mat_fxaa_edge_sharpness_C",&DAT_1053fb50,0,
	"Does not affect PS3 which uses FXAA_CONSOLE_PS3_EDGE_SHARPNESS define due to being ALU bound (and only safe values are 2, 4, 8). On X360, (2.0 - really soft, good for vector graphics inputs), (4.0 - is softer), (8.0 - is sharper, default)"
FUN_10432010(&DAT_10783558,(int)"mat_fxaa_edge_threshold_C","0.125",0,
	"Does not affect PS3 which uses FXAA_CONSOLE_PS3_EDGE_THRESHOLD define due to being ALU bound (and only safe values are 1/4, 1/8). On X360, (0.125 - default, leaves less aliasing, but is softer, 0.25 - leaves more aliasing and is sharper)"
FUN_10432010(&DAT_10783660,(int)"mat_fxaa_edge_threshold_Q",&DAT_10501b18,0,
	"The minimum amount of local contrast required to apply algorithm: (0.063 - overkill, slower), (0.125 - high quality), (0.166 - default), (0.250 - low quality), (0.333 - too little, faster)"
FUN_10432010(&DAT_107835b0,(int)"mat_fxaa_edge_threshold_min_C",&DAT_104f2504,0,
	"Trims the algorithm from processing darks. Does not affect PS3 due to being ALU bound. (0.04 - slower and less aliasing in darks, 0.05 - default, 0.06 - faster but more aliasing in darks). Special note: when using FXAA_GREEN_AS_LUMA likely want to set this to zero"
FUN_10432010(&DAT_107836b8,(int)"mat_fxaa_edge_threshold_min_Q",&DAT_104f2504,0,
	"Trims the algorithm from processing darks: (0.0312 - visible limit, slower), (0.0625 - high quality, faster), (0.0833 - upper limit, the start of fisible unfiltered edges). Special note: when using FXAA_GREEN_AS_LUMA, likely want to set this to zero"
FUN_10432010(&DAT_107834a8,(int)"mat_fxaa_subpixel_C",&DAT_105146f8,0,
	"Effects sub-pixel AA quality and inversely sharpness (only used on FXAA Console): (0.33 - sharper), (0.5 - default)"
FUN_10432010(&DAT_10783608,(int)"mat_fxaa_subpixel_Q",&DAT_105296b0,0,
	"Effects sub-pixel AA quality and inversely sharpness (only used on FXAA Quality): (0.0 - off), (1.0 - upper limit, softer), default = 0.75"
FUN_10432270(&DAT_10783120,(int)"mat_grain_enable",&DAT_104ef184,0);
FUN_10432270(&DAT_10782888,(int)"mat_hdr_level",&DAT_104f94c0,2);
FUN_10432270(&DAT_10782ba0,(int)"mat_hdr_uncapexposure",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107839d8,(int)"mat_motion_blur_falling_intensity",&DAT_104f04fc,0);
FUN_10432270(&DAT_10783980,(int)"mat_motion_blur_falling_max",&DAT_10528d50,0);
FUN_10432270(&DAT_10783928,(int)"mat_motion_blur_falling_min",&DAT_104f18a4,0);
FUN_10432270(&DAT_107838d0,(int)"mat_motion_blur_forward_enabled",&DAT_104ef188,0);
FUN_10432270(&DAT_10783a30,(int)"mat_motion_blur_rotation_intensity",&DAT_104f04fc,0);
FUN_10432270(&DAT_10783a88,(int)"mat_motion_blur_strength",&DAT_104f04fc,0);
FUN_10432270(&DAT_10782db0,(int)"mat_non_hdr_bloom_scalefactor",&DAT_1053f0ec,0x4002);
FUN_10432270(&DAT_10783870,(int)"mat_postprocess_enable",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_107837c0,(int)"mat_postprocess_x",&DAT_1052ab64,0);
FUN_10432270(&DAT_10783818,(int)"mat_postprocess_y",&DAT_104ef184,0);
FUN_10432270(&DAT_10782b48,(int)"mat_show_histogram",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_10783348,(int)"mat_software_aa_blur_one_pixel_lines",&DAT_105146f8,0,
	"How much software AA should blur one-pixel thick lines: (0.0 - none), (1.0 - lots)")
FUN_10432010(&DAT_107833f8,(int)"mat_software_aa_debug",&DAT_104ef188,0,
	"Software AA debug mode: (0 - off), (1 - show number of \'unlike\' samples: 0->black, 1->red, 2->green, 3->blue), (2 - show anti-alias blend strength), (3 - show averaged \'unlike\' colour)"
FUN_10432010(&DAT_107832f0,(int)"mat_software_aa_edge_threshold",&DAT_104f04fc,0,
	"Software AA - adjusts the sensitivity of the software AA shader\'s edge detection (default 1.0 - a lower value will soften more edges, a higher value will soften fewer)"
FUN_10432010(&DAT_10783298,(int)"mat_software_aa_quality",&DAT_104ef188,0,
	"Software AA quality mode: (0 - 5-tap filter), (1 - 9-tap filter)");
FUN_10432010(&DAT_10783450,(int)"mat_software_aa_strength_vgui",&DAT_104f04e0,0,
	"Same as mat_software_aa_strength, but forced to this value when called by the post vgui AA pass."
FUN_10432010(&DAT_107833a0,(int)"mat_software_aa_tap_offset",&DAT_104f04fc,0,
	"Software AA - adjusts the displacement of the taps used by the software AA shader (default 1.0 - a lower value will make the image sharper, higher will make it blurrier)"
FUN_10432010(&DAT_10782f10,(int)"mat_tonemap_algorithm",&DAT_104ef184,0x4000,
	"0 = Original Algorithm 1 = New Algorithm");
FUN_10432270(&DAT_107829e8,(int)"mat_tonemapping_occlusion_use_stencil",&DAT_104ef188,2);
FUN_10432270(&DAT_10783768,(int)"r_queued_post_processing",&DAT_104ef188,0);
FUN_10432270(&DAT_10792480,(int)"cl_brushfastpath",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_107852b8,(int)"cl_drawmonitors",&DAT_104ef184,0);
FUN_10432010(&DAT_10784600,(int)"cl_maxrenderable_dist",&DAT_10540a64,0x4000,
	"Max distance from the camera at which things will be rendered");
FUN_10432270(&DAT_10792530,(int)"cl_modelfastpath",&DAT_104ef184,0);
FUN_10432010(&DAT_10792588,(int)"cl_skipslowpath",&DAT_104ef188,0x4000,
	"Set to 1 to skip any models that don\'t go through the model fast path");
FUN_10432270(&DAT_10792638,(int)"cl_tlucfastpath",&DAT_104ef184,0);
FUN_10432270(&DAT_10784c88,(int)"fog_color","-1 -1 -1",0x4000);
FUN_10432270(&DAT_10784e40,(int)"fog_colorskybox","-1 -1 -1",0x4000);
FUN_10432270(&DAT_10784ce0,(int)"fog_enable",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784e98,(int)"fog_enableskybox",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784c30,(int)"fog_end",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784d90,(int)"fog_endskybox",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784f48,(int)"fog_hdrcolorscale",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784fa0,(int)"fog_hdrcolorscaleskybox",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784ef0,(int)"fog_maxdensity",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784de8,(int)"fog_maxdensityskybox",&DAT_104ef1dc,0x4000);
FUN_104320a0(&DAT_10784b80,(int)"fog_override",&DAT_104ef188,0x4000,
	"Overrides the map\'s fog settings (-1 populates fog_ vars with map\'s values)",
FUN_10432270(&DAT_10784bd8,(int)"fog_start",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10784d38,(int)"fog_startskybox",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10785260,(int)"mat_clipz",&DAT_104ef184,0);
FUN_10432270(&DAT_10785208,(int)"mat_drawwater",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_107923c8,(int)"mat_lpreview_mode",&DAT_104ef1dc,0x4000);
FUN_10432270(&DAT_10785718,(int)"r_2PassBuildDraw",&DAT_104ef184,2);
FUN_10432010(&DAT_107847b8,(int)"r_3dsky",&DAT_104ef184,0,"Enable the rendering of 3d sky boxes");
FUN_10432010(&DAT_10784a20,(int)"r_DrawDetailProps",&DAT_104ef184,2,"0=Off, 1=Normal, 2=Wireframe"
FUN_10432010(&DAT_107851b0,(int)"r_ForceWaterLeaf",&DAT_104ef184,0,
	"Enable for optimization to water - considers view in leaf under water for purposes of culling"
FUN_10432010(&DAT_10785158,(int)"r_WaterDrawReflection",&DAT_104ef184,0,"Enable water reflection")
FUN_10432010(&DAT_10785100,(int)"r_WaterDrawRefraction",&DAT_104ef184,0,"Enable water refraction")
FUN_10431e50(&DAT_107923a0,(int)"r_cheapwaterend",(int)FUN_101bc9d0,&DAT_104eefb3,0,
FUN_10431e50(&DAT_107857ec,(int)"r_cheapwaterstart",(int)FUN_101bca40,&DAT_104eefb3,0,
FUN_10432270(&DAT_10784ff8,(int)"r_debugcheapwater",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107846b0,(int)"r_deferopaquefastclipped",&DAT_104ef184,0);
FUN_10432010(&DAT_107924d8,(int)"r_drawbrushmodels",&DAT_104ef184,0x4000,
	"Render brush models. 0=Off, 1=Normal, 2=Wireframe");
FUN_10432270(&DAT_10784918,(int)"r_drawopaquerenderables",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784708,(int)"r_drawopaqueworld",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784b28,(int)"r_drawscreenoverlay",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107848c0,(int)"r_drawtranslucentrenderables",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784760,(int)"r_drawtranslucentworld",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784ad0,(int)"r_drawunderwateroverlay",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10784868,(int)"r_drawviewmodel",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_10784658,(int)"r_entityclips",&DAT_104ef184,0);
FUN_10432270(&DAT_10785310,(int)"r_eyewaterepsilon",&DAT_10540e78,0x4000);
FUN_10432270(&DAT_10792420,(int)"r_fade360style",&DAT_104ef184,0);
FUN_10432010(&DAT_10785368,(int)"r_fastzreject",&DAT_104ef188,0,
	"Activate/deactivates a fast z-setting algorithm to take advantage of hardware with fast z reject. Use -1 to default to hardware settings"
FUN_10432270(&DAT_10784970,(int)"r_flashlightdepth_drawtranslucents",&DAT_104ef188,0);
FUN_10432270(&DAT_107849c8,(int)"r_flashlightvolumetrics",&DAT_104ef184,0);
FUN_10432270(&DAT_10785470,(int)"r_simpleworldmodel_drawbeyonddistance_fullscreen",&DAT_104ef1dc,0
FUN_10432270(&DAT_10785680,(int)"r_simpleworldmodel_drawbeyonddistance_pip",&DAT_104ef1dc,0);
FUN_10432270(&DAT_10785578,(int)"r_simpleworldmodel_drawbeyonddistance_splitscreen",&DAT_104ef1dc,
FUN_10432270(&DAT_10785418,(int)"r_simpleworldmodel_drawforrecursionlevel_fullscreen",
FUN_10432270(&DAT_10785628,(int)"r_simpleworldmodel_drawforrecursionlevel_pip",&DAT_104ef1dc,0);
FUN_10432270(&DAT_10785520,(int)"r_simpleworldmodel_drawforrecursionlevel_splitscreen",
FUN_10432270(&DAT_107853c0,(int)"r_simpleworldmodel_waterreflections_fullscreen",&DAT_104ef188,0);
FUN_10432270(&DAT_107855d0,(int)"r_simpleworldmodel_waterreflections_pip",&DAT_104ef188,0);
FUN_10432270(&DAT_107854c8,(int)"r_simpleworldmodel_waterreflections_splitscreen",&DAT_104ef188,0)
FUN_10432010(&DAT_10784810,(int)"r_skybox",&DAT_104ef184,0x4000,
	"Enable the rendering of sky boxes");
FUN_10432010(&DAT_10785770,(int)"r_threaded_buildWRlist",&DAT_104ef184,2,
	"Threaded BuildWorldList and BuildRenderables list");
FUN_10432270(&DAT_107925e0,(int)"r_unlimitedrefract",&DAT_104ef188,0);
FUN_10432270(&DAT_107845a8,(int)"r_visocclusion",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_10785050,(int)"r_waterforceexpensive",&DAT_104ef188,0);
FUN_10432270(&DAT_107850a8,(int)"r_waterforcereflectentities",&DAT_104ef188,0);
FUN_10432270(&DAT_10784a78,(int)"r_worldlistcache",&DAT_104ef184,0);
FUN_10431ef0(&DAT_10784584,(int)"test_freezeframe",(int)FUN_101bcab0,"Test the freeze frame code."
FUN_10431e50(&DAT_107857c8,(int)"toggleThreadedBuildRWList",(int)FUN_101bcad0,
	"toggleThreadedBuildRWList",2,(undefined *)0x0);
FUN_10432010(&DAT_107928c8,(int)"voice_all_icons",&DAT_104ef188,0,"Draw all players\' voice icons"
FUN_10432270(&DAT_10792768,(int)"voice_clientdebug",&DAT_104ef188,0);
FUN_10432010(&DAT_10792818,(int)"voice_head_icon_height",&DAT_10528900,0,
	"Voice icons are this many inches over player eye positions");
FUN_10432010(&DAT_107927c0,(int)"voice_head_icon_size",&DAT_105292b4,0,
	"Size of voice icon over player heads in inches");
FUN_10432010(&DAT_10792920,(int)"voice_icons_use_particles",&DAT_104ef188,0,
	"Draw voice icons using particles");
FUN_10432010(&DAT_10792870,(int)"voice_local_icon",&DAT_104ef188,0,
	"Draw local player\'s voice icon");
FUN_10432010(&DAT_10792710,(int)"voice_modenable",&DAT_104ef184,0x40000080,
	"Enable/disable voice in this mod.");
FUN_10431e50(&DAT_1079299c,(int)"script_client",(int)FUN_101bea00,"Run the text as a script",0,
FUN_10431e50(&DAT_107929e4,(int)"script_debug_client",(int)FUN_101beaf0,
	"Connect the vscript VM to the script debugger",0,(undefined *)0x0);
FUN_10431e50(&DAT_10792a2c,(int)"script_dump_all_client",(int)FUN_101beb30,
	"Dump the state of the VM to the console",0,(undefined *)0x0);
FUN_10431e50(&DAT_107929c0,(int)"script_execute_client",(int)FUN_101beb70,"Run a vscript file",0,
FUN_10431e50(&DAT_10792a08,(int)"script_help_client",(int)FUN_101bebf0,
	"Output help for script functions, optionally with a search string",0,
FUN_10431ef0(&DAT_107935a8,(int)"cancelselect",(int)FUN_101c1470,&DAT_104eefb3,0x10000000,
FUN_10432270(&DAT_10793390,(int)"hud_drawhistory_time",&DAT_1052c600,0);
FUN_10432270(&DAT_107933e8,(int)"hud_fastswitch",&DAT_104ef184,0x12);
FUN_10431ef0(&DAT_107935cc,(int)"invnext",(int)FUN_101c14d0,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_107935f0,(int)"invprev",(int)FUN_101c1530,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793614,(int)"lastinv",(int)FUN_101c14a0,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793560,(int)"slot0",(int)FUN_101c1590,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793584,(int)"slot10",(int)FUN_101c15c0,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_1079336c,(int)"slot1",(int)FUN_101c15f0,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793440,(int)"slot2",(int)FUN_101c1640,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793464,(int)"slot3",(int)FUN_101c1670,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793488,(int)"slot4",(int)FUN_101c16d0,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_107934ac,(int)"slot5",(int)FUN_101c1700,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_107934d0,(int)"slot6",(int)FUN_101c1730,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_107934f4,(int)"slot7",(int)FUN_101c1760,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_10793518,(int)"slot8",(int)FUN_101c1790,&DAT_104eefb3,0x10000000,
FUN_10431ef0(&DAT_1079353c,(int)"slot9",(int)FUN_101c17c0,&DAT_104eefb3,0x10000000,
FUN_10432270(&DAT_107936e8,(int)"cl_leveloverviewmarker",&DAT_104ef188,0x4000);
FUN_10431e50(&DAT_10793764,(int)"hidepanel",(int)FUN_101c5580,"Hides a viewport panel <name>",0,
FUN_10432010(&DAT_10793690,(int)"hud_autoreloadscript",&DAT_104ef188,0,
	"Automatically reloads the animation script each time one is ran");
FUN_10431e50(&DAT_10793740,(int)"showpanel",(int)FUN_101c55b0,"Shows a viewport panel <name>",0,
FUN_10432010(&DAT_107939d8,(int)"cl_radar_locked",&DAT_104ef188,0x80080,
	"Lock the angle of the radar display?");
FUN_10432010(&DAT_10793a30,(int)"debug_show_npccars",&DAT_104ef188,2,
	"I use this to debug the npc car spawning algorithm");
FUN_10432010(&DAT_10793980,(int)"overview_alpha",&DAT_104f04fc,0x40000080,
	"Overview map translucency.\n");
FUN_10432010(&DAT_10793820,(int)"overview_health",&DAT_104ef184,0x40000080,
	"Show player\'s health in map overview.\n");
FUN_10432010(&DAT_10793928,(int)"overview_locked",&DAT_104ef184,0x40000080,
	"Locks map angle, doesn\'t follow view angle.\n");
FUN_10431e50(&DAT_10793b5c,(int)"overview_mode",(int)FUN_101d0c50,
	"Sets overview map mode off,small,large: <0|1|2>",0,(undefined *)0x0);
FUN_10432010(&DAT_10793878,(int)"overview_names",&DAT_104ef184,0x40000080,
	"Show player\'s names in map overview.\n");
FUN_104320a0(&DAT_10793a88,(int)"overview_preferred_mode",&DAT_104ef184,0,
	"Preferred overview mode",(int)FUN_101ce9f0);
FUN_10432010(&DAT_10793ae0,(int)"overview_preferred_view_size",&DAT_104f48c8,0,
	"Preferred overview view size");
FUN_10432010(&DAT_107938d0,(int)"overview_tracks",&DAT_104ef184,0x40000080,
	"Show player\'s tracks in map overview.\n");
FUN_10431e50(&DAT_10793b38,(int)"overview_zoom",(int)FUN_101d0d10,
	"Sets overview map zoom: <zoom> [<time>] [rel]",0,(undefined *)0x0);
FUN_10432270(&DAT_10793b80,(int)"show_MapViewHeight",&DAT_104ef188,2);
FUN_10432010(&DAT_10793c68,(int)"cl_spec_mode",&DAT_104ef184,0x10000200,"spectator mode");
FUN_10431e50(&DAT_10793d08,(int)"spec_mode",(int)FUN_101d2390,"Set spectator mode",0x40000000,
FUN_10431e50(&DAT_10793cc0,(int)"spec_next",(int)FUN_101d2440,"Spectate next player",0x40000000,
FUN_10431e50(&DAT_10793d2c,(int)"spec_player",(int)FUN_101d2490,"Spectate player by name",
FUN_10431e50(&DAT_10793ce4,(int)"spec_prev",(int)FUN_101d2530,"Spectate previous player",
FUN_10432270(&DAT_10793c10,(int)"spec_scoreboard",&DAT_104ef188,0x88);
FUN_10432010(&DAT_10793d80,(int)"cl_disablehtmlmotd",&DAT_104ef188,0x80,"Disable HTML motds.");
FUN_10431e50(&DAT_10793dd8,(int)"showinfo",(int)FUN_101d36f0,
	"Shows a info panel: <type> <title> <message> [<command number>]",0,(undefined *)0x0)
FUN_10432270(&DAT_107944a0,(int)"physrecord_speed",&DAT_1052ab20,0);
FUN_10432270(&DAT_107944f8,(int)"physrecord_stepsize",&DAT_104ef184,0);
FUN_10431ef0(&DAT_107945f0,(int)"por_backward",(int)FUN_101d4ae0,
	"spits out previous locations of the client phys objects.",0x4000,(undefined *)0x0);
FUN_10431ef0(&DAT_107945cc,(int)"por_forward",(int)FUN_101d4b00,
	"spits out next locations of the client phys objects.",0x4000,(undefined *)0x0);
FUN_10431ef0(&DAT_10794680,(int)"por_jump_backward",(int)FUN_101d4b20,&DAT_104eefb3,0x4000,
FUN_10431ef0(&DAT_1079465c,(int)"por_jump_forward",(int)FUN_101d4b40,&DAT_104eefb3,0x4000,
FUN_10431ef0(&DAT_10794638,(int)"por_playback",(int)FUN_101d4c10,
	"Will alternate between playing/not playing client phys objects state",0x4000,
FUN_10431ef0(&DAT_107946a4,(int)"por_readfile",(int)FUN_101d4b60,
	"Reads the file. To change the index; use physrecord_fileindex.",0x4000,
FUN_10431ef0(&DAT_10794614,(int)"por_record",(int)FUN_101d4c40,
	"Will alternate between recording/not recording client phys objects state",0x4000,
FUN_10431ef0(&DAT_107946c8,(int)"por_reset_playback",(int)FUN_101d4b80,
	"Resets the playback to the beginning",0x4000,(undefined *)0x0);
FUN_10431ef0(&DAT_107945a8,(int)"por_stepbackward",(int)FUN_101d4b90,
	"spits out previous locations of the client phys objects.",0x4000,(undefined *)0x0);
FUN_10431ef0(&DAT_10794584,(int)"por_stepforward",(int)FUN_101d4bd0,
	"spits out next locations of the client phys objects.",0x4000,(undefined *)0x0);
FUN_10432270(&DAT_107954a8,(int)"_offsetclip",&DAT_10528938,2);
FUN_10432010(&DAT_10794ac8,(int)"mat_dest_alpha_range",&DAT_10501ed4,0,
	"Amount to scale depth values before writing into destination alpha ([0,1] range).");
FUN_10432270(&DAT_10795500,(int)"r_debugrt",&DAT_104eefb3,8);
FUN_10432270(&DAT_107955b0,(int)"r_debugrt_additive",&DAT_104ef188,8);
FUN_10432130(&DAT_10795558,(int)"r_debugrt_size",&DAT_1051fe2c,0x80,&DAT_104eefb3,1,0x42800000,1,
FUN_10432010(&DAT_107949c0,(int)"ti_motionblur_addalpha",&DAT_104fc1dc,0,"Motion Blur Alpha");
FUN_10432010(&DAT_10794a18,(int)"ti_motionblur_drawalpha",&DAT_104ef184,0,"Motion Blur Draw Alpha"
FUN_10432010(&DAT_10794a70,(int)"ti_motionblur_time",&DAT_10524bd4,0,
	"The amount of time to wait until updating the FB");
FUN_104320a0(&DAT_107956a8,(int)"mat_filmgrain",&DAT_104ef188,8,
	"Enable/disable film grain post effect",(int)FUN_101d8560);
FUN_10431e50(&DAT_1079570c,(int)"fx_rf_test",(int)FUN_101d97a0,&DAT_104eefb3,0x40000000,
FUN_10432010(&DAT_10795740,(int)"cl_phys_prop_sim_percent",&DAT_10501c5c,0x80080,
	"A variable to control the percentage of gibs that are using the physics simulator");
FUN_10432270(&DAT_10795918,(int)"fx_refraction",&DAT_104ef188,0);
FUN_10431e50(&DAT_10795b80,(int)"condump",(int)FUN_101efaa0,
	"dump the text currently in the console to condumpXX.log",0,(undefined *)0x0);
FUN_10432270(&DAT_10795c00,(int)&DAT_104eefb3,&DAT_104ef188,0);
FUN_10432010(&DAT_10797c78,(int)"ui_gameui_ctrlr_title",&DAT_104ef188,2,&DAT_104eefb3);
FUN_10432010(&DAT_10797cd8,(int)"ui_gameui_modal",&DAT_104ef188,2,
	"If set, the game UI pages will take modal input focus.");
FUN_10432270(&DAT_10797f30,(int)"cm_current_community_map",&DAT_104ef188,0x2010);
FUN_10432010(&DAT_10797ff0,(int)"demo_campaign_name","L4D2C5",2,
	"Short name of campaign (i.e. L4D2C5), used to show correct poster in demo mode.");
FUN_10432270(&DAT_107980a0,(int)"sys_attract_mode_timeout",&DAT_104f44a8,2);
FUN_10432270(&DAT_10797f90,(int)"ui_fadecloud_time",&DAT_10501fdc,2);
FUN_10432270(&DAT_10798200,(int)"ui_fadexui_time",&DAT_105146f8,2);
FUN_10432270(&DAT_10798150,(int)"ui_gameui_debug",&DAT_104ef188,0x80000);
FUN_10432130(&DAT_10798048,(int)"ui_lastact_played",&DAT_104ef188,0x90,&DAT_104eefb3,1,0,1,
FUN_10432270(&DAT_107981a8,(int)"ui_lobby_jointimeout",&DAT_1052ce1c,2);
FUN_10432270(&DAT_107980f8,(int)"ui_lobby_noautostart",&DAT_104ef188,2);
FUN_10432270(&DAT_10797ed8,(int)"ui_lobby_noresults_create_msg_time",&DAT_105536ac,2);
FUN_10432130(&DAT_10798288,(int)"ti_hud_basecolor",&DAT_104ef188,0x80080,
	"Base Hud Colour [0=Default, 1=green, 2=blue, 3=red",1,0,1,0x40400000);
FUN_10432010(&DAT_107983f0,(int)"ui_transition_debug",&DAT_104ef188,2,&DAT_104eefb3);
FUN_10432010(&DAT_10798338,(int)"ui_transition_delay",&DAT_1051467c,2,&DAT_104eefb3);
FUN_10432010(&DAT_10798398,(int)"ui_transition_effect",&DAT_104ef394,2,&DAT_104eefb3);
FUN_10432010(&DAT_10798448,(int)"ui_transition_time",&DAT_10555c68,2,&DAT_104eefb3);
FUN_10432010(&DAT_107984d0,(int)"demo_connect_string",&DAT_104eefb3,2,"Connect string for demo UI"
FUN_10432010(&DAT_10798660,(int)"demo_ui_enable",&DAT_104eefb3,2,"Suffix for the demo UI");
FUN_10432270(&DAT_10798528,(int)"ping_max_green",&DAT_10555efc,0);
FUN_10432270(&DAT_107985e0,(int)"ping_max_red",&DAT_10520010,0);
FUN_10432270(&DAT_10798588,(int)"ping_max_yellow",&DAT_1051fe5c,0);
FUN_10431e50(&DAT_10798638,(int)"ui_reloadscheme",(int)FUN_1020ada0,
	"Reloads the resource files for the active UI window",0,(undefined *)0x0);
FUN_10431e50(&DAT_107987a0,(int)"joy_cfg_custom",(int)FUN_10212800,&DAT_104eefb3,0,
FUN_10432010(&DAT_10798948,(int)"cl_footer_no_auto_shrink",&DAT_104ef188,0,
	"Prevents shrinking the font when it would wrap.");
FUN_10432010(&DAT_107989a8,(int)"cl_footer_no_auto_wrap",&DAT_104ef188,0,
	"Prevents shrinking the font when it would wrap.");
FUN_10432010(&DAT_10798ac0,(int)"ui_newui",&DAT_104ef188,0x80000,"Preview new ui tests.");
FUN_10432270(&DAT_10798b18,(int)"ui_virtualnav_render",&DAT_104ef188,2);
FUN_10432010(&DAT_10798b98,(int)"gameui_ingame_menu_active",(undefined *)0x0,0,
	"Holds the state of the in game menu. Do not set this manually.");
FUN_10432010(&DAT_10798d70,(int)"ui_loadingscreen_autotransition_time",&DAT_105217fc,2,
FUN_10432010(&DAT_10798d18,(int)"ui_loadingscreen_fadein_time",&DAT_104f04fc,2,&DAT_104eefb3);
FUN_10432010(&DAT_10798c68,(int)"ui_loadingscreen_mintransition_time",&DAT_105146f8,2,
FUN_10432010(&DAT_10798cc0,(int)"ui_loadingscreen_transition_time",&DAT_104f04fc,2,&DAT_104eefb3);
FUN_10432270(&DAT_10798e40,(int)"cm_play_intro_video",&DAT_104ef184,0x80);
FUN_10432010(&DAT_10798de8,(int)"connect_lobby",&DAT_104eefb3,0x10,
	"Sets the lobby ID to connect to on start.");
FUN_10432010(&DAT_10798ee8,(int)"ui_show_attract_moviename",&DAT_104ef188,2,&DAT_104eefb3);
FUN_10432270(&DAT_10799168,(int)"cl_upgrade_convars",&DAT_104ef1dc,0x90);
FUN_10431e50(&DAT_10799140,(int)"fix_listranks",(int)FUN_10232590,
	"Displays all the available ranks and their XP",0,(undefined *)0x0);
FUN_10431e50(&DAT_107991e4,(int)"fix_roominfo",(int)FUN_102325e0,"Lists local room info",0,
FUN_10431e50(&DAT_107991c0,(int)"fix_spectate",(int)FUN_10232630,"Spectate the desired room",0,
FUN_10431e50(&DAT_10799118,(int)"ti_showranks",(int)FUN_10232680,"ShowRanks",0,(undefined *)0x0);
FUN_10432270(&DAT_10799398,(int)"fix_force_new_user",&DAT_104ef188,0);
FUN_10432010(&DAT_1079a208,(int)"cl_disablefreezecam",&DAT_104ef188,0x80,
	"Turn on/off freezecam on client");
FUN_10432270(&DAT_1079a3e8,(int)"ti_bloodsplatter",&DAT_104ef184,0x80088);
FUN_10432010(&DAT_1079a548,(int)"ti_teamicons_distance",&DAT_10520640,0x80008,
	"Maximum distance a teammate\'s name will appear on the HUD.");
FUN_10432010(&DAT_1079a440,(int)"ti_teamicons_pos",&DAT_104ef184,0x80008,
	"Enable/disable team overhead player icons 1 = on, 2 = use decals");
FUN_10432010(&DAT_1079a498,(int)"ti_teamicons_size",&DAT_104ef184,0x80008,
	"Enable/disable team overhead player icons 1 = on, 2 = use decals");
FUN_10432010(&DAT_1079a4f0,(int)"ti_teamicons_size_max",&DAT_104ef184,0x80008,
	"Enable/disable team overhead player icons 1 = on, 2 = use decals");
FUN_10432270(&DAT_1079a338,(int)"z_splatter_delay",&DAT_1052ad00,0);
FUN_10432270(&DAT_1079a390,(int)"z_splatter_delay_melee",&DAT_104fc1dc,0);
FUN_10432270(&DAT_1079a660,(int)"cl_vip_pathbeam_length",&DAT_1056f484,0);
FUN_10432270(&DAT_1079a720,(int)"dev_visualise_VIPPath",(undefined *)0x0,0x4010);
FUN_10432270(&DAT_1079a6b8,(int)"ti_show_spawn_intro",&DAT_104ef184,0x80);
FUN_10432270(&DAT_1079a9f8,(int)"hud_deathnotice_time",&DAT_105292b4,0);
FUN_10431ef0(&DAT_1079ab7c,(int)"test_ammobonus_msg",(int)FUN_1025a400,"Test the ammo bonus msg",0
FUN_10431ef0(&DAT_1079aba0,(int)"test_healthbonus_msg",(int)FUN_1025a510,
	"Test the health bonus msg",0,(undefined *)0x0);
FUN_10431ef0(&DAT_1079ab58,(int)"test_killstreak_msg",(int)&DAT_1025a580,
	"Test the kill streak msg",0,(undefined *)0x0);
FUN_10432270(&DAT_1079ab00,(int)"test_killstreak_msg_item",&DAT_104ef184,0);
FUN_10432270(&DAT_1079aaa8,(int)"test_killstreak_msg_type",&DAT_104ef184,0);
FUN_10432270(&DAT_1079abe8,(int)"debug_disable_blackout",&DAT_104ef188,0);
FUN_10432270(&DAT_1079acc8,(int)"ti_hitoutput_time",&DAT_104ef394,0);
FUN_10432130(&DAT_1079ac70,(int)"ti_hitoutput_type",&DAT_104ef188,0x88,
	"0 = 0ff, 1 = normal, 2 = log only, 3 = screen only",1,0,1,0x40400000);
FUN_10431ef0(&DAT_1079ad88,(int)"fastswap",(int)FUN_1025f830,&DAT_104eefb3,0x10000000,
FUN_10432270(&DAT_1079aec0,(int)"cl_vote_ui_active_after_voting",&DAT_104ef184,0);
FUN_10432270(&DAT_1079af18,(int)"cl_vote_ui_show_notification",&DAT_104ef188,0);
FUN_10432270(&DAT_1079b838,(int)"bot_friend1",&DAT_104ef1dc,0);
FUN_10432270(&DAT_1079b890,(int)"bot_friend2",&DAT_104ef1dc,0);
FUN_10432270(&DAT_1079b8e8,(int)"bot_friend3",&DAT_104ef1dc,0);
FUN_104321d0(&DAT_1079b168,(int)"cl_autoreload",&DAT_104ef188,0x80080,
	"1: reload on attack, 2: automatically be reloaded when not attacking",1,0,1,
FUN_10432010(&DAT_1079b110,(int)"cl_colorblind",&DAT_104ef188,0x80,
	"Setting to 1 will change some things that are red or green to alternate colors");
FUN_10432270(&DAT_1079b7e0,(int)"cl_debug_use_glow",&DAT_104ef188,0x4002);
FUN_104321d0(&DAT_1079b1c0,(int)"cl_lefthand",&DAT_104ef188,0x80080,"Use left-handed view models."
FUN_10431e50(&DAT_1079b940,(int)"cl_list_attributes",(int)FUN_10274d20,
	"print out list of attributes the issuer is affected by",0x80000,(undefined *)0x0);
FUN_10432270(&DAT_1079b4c8,(int)"cl_planphase",&DAT_104ef188,0x804012);
FUN_10432010(&DAT_1079b218,(int)"cl_update_planningcam_override",(undefined *)0x0,0x4000,
	"Force PLanning Cam to Update When Not IN pLanningMode");
FUN_10432010(&DAT_1079b270,(int)"cl_useglow_update_interval",&DAT_1051ed54,0x4000,
	"Time between use glow target updates");
FUN_10432270(&DAT_1079b520,(int)"debug_localplayernodraw",&DAT_104ef188,0);
FUN_10432270(&DAT_1079b628,(int)"debug_run_autoplayer",&DAT_104ef188,0x2002);
FUN_10432270(&DAT_1079b578,(int)"disable_bonecache_invalidate",&DAT_104ef184,2);
FUN_10432010(&DAT_1079b680,(int)"r_flashlight_attach_to_viewmodel",&DAT_104ef184,0x4000,
	"Attach the flashlight effect to the viewmodel");
FUN_10432270(&DAT_1079b5d0,(int)"ti_player_avoidance",&DAT_10579e28,0x4010);
FUN_10432270(&DAT_1079b730,(int)&DAT_1057a020,&DAT_105268d8,0x4010);
FUN_10432270(&DAT_1079b788,(int)&DAT_1057a024,&DAT_104ef188,0x4010);
FUN_10432270(&DAT_1079b6d8,(int)"z_nvgdistance",(undefined *)&DAT_1051dc84,0x4002);
FUN_10432270(&DAT_1079d1d0,(int)"cl_addon_debug",&DAT_104ef188,0);
FUN_10432010(&DAT_1079d2d8,(int)"cl_ragdoll_exaggerate",&DAT_104f04fc,8,
	"Exagerates player ragdoll angular velocity");
FUN_10432270(&DAT_1079d330,(int)"cl_ragdoll_fade_time",&DAT_10575e90,8);
FUN_10432010(&DAT_1079d280,(int)"cl_ragdoll_force_multiplier",&DAT_104f04fc,8,
	"Multiplies the damage force applied to new ragdolls");
FUN_10432010(&DAT_1079d228,(int)"cl_ragdoll_physics_enable",&DAT_104ef184,2,
	"Enable/disable ragdoll physics.");
FUN_10432010(&DAT_1079d600,(int)"ti_teamicons",&DAT_104ef184,0x80088,
	"Enable/disable team overhead player icons 1 = on, 2 = use decals");
FUN_10432270(&DAT_1079d670,(int)"sv_bomb_radius",&DAT_1052041c,0x2000);
FUN_10432270(&DAT_1079dc68,(int)"cl_shield_origin_lerp",&DAT_104ef188,0);
FUN_10432270(&DAT_1079dc10,(int)"csoffs",&DAT_105292b4,0x12);
FUN_10432270(&DAT_1079f158,(int)"cl_npc_vehicle_mass_modifier",&DAT_105146f8,0);
FUN_10432270(&DAT_1079f1b0,(int)"debug_interp_show_cars_timedelta",&DAT_104ef188,0);
FUN_10432270(&DAT_1079f100,(int)"debug_show_npcdriver_status",&DAT_104ef188,0);
FUN_10432270(&DAT_1079f0a8,(int)"vehicle_light_offset",&DAT_1051fe5c,0);
FUN_10432270(&DAT_1079f050,(int)"vehicle_light_radius",&DAT_10529c84,0);
FUN_10432010(&DAT_1079efe0,(int)"vehicle_lights_maxdist",&DAT_10583454,0x80,
	"When are further than this, they are invisible");
FUN_10432010(&DAT_1079ef88,(int)"vehicle_lights_mindist",&DAT_10583404,0x80,
	"When cars are further than this, the light starts to fade out");
FUN_10432010(&DAT_1079f690,(int)"cl_client_hitzone_density",&DAT_104ef184,0x80088,
	"Hitzone density. 0 = low, 1 = medium, 2 = high");
FUN_10432130(&DAT_1079f5e0,(int)"cl_client_hitzone_max",&DAT_1051feac,0x80088,
	"Total Hitzone Areas per stage",1,0x41200000,1,0x43200000);
FUN_10432130(&DAT_1079f638,(int)"cl_client_hitzone_maxdist",&DAT_10501ed4,0x80088,
	"Maximum visible distance",1,0x43fa0000,1,0x44fa0000);
FUN_10432270(&DAT_1079f6e8,(int)"cl_hitzone_debug",&DAT_104ef188,0);
FUN_10432270(&DAT_1079f740,(int)"cl_hitzone_dxquery",&DAT_104ef188,0);
FUN_10432010(&DAT_1079fa80,(int)"cl_client_ragdoll_enable",&DAT_104ef184,0,
	"Disable clientside ragdoll props (must be set before loading a level).");
FUN_10432130(&DAT_1079fa28,(int)"cl_client_ragdoll_max",&DAT_105200d8,0x80088,
	"max client side ragdolls",1,0x41a00000,1,0x43960000);
FUN_10432010(&DAT_1079fad8,(int)"cl_client_ragdoll_maxdist",&DAT_10501ed4,0,
	"Maximum visible distance");
FUN_10432010(&DAT_1079fc40,(int)"inferno_dlight_spacing",&DAT_104fc374,0x4000,
	"Inferno dlights are at least this far apart");
FUN_10432010(&DAT_1079fc98,(int)"inferno_dlights",&DAT_1051c474,0,
	"Min FPS*2 at which inferno elights will be created, dlight @ minfps");
FUN_10432270(&DAT_1079fcf0,(int)"inferno_fire",&DAT_104f94c0,0);
FUN_10432270(&DAT_1079ff18,(int)"cl_dog_origin_lerp",&DAT_1058986c,0);
FUN_10432270(&DAT_107a03b8,(int)"cl_glow_civ_f_b",&DAT_1051467c,2);
FUN_10432270(&DAT_107a0410,(int)"cl_glow_civ_f_g",&DAT_1058b3a0,2);
FUN_10432270(&DAT_107a0468,(int)"cl_glow_civ_f_r",&DAT_1058b3a0,2);
FUN_10432270(&DAT_107a04c0,(int)"cl_glow_civ_t_b",&DAT_1058b3a0,2);
FUN_10432270(&DAT_107a0780,(int)"cl_glow_civ_t_b",&DAT_104f2504,2);
FUN_10432270(&DAT_107a0728,(int)"cl_glow_civ_t_g",&DAT_1058b428,2);
FUN_10432270(&DAT_107a06d0,(int)"cl_glow_civ_t_r",&DAT_104f04fc,2);
FUN_10432270(&DAT_107a0518,(int)"cl_glow_civ_t_g",&DAT_1058b3a0,2);
FUN_10432270(&DAT_107a0570,(int)"cl_glow_civ_t_r",&DAT_1051467c,2);
FUN_10432270(&DAT_107a05c8,(int)"cl_glow_vip_b",&DAT_1058b3a0,2);
FUN_10432270(&DAT_107a0620,(int)"cl_glow_vip_g",&DAT_104f918c,2);
FUN_10432270(&DAT_107a0678,(int)"cl_glow_vip_r",&DAT_104f918c,2);
FUN_10432270(&DAT_107a0360,(int)"cl_hostage_origin_lerp",&DAT_1058986c,0);
FUN_10432270(&DAT_107a0308,(int)"cl_hostage_watch_vip",&DAT_104ef188,0);
FUN_10432270(&DAT_107a02b0,(int)"hostage_ragdoll_force",&DAT_1058ad18,0);
FUN_10432270(&DAT_107a10c8,(int)"ti_user_stat_spew",&DAT_104ef188,0x2002);
FUN_10431ef0(&DAT_107a1260,(int)"dump_mapids",(int)FUN_10294c10,&DAT_104eefb3,0x4000,
FUN_10432010(&DAT_107a12e0,(int)"force_load_backpack",&DAT_104ef188,0,
	"1 = force load from cloud, 2 = re-generate to default");
FUN_10432270(&DAT_107a13d8,(int)"ti_backpack_debug",&DAT_104ef184,0);
FUN_10432010(&DAT_107a1288,(int)"ti_holiday",&DAT_104ef188,0x2000,
	"Force Holiday: 1: hw, 2: xmas, 3: ti bday");
FUN_10432270(&DAT_107a18a8,(int)"mp_tournament",&DAT_104ef188,0x2100);
FUN_10432010(&DAT_107a19d0,(int)"anim_showmainactivity",&DAT_104ef188,0x4000,
	"Show the idle, walk, run, and/or sprint activities.");
FUN_10432010(&DAT_107a1a28,(int)"anim_showstate",&DAT_104ef1dc,0x6002,
	"Show the (client) animation state for the specified entity (-1 for none).");
FUN_10432010(&DAT_107a1a80,(int)"anim_showstatelog",&DAT_104ef188,0x6002,
	"1 to output anim_showstate to Msg(). 2 to store in AnimState.log. 3 for both.");
FUN_10432270(&DAT_107a1b88,(int)"movement_anim_playback_minrate",&DAT_1052ad00,0);
FUN_10432010(&DAT_107a1ad8,(int)"mp_showgestureslots",&DAT_104ef1dc,0x6002,
	"Show multiplayer client/server gesture slot information for the specified player index (-1 for no one)."
FUN_10432010(&DAT_107a1b30,(int)"mp_slammoveyaw",&DAT_104ef188,0x2002,
	"Force movement yaw along an animation path.");
FUN_10432270(&DAT_107a1c58,(int)"debug_show_player_shoot_angles",&DAT_104ef188,0x2002);
FUN_10432130(&DAT_107a1c00,(int)"ti_feetyawboost",&DAT_1051b05c,2,"feet yaw boost",1,0x3f800000,1,
FUN_10432010(&DAT_107a1d60,(int)"sv_showdamage",&DAT_104ef188,0x2000,"Shows damage done by bullet"
FUN_10432010(&DAT_107a1cb0,(int)"sv_showimpacts",&DAT_104ef188,0x2000,
	"Shows client (red) and server (blue) bullet impact point");
FUN_10432010(&DAT_107a1d08,(int)"sv_showplayerhitboxes",&DAT_104ef188,0x2000,
	"Show lag compensated hitboxes for the specified player index whenever a player fires."
FUN_10432010(&DAT_107a2660,(int)"cl_pred_checkstuck",&DAT_104ef188,2,
	"Perform the additional \'stuck\' traces on the client side during prediction.");
FUN_10432270(&DAT_107a26c0,(int)"vm_draw_addon",&DAT_104ef184,0);
FUN_10432010(&DAT_107a2890,(int)"mp_maxpetsperteam",&DAT_104ef1dc,0x82000,
	"Max pets per team (-1 == based on player count)");
FUN_10432010(&DAT_107a28e8,(int)"mp_maxsnipersperteam",&DAT_104ef1dc,0x82000,
	"Max snipers per team (-1 == based on player count)");
FUN_10432010(&DAT_107a2838,(int)"mp_playermodelname",&DAT_104ef188,0x6002,
	"Debug purposes, set the model of the player");
FUN_10432130(&DAT_107a29d8,(int)"ti_gamemode_override",&DAT_104ef1dc,0x2000,
	"\n[-1] LOBBY(Online)\n[0] MISSION\n[1] TDM\n[2] FFA\n[3] INTEL",1,-0x40800000,1,
FUN_10432010(&DAT_107a2a30,(int)"ti_tdm_fraglimit",&DAT_1051f584,0x2000,
	"frag limit in offline mode");
FUN_10432010(&DAT_107a2940,(int)"ti_tournament",&DAT_104ef188,0x2000,"Tournament Mode");
FUN_10432010(&DAT_107a27e0,(int)"wp_drawplans",&DAT_104ef188,0x6002,
	"Do we draw the plans our not?");
FUN_10432010(&DAT_107a3678,(int)"wp_use_eyes",&DAT_104ef188,0x6000,
	"When placing markers this determines if we place at the feet or eye level.");
FUN_10431e50(&DAT_107a3718,(int)"l_gameents_cl",(int)FUN_102c2bd0,"List game entities",0,
FUN_10432270(&DAT_107a3848,(int)"cl_dog_yawspeed",&DAT_10501fdc,0);
FUN_10432270(&DAT_107a39b8,(int)"boat_brake_speed",&DAT_1052a4e8,0x2000);
FUN_10432270(&DAT_107a3960,(int)"boat_force",&DAT_104ef1dc,0x2000);
FUN_10432270(&DAT_107a3a10,(int)"boat_idle_speed",&DAT_104fc1dc,0x2000);
FUN_10432270(&DAT_107a3c20,(int)"boat_ray_debug_client",&DAT_104ef188,0);
FUN_10432270(&DAT_107a3b18,(int)"boat_spring_damp",&DAT_104f2504,0x2002);
FUN_10432270(&DAT_107a3ac0,(int)"boat_spring_force",&DAT_104f2504,0x2002);
FUN_10432270(&DAT_107a3b70,(int)"boat_spring_length",&DAT_104f2504,0x2002);
FUN_10432010(&DAT_107a3a68,(int)"boat_steering_sensitivity",&DAT_1053f150,0x80008,
	"Ranges from 0 --> 1.0;  1.0 is very sensitive. ");
FUN_10432270(&DAT_107a3bc8,(int)"boat_turnoverride",&DAT_104f2504,0x2002);
FUN_10432010(&DAT_107a3cf8,(int)"cl_helicopter_flightmode",&DAT_104ef184,0x80,
	"0 = basic, 1 = advanced");
FUN_10432270(&DAT_107a4010,(int)"heli_damping",&DAT_105a0578,0x2000);
FUN_10432270(&DAT_107a3fb8,(int)"heli_damping_rot",&DAT_1056d1c4,0x2000);
FUN_10432270(&DAT_107a3f60,(int)"nullify_collective",&DAT_105217fc,0x2000);
FUN_10432270(&DAT_107a3eb0,(int)"nullify_forward",&DAT_10515ed4,0x2000);
FUN_10432270(&DAT_107a3f08,(int)"nullify_lateral",&DAT_105217fc,0x2000);
FUN_10432270(&DAT_107a3e58,(int)"nullify_pitch",&DAT_1051ffac,0x2000);
FUN_10432270(&DAT_107a3da8,(int)"nullify_roll",&DAT_10520024,0x2000);
FUN_10432270(&DAT_107a3e00,(int)"nullify_yaw",&DAT_105204c8,0x2000);
FUN_10432010(&DAT_107a3d50,(int)"sv_helicopter_skill_cap",&DAT_104f94c0,0x2080,
	"0 = both, 1 = basic only, 2 = advanced only");
FUN_10432270(&DAT_107a40c8,(int)"ti_heli_drama_pitch",&DAT_1053b594,0);
FUN_10432270(&DAT_107a4488,(int)"headlightfov",&DAT_104f48e0,0);
FUN_10432270(&DAT_107a43d8,(int)"headlightpitch",&DAT_1052c600,0);
FUN_10432270(&DAT_107a4430,(int)"headlighttexture","effects/headlight002",0);
FUN_10432270(&DAT_107a4360,(int)"ti_vehicle_authmode",&DAT_104f94c0,0x2000);
FUN_10431ef0(&DAT_107a490c,(int)"cl_fudge_vehicle_pos",(int)FUN_102cf630,&DAT_104eefb3,8,
FUN_10432270(&DAT_107a4ae8,(int)"cl_vehicle_extrap_factor",&DAT_10501fdc,0x80008);
FUN_10432270(&DAT_107a4a90,(int)"cl_vehicle_interp_factor",&DAT_104f04fc,0x80008);
FUN_10432270(&DAT_107a49e0,(int)"cl_vehicle_smoothify_angles",&DAT_104ef188,0x80008);
FUN_10432270(&DAT_107a4a38,(int)"cl_vehicle_smoothify_position",&DAT_104ef188,0x80008);
FUN_10432270(&DAT_107a4930,(int)"cl_vehicle_smoothify_tolerance","200.0",0x80008);
FUN_10432010(&DAT_107a4988,(int)"cl_vehicle_smoothify_tolerance_passenger","160.0",0x80008,
	"If local player is a passenger of a car, this defines how much smoothing the car he is in will have"
FUN_10432270(&DAT_107a4f60,(int)"car_force",&DAT_104ef1dc,0x2000);
FUN_10432270(&DAT_107a4f08,(int)"car_friction",&DAT_10515ed4,0);
FUN_10432270(&DAT_107a4fb8,(int)"car_gearmod",&DAT_104ef1dc,0x2000);
FUN_10432270(&DAT_107a5010,(int)"car_turnoverride",&DAT_104f2504,0x2002);
FUN_10432270(&DAT_107a5118,(int)"car_use_grip_nullify",&DAT_104ef188,0x2000);
FUN_10431e50(&DAT_107a518c,(int)"carbump_rear",(int)FUN_102db0d0,(undefined *)0x0,0,
FUN_10432270(&DAT_107a5068,(int)"carbump_torque_value",&DAT_105a2840,0x2000);
FUN_10431e50(&DAT_107a51bc,(int)"ch_flipcar",(int)FUN_102d3010,&DAT_104eefb3,0x4000,
FUN_10431e50(&DAT_107a5238,(int)"ch_turboboost",(int)FUN_102d30b0,&DAT_104eefb3,0x80000,
FUN_10432270(&DAT_107a51e0,(int)"debug_log_car_speeds",&DAT_104ef188,2);
FUN_10432270(&DAT_107a50c0,(int)"vehicle_wheel_debug_client",&DAT_104ef188,0);
FUN_10432270(&DAT_107a5778,(int)"sv_grenade_size",&DAT_104f94c0,0);
FUN_10432010(&DAT_107a5970,(int)"cl_localtracers",&DAT_104ef188,0x88,
	"enable rendering of local (and spectator) tracers");
FUN_10432270(&DAT_107a5ab8,(int)"cl_bob",&DAT_104f04fc,0);
FUN_10432270(&DAT_107a5a60,(int)"cl_bobcycle",&DAT_105a4ca0,0);
FUN_10432010(&DAT_107a5b68,(int)"cl_muzzleflash_frequency",&DAT_105296b0,8,
	"1.0 = play muzzle flashes every gun shot,   0 = don\'t play ANY muzzleflashes at all"
FUN_10432010(&DAT_107a5b10,(int)"cl_muzzleflash_mode",&DAT_104f94c0,0x80088,
	"0: no muzzle flash,    1: dynamic light,    2: projected light");
FUN_10432270(&DAT_107a5a08,(int)"sv_infiniteammo",&DAT_104ef188,0x6100);
FUN_10432270(&DAT_107a5fb0,(int)"melee_range",&DAT_10555efc,0x6000);
FUN_10432010(&DAT_107a6008,(int)"melee_return_to_idle_time",&DAT_1052cd14,0x6000,
	"time after stopping attack to return to idle");
FUN_10432270(&DAT_107a5f58,(int)"melee_show_swing",&DAT_104ef188,0x6000);
FUN_10432270(&DAT_107a8c00,(int)"cl_glow_use_b",&DAT_10524bd4,2);
FUN_10432270(&DAT_107a8c58,(int)"cl_glow_use_g",&DAT_1051467c,2);
FUN_10432270(&DAT_107a8cb0,(int)"cl_glow_use_r",&DAT_10524bd4,2);
FUN_10432270(&DAT_107a89f0,(int)"cl_glow_prop_b",&DAT_104f04fc,2);
FUN_10432270(&DAT_107a8a48,(int)"cl_glow_prop_g",&DAT_104fc278,2);
FUN_10432270(&DAT_107a8aa0,(int)"cl_glow_prop_r",&DAT_1051467c,2);
FUN_10432270(&DAT_107a8af8,(int)"cl_glow_use_far_b",&DAT_104f9208,2);
FUN_10432270(&DAT_107a8b50,(int)"cl_glow_use_far_g",&DAT_10529118,2);
FUN_10432270(&DAT_107a8ba8,(int)"cl_glow_use_far_r",&DAT_104f9208,2);
FUN_10432010(&DAT_107a8d08,(int)"cl_glow_brightness",&DAT_104f04fc,0x80,
	"Brightness of useable object halos");
FUN_104320a0(&DAT_107a8f50,(int)"cl_steamscreenshots",&DAT_104ef184,0x80,
	"Enable/disable saving screenshots to Steam",(int)FUN_102f0de0);
FUN_10432130(&DAT_107a8900,(int)"default_fov",&DAT_1051c57c,0x404000,&DAT_104eefb3,1,0x42b40000,1,
FUN_10432130(&DAT_107a8958,(int)"fov_desired",&DAT_1051c57c,0x280,"Sets the base field-of-view.",1
FUN_104321d0(&DAT_107a8dc0,(int)"voice_vox",&DAT_104ef188,0x80,
	"Voice chat uses a vox-style always on",0,0,1,0x3f800000,(int)FUN_102f1050);
FUN_10432270(&DAT_107a9220,(int)"cl_rosette_debug",&DAT_104ef188,0);
FUN_10432010(&DAT_107a91c8,(int)"cl_fastradial",&DAT_104ef184,2,
	"If 1, releasing the button on a radial menu executes the highlighted button");
FUN_10432270(&DAT_107a9380,(int)"cl_rosette_gamepad_expand_time",&DAT_105146f8,0);
FUN_10432270(&DAT_107a9328,(int)"cl_rosette_gamepad_lockin_time",&DAT_104f918c,0);
FUN_10432270(&DAT_107a9278,(int)"cl_rosette_line_inner_radius",&DAT_1053b594,0);
FUN_10432270(&DAT_107a92d0,(int)"cl_rosette_line_outer_radius",&DAT_105c14f0,0);
FUN_10431e50(&DAT_107a9444,(int)"-mouse_menu",(int)FUN_102f8080,
	"Executes the highlighted button on the radial menu (if cl_fastradial is 1)",0,
FUN_10431e50(&DAT_107a93fc,(int)"+mouse_menu",(int)FUN_102f80a0,"Opens a menu while held",0,
FUN_10431e50(&DAT_107a9468,(int)"-mouse_menu_radio",(int)FUN_102f8090,
	"Executes the highlighted button on the radial menu (if cl_fastradial is 1)",0,
FUN_10431e50(&DAT_107a9420,(int)"+mouse_menu_radio",(int)FUN_102f80f0,"Opens a menu while held",0,
FUN_10432010(&DAT_107a9528,(int)"mp_taunt_item",&DAT_104eefb3,0x2002,
	"Temporary for testing what will happen when a taunt item is in inventory.");
FUN_10431e50(&DAT_107a9744,(int)"changeequipment",(int)FUN_103018c0,"Ingame Panel",0x50000000,
FUN_10431e50(&DAT_107a9720,(int)"changeteam",(int)FUN_10301910,"Choose a new team",0x50000000,
FUN_10431e50(&DAT_107a978c,(int)"spec_help",(int)FUN_10301940,"Show spectator help screen",
FUN_10431e50(&DAT_107a97b0,(int)"togglescores",(int)&DAT_10301960,"Toggles score panel",0x40000000
FUN_10431e50(&DAT_107a9768,(int)"voicecontrol",(int)&DAT_103019c0,"Voice Control",0x40000000,
FUN_10432130(&DAT_107a9848,(int)"cl_radaralpha",&DAT_10520024,8,(undefined *)0x0,1,0,1,0x437f0000)
FUN_10431e50(&DAT_107a98b0,(int)"drawradar",(int)FUN_10301fd0,"Draws HUD radar",0,(undefined *)0x0
FUN_10431e50(&DAT_107a98d4,(int)"hideradar",(int)FUN_10301ff0,"Hides HUD radar",0,(undefined *)0x0
FUN_10432270(&DAT_107a97f0,(int)"ti_alwaysdrawminimap",&DAT_104f94c0,0x80088);
FUN_10432010(&DAT_107a9af8,(int)"cl_chatfiltering",&DAT_104f94c0,0x80080,
	"Filter and replace bad words in chat text, 0 = off, 1 = coarse, 2 = aggressive");
FUN_10432270(&DAT_107a9d28,(int)"mdlCamAX",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107a9d80,(int)"mdlCamAY",&DAT_1051fefc,0x4000);
FUN_10432270(&DAT_107a9dd8,(int)"mdlCamAZ",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107a9bc8,(int)"mdlCamFov",&DAT_104f44a8,0x4000);
FUN_10432270(&DAT_107a9b70,(int)"mdlCamTweak",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107a9c20,(int)"mdlCamX",&DAT_104fc374,0x4000);
FUN_10432270(&DAT_107a9c78,(int)"mdlCamY",&DAT_104f44a8,0x4000);
FUN_10432270(&DAT_107a9cd0,(int)"mdlCamZ",&DAT_104f44a8,0x4000);
FUN_10431e50(&DAT_107ab17c,(int)"cl_decline_first_notification",(int)FUN_10320580,
	"Tries to decline/remove the first notification",0,(undefined *)0x0);
FUN_10432010(&DAT_107ab070,(int)"cl_notifications_max_num_visible",&DAT_104ef394,0x80,
	"How many notifications are visible in-game.");
FUN_10432010(&DAT_107ab0c8,(int)"cl_notifications_move_time",&DAT_105146f8,0x80,
	"How long it takes for a notification to move.");
FUN_10432010(&DAT_107ab018,(int)"cl_notifications_show_ingame",&DAT_104ef184,0x80,
	"Whether notifications should show up in-game.");
FUN_10431e50(&DAT_107ab158,(int)"cl_trigger_first_notification",(int)FUN_103205b0,
	"Tries to accept/trigger the first notification",0,(undefined *)0x0);
FUN_10432270(&DAT_107ac280,(int)"cl_planning_attributes",&DAT_104ef184,0x80080);
FUN_10432270(&DAT_107acfa8,(int)"r_raindensity","0.001",0x4000);
FUN_10432270(&DAT_107ad058,(int)"r_rainlength",&DAT_105dcb90,0x4000);
FUN_10432270(&DAT_107ad0b0,(int)"r_rainspeed","600.0f",0x4000);
FUN_10432270(&DAT_107ad000,(int)"r_rainwidth",&DAT_105146f8,0x4000);
FUN_10432010(&DAT_107ac4b0,(int)"cl_winddir",&DAT_104ef188,0x4000,
	"Weather effects wind direction angle");
FUN_10432010(&DAT_107ac508,(int)"cl_windspeed",&DAT_104ef188,0x4000,
	"Weather effects wind speed scalar");
FUN_10432010(&DAT_107ac820,(int)"r_DrawRain",&DAT_104ef184,0x4000,"Enable/disable rain rendering."
FUN_10432010(&DAT_107ac610,(int)"r_RainAllowInSplitScreen",&DAT_104ef188,0,
	"Allows rain in splitscreen");
FUN_10432010(&DAT_107ac770,(int)"r_RainCheck",&DAT_104ef188,0x4000,
	"Enable/disable IsInAir() check for rain drops?");
FUN_10432010(&DAT_107ac8d0,(int)"r_RainDebugDuration",&DAT_104ef188,0x4000,
	"Shows rain tracelines for this many seconds (0 disables)");
FUN_10432270(&DAT_107ac668,(int)"r_RainHack",&DAT_104ef188,0x4000);
FUN_10432010(&DAT_107ac5b8,(int)"r_RainParticleDensity",&DAT_104ef184,0,
	"Density of Particle Rain 0-1");
FUN_10432010(&DAT_107ac878,(int)"r_RainProfile",&DAT_104ef188,0x4000,
	"Enable/disable rain profiling.");
FUN_10432270(&DAT_107ac6c0,(int)"r_RainRadius",&DAT_10530430,0x4000);
FUN_10432010(&DAT_107ac718,(int)"r_RainSideVel",&DAT_1051fe34,0x4000,
	"How much sideways velocity rain gets.");
FUN_10432010(&DAT_107ac7c8,(int)"r_RainSimulate",&DAT_104ef184,0x4000,
	"Enable/disable rain simulation.");
FUN_10432270(&DAT_107ac560,(int)"r_RainSplashPercentage",&DAT_10528900,0x4000);
FUN_10432010(&DAT_107acc38,(int)"r_SnowDebugBox",&DAT_104ef188,0x4000,"Snow Debug Boxes.");
FUN_10432010(&DAT_107ac978,(int)"r_SnowEnable",&DAT_104ef184,0x4000,"Snow Enable");
FUN_10432010(&DAT_107acd98,(int)"r_SnowEndAlpha",&DAT_10520024,0x4000,"Snow.");
FUN_10432010(&DAT_107ace48,(int)"r_SnowEndSize",&DAT_104ef188,0x4000,"Snow.");
FUN_10432010(&DAT_107acb88,(int)"r_SnowFallSpeed",&DAT_10501fdc,0x4000,"Snow fall speed scale.");
FUN_10432010(&DAT_107aca28,(int)"r_SnowInsideRadius",&DAT_10520028,0x4000,"Snow.");
FUN_10432010(&DAT_107aca80,(int)"r_SnowOutsideRadius",&DAT_105dca14,0x4000,"Snow.");
FUN_10432010(&DAT_107ac9d0,(int)"r_SnowParticles",&DAT_104f444c,0x4000,"Snow.");
FUN_10432010(&DAT_107acb30,(int)"r_SnowPosScale",&DAT_104ef184,0x4000,"Snow.");
FUN_10432010(&DAT_107acf50,(int)"r_SnowRayEnable",&DAT_104ef184,0x4000,"Snow.");
FUN_10432010(&DAT_107acea0,(int)"r_SnowRayLength","8192.0f",0x4000,"Snow.");
FUN_10432010(&DAT_107acef8,(int)"r_SnowRayRadius",&DAT_10520028,0x4000,"Snow.");
FUN_10432010(&DAT_107acad8,(int)"r_SnowSpeedScale",&DAT_104ef184,0x4000,"Snow.");
FUN_10432010(&DAT_107acd40,(int)"r_SnowStartAlpha",&DAT_1053b594,0x4000,"Snow.");
FUN_10432010(&DAT_107acdf0,(int)"r_SnowStartSize",&DAT_104ef184,0x4000,"Snow.");
FUN_10432010(&DAT_107acbe0,(int)"r_SnowWindScale","0.0035",0x4000,"Snow.");
FUN_10432010(&DAT_107acc90,(int)"r_SnowZoomOffset","384.0f",0x4000,"Snow.");
FUN_10432010(&DAT_107acce8,(int)"r_SnowZoomRadius","512.0f",0x4000,"Snow.");
FUN_10432270(&DAT_107ad108,(int)"r_rainalpha",&DAT_104fc278,0x4000);
FUN_10432270(&DAT_107ad160,(int)"r_rainalphapow",&DAT_1052a4e8,0x4000);
FUN_10432010(&DAT_107ada60,(int)"fx_drawimpactdebris",&DAT_104ef184,2,
	"Draw impact debris effects.");
FUN_10432010(&DAT_107adab8,(int)"fx_drawimpactdust",&DAT_104ef184,2,"Draw impact dust effects.");
FUN_10432270(&DAT_107ade28,(int)"cl_smoke_alpha",&DAT_104f04fc,0x4002);
FUN_10432130(&DAT_107ade80,(int)"cl_smoke_color_percent",&DAT_105146f8,0x4000,&DAT_104eefb3,1,0,1,
FUN_10432270(&DAT_107addd0,(int)"cl_smoke_far",&DAT_1051fe5c,0x4002);
FUN_10432270(&DAT_107add20,(int)"cl_smoke_fog_percent",&DAT_1051c7b0,0x4002);
FUN_10432270(&DAT_107add78,(int)"cl_smoke_near",&DAT_10501c5c,0x4002);
FUN_10432270(&DAT_107ae0e0,(int)"cl_sporeclipdistance",&DAT_1052041c,0x4008);
FUN_10432010(&DAT_107b2a90,(int)"fx_glass_velocity_cap",&DAT_104ef188,0,
	"Maximum downwards speed of shattered glass particles");
FUN_10432010(&DAT_107b3538,(int)"cl_ejectbrass_lifetime",&DAT_10501f00,0x80088,
	"Lifetime of the shells ejecting from the gun");
FUN_10432270(&DAT_107b3590,(int)"cl_fasttempentcollision",&DAT_1052c600,0);
FUN_10432010(&DAT_107b35e8,(int)"cl_physprop_model_duration",&DAT_104f04fc,0x80080,
	"Multiplier to apply to the lifetime of a model spawned from shooting a hitzone");
FUN_10432270(&DAT_107b34e0,(int)"func_break_max_pieces",&DAT_1052ab20,0x2080);
FUN_10432010(&DAT_107b3c50,(int)"cl_playerspraydisable",&DAT_104ef188,0x88,
	"Disable player sprays.");
FUN_10432270(&DAT_107b4ac8,(int)"muzzleflash_light",&DAT_104ef184,0x80);
FUN_10432270(&DAT_107b4b68,(int)"tracer_extra",&DAT_104ef184,0);
FUN_10432010(&DAT_107b4bc8,(int)"fx_drawmetalspark",&DAT_104ef184,2,"Draw metal spark effects.");
FUN_10432010(&DAT_107b53d8,(int)"r_paintblob_blr_scale",&DAT_104fc1dc,0,
	"Scale all surface rendering parameters.");
FUN_10432010(&DAT_107b4fb0,(int)"r_paintblob_calc_color",&DAT_104ef188,0x80,
	"Just interpolate colors");
FUN_10432010(&DAT_107b54e0,(int)"r_paintblob_calc_hifreq_color",&DAT_104ef188,0x80,
	"Experimental hi-freq colors");
FUN_10432010(&DAT_107b51c8,(int)"r_paintblob_calc_tan_only",&DAT_104ef188,0x80,
	"Calculate Only Tangents");
FUN_10432010(&DAT_107b5170,(int)"r_paintblob_calc_tile_color",&DAT_104ef188,0x80,
	"Shows color of the tile");
FUN_10432010(&DAT_107b5220,(int)"r_paintblob_calc_uv_and_tan",&DAT_104ef184,0x80,
	"Calculate UVs and Tangents");
FUN_10432010(&DAT_107b4ea8,(int)"r_paintblob_debug_draw_margin",&DAT_104ef188,0,
	"If tiler is disabled, whether to draw the margin.");
FUN_10432010(&DAT_107b5008,(int)"r_paintblob_debug_draw_tile_boundaries",&DAT_104ef188,0,
	"Whether to draw outlines of all tiles.");
FUN_10432010(&DAT_107b5538,(int)"r_paintblob_draw_isosurface",&DAT_104ef184,0,
	"Draws the surface as an isosurface");
FUN_10432010(&DAT_107b4f00,(int)"r_paintblob_force_single_pass",&DAT_104ef188,0,
	"If 0, render the blob in two passes. Set to 1 to force rendering of the blob in a single pass."
FUN_10432010(&DAT_107b5278,(int)"r_paintblob_highres_cube",&DAT_1052a4e8,0,
	"Set cubewidth (coarseness of the mesh)");
FUN_10432010(&DAT_107b5118,(int)"r_paintblob_mainview_highres",&DAT_104ef184,0,
	"If 1, make the main view high resolution. Set to 0 to make the main view low resolution."
FUN_10432010(&DAT_107b4f58,(int)"r_paintblob_material",&DAT_104ef1dc,0,
	"Choose a material from 0 to N");
FUN_10432010(&DAT_107b52d0,(int)"r_paintblob_only_mainview_displayed",&DAT_104ef188,0,
	"If 0, other views are displayed (portal, shadow, reflection, ...). Note that shadows are disabled on game consoles. Set to 1 to only display the main view."
FUN_10432010(&DAT_107b5060,(int)"r_paintblob_otherviews_highres",&DAT_104ef188,0,
	"If 0, all other views are low resolution. Set to 1 to make other views high resolution."
FUN_10432010(&DAT_107b5488,(int)"r_paintblob_rotate",&DAT_104ef188,0,
	"Whether to rotate for transparency");
FUN_10432010(&DAT_107b5380,(int)"r_paintblob_shader",&DAT_104eefb3,0,"Choose a shader");
FUN_10432010(&DAT_107b5430,(int)"r_paintblob_tile_index_to_draw",&DAT_104ef1dc,0,
	"-1 to display all tiles. Otherwise the index of the tile to draw.");
FUN_10432010(&DAT_107b5328,(int)"r_paintblob_wireframe",&DAT_104ef188,0,"Draw wireframe");
FUN_10432010(&DAT_107b50c0,(int)"r_threaded_blobulator",&DAT_104ef184,0,
	"If enabled, blobulator will use material thread.");
FUN_10432010(&DAT_107b5710,(int)"blob_csection_pool_block_size",&DAT_104f48e0,2,
	"The blob renderer will allocate/free CSections in blocks of this size (smaller values may save some memory but will definitely increase CPU cost)"
FUN_10432010(&DAT_107b5660,(int)"blob_csection_pool_enable",&DAT_104ef184,2,
	"When enabled, the blob renderer uses a shared pool to recycle CSection objects, which drastically reduces memory usage"
FUN_10432010(&DAT_107b56b8,(int)"blob_csection_pool_free_per_frame",&DAT_1052ab20,2,
	"The blob renderer will free this many CSections from the shared pool each frame (larger values save memory but increase CPU cost)"
FUN_10432010(&DAT_107b57c0,(int)"blob_csection_pool_size",&DAT_105e95f0,2,
	"The maximum number of CSections to be recycled in the shared pool (smaller values save memory but increase CPU cost)"
FUN_10432010(&DAT_107b5768,(int)"blob_csection_pool_spew",&DAT_104ef188,2,
	"Spew usage stats about the blob renderer\'s shared CSection pool (more data will be available if blobulator is built in DEBUG)"
FUN_10432010(&DAT_107b5818,(int)"r_paintblob_seeding_with_simd",&DAT_104ef188,0,
	"Set this to 1 to run the seeding in SIMD. Otherwise use 0.");
FUN_10432010(&DAT_107b5600,(int)"r_paintblob_timeout_for_recycling_fragments",&DAT_104f48e0,0,
	"Timeout in milliseconds used to recycle the fragments. Default is 64 in release, 1000 in debug."
FUN_10432010(&DAT_107b5878,(int)"r_paintblob_use_optimized_fragment_copy",&DAT_104ef184,0,
	"Indicates if optimized VB/IB copy is enabled (Write-combine memory optimization).");
FUN_10432010(&DAT_107b60d8,(int)"r_paintblob_max_number_of_indices_displayed","1000000",0,
	"Indicates the maximum number of indices to display per tile. The index size will be the limiting factor though (regardless of this number)."
FUN_10432010(&DAT_107b6138,(int)"r_paintblob_max_number_of_vertices_displayed","1000000",0,
	"Indicates the maximum number of vertices to display per tile. The VB size will be the limiting factor though (regardless of this number)."
FUN_10432010(&DAT_107b6460,(int)"r_paintblob_max_number_of_threads",&DAT_105e9d24,0,
	"Indicates the maximum number of threads that will be spawn for the blob.");
FUN_10432010(&DAT_107b65c0,(int)"r_paintblob_debug_spu",&DAT_104ef188,0,
	"Set this to 1 to break in the SPU code for the blob. Otherwise use 0.");
FUN_10432010(&DAT_107c05e8,(int)"cl_simdbones",&DAT_104ef188,0x2000,"Use SIMD bone setup.");
FUN_10432010(&DAT_107c06b0,(int)"cl_use_simd_bones",&DAT_104ef184,0x2000,
	"1 use SIMD bones 0 use scalar bones.");
FUN_10432270(&DAT_107c0648,(int)"BlendBonesMode",&DAT_104f94c0,0x2000);
FUN_10432010(&DAT_107c0750,(int)"anim_3wayblend",&DAT_104ef184,0x2000,
	"Toggle the 3-way animation blending code.");
FUN_10432010(&DAT_107c07a8,(int)"anim_twistbones_enabled",&DAT_104ef184,0x6000,
	"Enable procedural twist bones.");
FUN_10432010(&DAT_107c0960,(int)"choreo_spew_filter",&DAT_104eefb3,0x2000,
	"Spew choreo. Use a sub-string or * to display all events.");
FUN_10432270(&DAT_107d3f30,(int)"cloth_wind",&DAT_104ef188,0);
FUN_10432270(&DAT_107d4008,(int)"cloth_wind_pitch",&DAT_104ef188,0);
FUN_10432270(&DAT_107d3ea0,(int)"cloth_windage_multiplier",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_107d43d8,(int)"mat_normals",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4220,(int)"mat_softwareskin",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4650,(int)"r_drawentities",&DAT_104ef184,0x4000);
FUN_10432270(&DAT_107d42d0,(int)"r_eyeglintlodpixels",&DAT_104ef188,0);
FUN_10432270(&DAT_107d4110,(int)"r_eyegloss",&DAT_104ef184,0x80);
FUN_10432270(&DAT_107d4430,(int)"r_eyemove",&DAT_104ef184,0x80);
FUN_10432270(&DAT_107d41c0,(int)"r_eyes",&DAT_104ef184,0);
FUN_10432270(&DAT_107d4758,(int)"r_eyeshift_x",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107d47b0,(int)"r_eyeshift_y",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107d44f0,(int)"r_eyeshift_z",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107d4278,(int)"r_eyesize",&DAT_104ef188,0x80);
FUN_10432270(&DAT_107d4548,(int)"r_flex",&DAT_104ef184,0);
FUN_10432270(&DAT_107d45f8,(int)"r_maxmodeldecal",&DAT_10501c5c,0);
FUN_10432270(&DAT_107d46a8,(int)"r_modelwireframedecal",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4168,(int)"r_nohw",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d45a0,(int)"r_nosw",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4488,(int)"r_rootlod",&DAT_104ef188,0x804002);
FUN_10432270(&DAT_107d4328,(int)"r_showenvcubemap",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4700,(int)"r_skin",&DAT_104ef188,0x4000);
FUN_10432270(&DAT_107d4380,(int)"r_teeth",&DAT_104ef184,0);
FUN_10432010(&DAT_107d50d8,(int)"r_sse_s",&DAT_104ef184,0,"sse ins for particle sphere create");
FUN_10435540(&DAT_1083e4f8,0x7f,"\"",1,(int)&DAT_106fb320);
FUN_10435540(&DAT_1083dad8,0x5c,"\"",0xb,(int)&DAT_106fb2c8);
FUN_10432010(&DAT_10840048,(int)"panel_test_title_safe",&DAT_104ef188,0x4000,
	"Test vgui panel positioning with title safe indentation");
FUN_102662e0(&DAT_10426e68,(int)"snd_front_headphone_position",(int)FUN_10034fb0,
	"Specifies the position (in degrees) of the virtual front left/right headphones.",0,
FUN_102662e0(&DAT_10426eb0,(int)"snd_front_stereo_speaker_position",(int)FUN_10035040,
	"Specifies the position (in degrees) of the virtual front left/right speakers.",0,
FUN_102662e0(&DAT_10426ef8,(int)"snd_front_surround_speaker_position",(int)FUN_100350d0,
	"Specifies the position (in degrees) of the virtual front left/right speakers.",0,
FUN_102662e0(&DAT_10426f40,(int)"snd_headphone_pan_exponent",(int)FUN_10035160,
	"Specifies the exponent for the pan xfade from phone to phone if the \"exp\" pan law is being used."
FUN_102662e0(&DAT_10426fac,(int)"snd_headphone_pan_radial_weight",(int)FUN_100351f0,
	"Apply cos(angle) * weight before pan law",0,(undefined *)0x0);
FUN_102662e0(&DAT_10426e8c,(int)"snd_rear_headphone_position",(int)FUN_10035280,
	"Specifies the position  (in degrees) of the virtual rear left/right headphones.",0,
FUN_102664a0(&DAT_10427018,(int)"snd_rear_speaker_scale",&DAT_103242e4,0x80,
	"How much to scale rear speaker contribution to front stereo output");
FUN_102662e0(&DAT_10426ed4,(int)"snd_rear_stereo_speaker_position",(int)FUN_10035310,
	"Specifies the position (in degrees) of the virtual rear left/right speakers.",0,
FUN_102662e0(&DAT_10426f1c,(int)"snd_rear_surround_speaker_position",(int)FUN_100353a0,
	"Specifies the position (in degrees) of the virtual rear left/right speakers.",0,
FUN_102662e0(&DAT_10426f64,(int)"snd_stereo_speaker_pan_exponent",(int)FUN_10035430,
	"Specifies the exponent for the pan xfade from speaker to speaker if the \"exp\" pan law is being used."
FUN_102662e0(&DAT_10426fd0,(int)"snd_stereo_speaker_pan_radial_weight",(int)FUN_100354c0,
	"Apply cos(angle) * weight before pan law",0,(undefined *)0x0);
FUN_102662e0(&DAT_10426f88,(int)"snd_surround_speaker_pan_exponent",(int)FUN_10035550,
	"Specifies the exponent for the pan xfade from speaker to speaker if the \"exp\" pan law is being used."
FUN_102662e0(&DAT_10426ff4,(int)"snd_surround_speaker_pan_radial_weight",(int)FUN_100355e0,
	"Apply cos(angle) * weight before pan law",0,(undefined *)0x0);
FUN_102662e0(&DAT_10427148,(int)"dsound_devices",(int)FUN_10038690,&DAT_103236cf,0,
FUN_102662e0(&DAT_1042716c,(int)"dsound_set",(int)FUN_100386f0,&DAT_103236cf,0,(undefined *)0x0);
FUN_10266700(&DAT_10427190,(int)"snd_lockpartial",&DAT_10324480,0);
FUN_10266700(&DAT_104270f0,(int)"snd_mute_losefocus",&DAT_10324480,0x80);
FUN_10266700(&DAT_10427098,(int)"windows_speaker_config",&DAT_10324484,0x80080);
FUN_10266380(&DAT_1043cd64,(int)"adsp_reset_nodes",(int)FUN_1003b4d0,(undefined *)0x0,0,
FUN_10266700(&DAT_1043d1a8,(int)"adsp_debug",&DAT_103256a0,0x80);
FUN_10266700(&DAT_10445ed0,(int)"adsp_door_height",&DAT_103261c8,0);
FUN_10266700(&DAT_10445f80,(int)"adsp_low_ceiling",&DAT_103261f8,0);
FUN_102664a0(&DAT_10445fd8,(int)"das_max_z_trace_length",&DAT_10326244,0,
	"Maximum height of player and still test for adsp");
FUN_10266700(&DAT_10445e78,(int)"das_process_overhang_spaces",&DAT_103256a0,0);
FUN_10266700(&DAT_10445f28,(int)"adsp_wall_height",&DAT_103261e0,0);
FUN_10266700(&DAT_1043cf40,(int)"dsp_db_min",&DAT_1032605c,0x14000);
FUN_10266700(&DAT_1043cf98,(int)"dsp_db_mixdrop",&DAT_10325ac0,0x14000);
FUN_10266700(&DAT_1043ce38,(int)"dsp_dist_max","1440.0",0x14000);
FUN_10266700(&DAT_1043cde0,(int)"dsp_dist_min",&DAT_10326010,0x14000);
FUN_10266700(&DAT_1043cee8,(int)"dsp_mix_max",&DAT_1032604c,0x14000);
FUN_10266700(&DAT_1043ce90,(int)"dsp_mix_min",&DAT_1032603c,0x14000);
FUN_102662e0(&DAT_104466cc,(int)"dsp_reload",(int)FUN_10041f60,(undefined *)0x0,0,(undefined *)0x0
FUN_102662e0(&DAT_10446034,(int)"snd_dump_filepaths",(int)FUN_10042280,(undefined *)0x0,0,
FUN_10266700(&DAT_1043ca58,(int)"movie_volume_scale",&DAT_103242e4,0);
FUN_102662e0(&DAT_1043cc68,(int)&DAT_10325cf8,(int)FUN_100437c0,"Play a sound.",0x10000000,
FUN_102662e0(&DAT_1043cc8c,(int)"playflush",(int)FUN_100437c0,
	"Play a sound, reloading from disk in case of changes.",0,(undefined *)0x0);
FUN_102662e0(&DAT_1043ccb0,(int)"playvol",(int)FUN_10043a50,"Play a sound at a specified volume.",
FUN_10266700(&DAT_10446748,(int)"snd_ShowThreadFrameTime",&DAT_103256a0,0);
FUN_102664a0(&DAT_104465a0,(int)"snd_debug_gaincurve",&DAT_103256a0,0,
	"Visualize sound gain fall off");
FUN_102664a0(&DAT_104465f8,(int)"snd_debug_gaincurvevol",&DAT_103242e4,0,
	"Visualize sound gain fall off");
FUN_102664a0(&DAT_10446650,(int)"snd_debug_panlaw",&DAT_103256a0,0x4000,
	"Visualize panning crossfade curves");
FUN_10266700(&DAT_10446108,(int)"snd_defer_trace",&DAT_10324480,0);
FUN_102664a0(&DAT_1043cb60,(int)"snd_delay_for_choreo_enabled",&DAT_10324480,0,
	"Enables update of delay for choreo to compensate for IO latency.");
FUN_102664a0(&DAT_1043cbb8,(int)"snd_delay_for_choreo_reset_after_N_milliseconds",&DAT_10325be0,0,
	"Resets the choreo latency after N milliseconds of VO not playing. Default is 500 ms."
FUN_10266700(&DAT_1043c708,(int)"snd_delay_sound_shift",&DAT_103259b4,0);
FUN_10266700(&DAT_104463e8,(int)"snd_duckerattacktime",&DAT_10325ac0,0x80);
FUN_10266700(&DAT_10446440,(int)"snd_duckerreleasetime",&DAT_10326e6c,0x80);
FUN_10266700(&DAT_10446498,(int)"snd_duckerthreshold",&DAT_10326e88,0x80);
FUN_10266700(&DAT_104464f0,(int)"snd_ducking_off",&DAT_10324480,0x80);
FUN_10266700(&DAT_10446390,(int)"snd_ducktovolume",&DAT_10326e38,0x80);
FUN_102662e0(&DAT_104466a8,(int)"snd_dumpclientsounds",(int)thunk_FUN_100420a0,
	"Dump sounds to console",0,(undefined *)0x0);
FUN_102664a0(&DAT_1043d048,(int)"snd_dvar_dist_max",&DAT_103260e4,0,
	"Play full \'far\' sound at this distance");
FUN_102664a0(&DAT_1043cff0,(int)"snd_dvar_dist_min",&DAT_103260a4,0,
	"Play full \'near\' sound at this distance");
FUN_10266700(&DAT_104462c0,(int)"snd_filter",&DAT_103236cf,0x4000);
FUN_102664a0(&DAT_1043c8f8,(int)"snd_find_channel",&DAT_103236cf,0,
	"Scan every channel to find the corresponding sound.");
FUN_10266700(&DAT_1043c7f0,(int)"snd_legacy_surround",&DAT_103256a0,0x80);
FUN_10266700(&DAT_104277d0,(int)"snd_max_same_sounds",&DAT_1032597c,0x4000);
FUN_10266700(&DAT_10427828,(int)"snd_max_same_weapon_sounds",&DAT_10325994,0x4000);
FUN_102664a0(&DAT_10427568,(int)"snd_mergemethod",&DAT_10324480,0,
	"Sound merge method (0 == sum and clip, 1 == max, 2 == avg).");
FUN_10266700(&DAT_1043cc10,(int)"snd_mix_async",&DAT_103256a0,0);
FUN_10266700(&DAT_1043cb08,(int)"snd_mixahead",&DAT_10325b0c,0x80);
FUN_102665c0(&DAT_1043cab0,(int)"snd_musicvolume",&DAT_10325af8,0x1000280,"Music volume",1,0,1,
FUN_10266700(&DAT_1043c848,(int)"snd_noextraupdate",&DAT_103256a0,0);
FUN_10266700(&DAT_1043d150,(int)"snd_obscured_gain_dB","-2.70",0x4000);
FUN_10266700(&DAT_1043c950,(int)"snd_pitchquality",&DAT_10324480,0x80);
FUN_10266700(&DAT_1043d0f8,(int)"snd_pre_gain_dist_falloff",&DAT_10324480,0x4000);
FUN_102662e0(&DAT_104467e8,(int)"snd_print_channel_by_guid",(int)FUN_10047e00,
	"Prints the content of a channel from its guid. snd_print_channel_by_guid <guid>.",0,
FUN_102662e0(&DAT_104467c4,(int)"snd_print_channel_by_index",(int)FUN_10047f30,
	"Prints the content of a channel from its index. snd_print_channel_by_index <index>."
FUN_102662e0(&DAT_1044680c,(int)"snd_print_channels",(int)FUN_10047fc0,
	"Prints all the active channel.",0,(undefined *)0x0);
FUN_102664a0(&DAT_104276c8,(int)"snd_report_format_sound",&DAT_103256a0,0x4000,
	"If set to 1, report all sound formats.\n");
FUN_102664a0(&DAT_10427670,(int)"snd_report_loop_sound",&DAT_103256a0,0x4000,
	"If set to 1, report all sounds that just looped.\n");
FUN_102664a0(&DAT_104275c0,(int)"snd_report_start_sound",&DAT_103256a0,0x4000,
	"If set to 1, report all sounds played with S_StartSound(). The sound may not end up being played (if error occurred for example). Use snd_showstart to see the sounds that are really played.\n"
FUN_102664a0(&DAT_10427618,(int)"snd_report_stop_sound",&DAT_103256a0,0x4000,
	"If set to 1, report all sounds stopped with S_StopSound().\n");
FUN_102664a0(&DAT_10427720,(int)"snd_report_verbose_error",&DAT_103256a0,0x4000,
	"If set to 1, report more error found when playing sounds.\n");
FUN_102662e0(&DAT_10446830,(int)"snd_set_master_volume",(int)FUN_10048060,
	"Sets the master volume for a channel. snd_set_master_volume <guid> <mastervolume>.",
FUN_102664a0(&DAT_1043c8a0,(int)"snd_show",&DAT_103256a0,0x4000,"Show sounds info");
FUN_102664a0(&DAT_104466f0,(int)"snd_show_channel_count",&DAT_103256a0,0,
	"Show the current count of channel types.");
FUN_10266700(&DAT_1043d0a0,(int)"snd_showstart",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_10427508,(int)"snd_sos_allow_dynamic_chantype",&DAT_10324480,0);
FUN_10266700(&DAT_104460b0,(int)"snd_sos_exec_when_paused",&DAT_10324480,0);
FUN_102664a0(&DAT_10446338,(int)"snd_sos_show_block_debug",&DAT_103256a0,0x4000,
	"Spew data about the list of block entries.");
FUN_10266700(&DAT_104274b0,(int)"snd_sos_show_client_rcv",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_10446548,(int)"snd_spatialize_roundrobin",&DAT_103256a0,0,
	"Lowend optimization: if nonzero, spatialize only a fraction of sound channels each frame. 1/2^x of channels will be spatialized per frame."
FUN_10266700(&DAT_10427778,(int)"snd_store_filepaths",&DAT_103236cf,0);
FUN_10266700(&DAT_1043c798,(int)"snd_surround_speakers",&DAT_10324484,0);
FUN_102664a0(&DAT_10446210,(int)"snd_vol_no_xfade",&DAT_10326618,0,
	"If current and target volumes are close, don\'t cross-fade.");
FUN_102664a0(&DAT_104461b8,(int)"snd_vol_xfade_incr_max",&DAT_103265bc,0,
	"Never change volume by more than +/-N units per frame during cross-fade.");
FUN_102664a0(&DAT_10446268,(int)"snd_vol_xfade_speed_multiplier_for_doppler",&DAT_10324480,0,
	"Doppler effect is extremely sensible to volume variation. To reduce the pops, the cross-fade has to be very slow."
FUN_102664a0(&DAT_10446160,(int)"snd_vol_xfade_time","0.070",0,
	"Channel volume cross-fade time in seconds.");
FUN_102662e0(&DAT_104467a0,(int)"sndplaydelay",(int)FUN_10043920,(undefined *)0x0,0,
FUN_10266380(&DAT_1043cd40,(int)"soundinfo",(int)FUN_10044a20,"Describe the current sound device."
FUN_10266380(&DAT_1043cd1c,(int)"soundlist",(int)FUN_10044b20,"List all known sounds.",0,
FUN_102662e0(&DAT_1043ccd4,(int)"speak",(int)FUN_100440c0,"Play a constructed sentence.",0,
FUN_10266380(&DAT_1043ccf8,(int)"stopsound",(int)FUN_10214050,(undefined *)0x0,0x4000,
FUN_10266700(&DAT_1043ca00,(int)"ui_volume_scale",&DAT_103242e4,0);
FUN_10266700(&DAT_10446058,(int)"voice_minimum_gain",&DAT_10325ac0,0);
FUN_10266700(&DAT_1043cd88,(int)"voice_steal",&DAT_10325f28,0);
FUN_102665c0(&DAT_1043c9a8,(int)"volume",&DAT_103242e4,0x1000080,"Sound volume",1,0,1,0x3f800000);
FUN_10266700(&DAT_10462700,(int)"adsp_alley_min",&DAT_10328b08,0);
FUN_10266700(&DAT_10462758,(int)"adsp_courtyard_min",&DAT_10328b1c,0);
FUN_10266700(&DAT_104625a0,(int)"adsp_duct_min",&DAT_10328ab8,0);
FUN_10266700(&DAT_104625f8,(int)"adsp_hall_min",&DAT_10328acc,0);
FUN_10266700(&DAT_104628b8,(int)"adsp_opencourtyard_min",&DAT_10328b1c,0);
FUN_10266700(&DAT_104627b0,(int)"adsp_openspace_min",&DAT_10328b34,0);
FUN_10266700(&DAT_10462860,(int)"adsp_openstreet_min",&DAT_10328af4,0);
FUN_10266700(&DAT_10462808,(int)"adsp_openwall_min",&DAT_10328b34,0);
FUN_10266700(&DAT_10462548,(int)"adsp_room_min",&DAT_10328aa4,0);
FUN_10266700(&DAT_104624f0,(int)"adsp_scale_delay_feedback",&DAT_1032603c,0);
FUN_10266700(&DAT_10462498,(int)"adsp_scale_delay_gain",&DAT_1032603c,0);
FUN_10266700(&DAT_104626a8,(int)"adsp_street_min",&DAT_10328af4,0);
FUN_10266700(&DAT_10462650,(int)"adsp_tunnel_min",&DAT_10328ae0,0);
FUN_10266700(&DAT_10462128,(int)"dsp_automatic",&DAT_103256a0,0x10000);
FUN_10266700(&DAT_10462440,(int)"dsp_enhance_stereo",&DAT_103256a0,0x80);
FUN_10266700(&DAT_10462020,(int)"dsp_facingaway",&DAT_103256a0,0x10000);
FUN_10266700(&DAT_104621d8,(int)"dsp_off",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_10461fc8,(int)"dsp_player",&DAT_103256a0,0x10090000);
FUN_10266700(&DAT_10461f18,(int)"dsp_room",&DAT_10324480,0x10000);
FUN_10266700(&DAT_10462180,(int)"room_type",&DAT_103256a0,0x10000);
FUN_10266700(&DAT_10462230,(int)"dsp_slow_cpu",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104620d0,(int)"dsp_spatial",&DAT_10328730,0x10000);
FUN_10266700(&DAT_10462078,(int)"dsp_speaker",&DAT_10328720,0x10000);
FUN_10266700(&DAT_104623e8,(int)"dsp_vol_2ch",&DAT_103242e4,0x10000);
FUN_10266700(&DAT_10462390,(int)"dsp_vol_4ch",&DAT_10325ac0,0x10000);
FUN_10266700(&DAT_10462338,(int)"dsp_vol_5ch",&DAT_10325ac0,0x10000);
FUN_10266700(&DAT_104622e0,(int)"dsp_volume",&DAT_1032604c,0x4000);
FUN_10266700(&DAT_10461f70,(int)"dsp_water",&DAT_103286f4,0x10000);
FUN_102664a0(&DAT_10461e68,(int)"snd_dsp_cancel_old_preset_after_N_milliseconds",&DAT_10327c20,0,
	"Number of milliseconds after an unused previous preset is not considered valid for the start of a cross-fade."
FUN_102664a0(&DAT_10461db8,(int)"snd_dsp_optimization",&DAT_10324480,0,
	"Turns optimization on for DSP effects if set to 1 (default). 0 to turn the optimization off."
FUN_102664a0(&DAT_10461e10,(int)"snd_dsp_spew_changes",&DAT_103256a0,0,
	"Spews major changes to the dsp or presets if set to 1. 0 to turn the spew off (default)."
FUN_102662e0(&DAT_10462910,(int)"snd_print_dsp_effect",(int)FUN_100558d0,
	"Prints the content of a dsp effect.",0,(undefined *)0x0);
FUN_10266700(&DAT_10462288,(int)"snd_profile",&DAT_103256a0,0x10000);
FUN_102664a0(&DAT_10461ec0,(int)"snd_spew_dsp_process",&DAT_103256a0,0,
	"Spews text every time a DSP effect is applied if set to 1. 0 to turn the spew off (default)."
FUN_102664a0(&DAT_10482aa8,(int)"snd_cull_duplicates",&DAT_103256a0,0,
	"If nonzero, aggressively cull duplicate sounds during mixing. The number specifies the number of duplicates allowed to be played."
FUN_10266700(&DAT_10482b00,(int)"snd_mix_dry_volume",&DAT_103242e4,0);
FUN_102664a0(&DAT_104829a0,(int)"snd_mix_optimization",&DAT_103256a0,0,
	"Turns optimization on for mixing if set to 1 (default). 0 to turn the optimization off."
FUN_102664a0(&DAT_104829f8,(int)"snd_mix_soundchar_enabled",&DAT_10324480,0,
	"Turns sound char on for mixing if set to 1 (default). 0 to turn the sound char off and use default behavior (spatial instead of doppler, directional, etc...)."
FUN_10266700(&DAT_10482b58,(int)"snd_mix_test1",&DAT_103242e4,0);
FUN_10266700(&DAT_10482bb0,(int)"snd_mix_test2",&DAT_103242e4,0);
FUN_102664a0(&DAT_10482c30,(int)"snd_moviefix",&DAT_10324480,0,
	"Defer sound recording until next tick when laying off movies.");
FUN_102664a0(&DAT_10482a50,(int)"snd_pause_all",&DAT_10324480,0x4000,
	"Specifies to pause all sounds and not just voice");
FUN_10266700(&DAT_104b0370,(int)"snd_soundmixer_parse_debug",&DAT_103256a0,0);
FUN_102662e0(&DAT_104b0328,(int)"snd_soundmixer_flush",(int)thunk_FUN_1005ed60,
	"Reload soundmixers.txt file.",0,(undefined *)0x0);
FUN_10266700(&DAT_104b01e8,(int)"snd_disable_mixer_duck",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104b0138,(int)"snd_disable_mixer_solo",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_104b0410,(int)"snd_getmixer",(int)FUN_1005e660,
	"Get data related to mix group matching string",0,(undefined *)0x0);
FUN_10266700(&DAT_104b0088,(int)"snd_list",&DAT_103236cf,0x4000);
FUN_102662e0(&DAT_104b03ec,(int)"snd_soundmixer_list_mix_groups",(int)FUN_1005e9a0,
	"List all mix groups to dev console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_104b03c8,(int)"snd_soundmixer_list_mix_layers",(int)FUN_1005e9c0,
	"List all mix layers to dev console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_104b034c,(int)"snd_soundmixer_list_mixers",(int)FUN_1005ebb0,
	"List all mixers to dev console.",0,(undefined *)0x0);
FUN_10266700(&DAT_104affd8,(int)"snd_mixer_master_dsp",&DAT_103242e4,0x4000);
FUN_10266700(&DAT_104aff80,(int)"snd_mixer_master_level",&DAT_103242e4,0x4000);
FUN_102662e0(&DAT_104b0240,(int)"snd_setmixer",(int)FUN_100600d0,
	"Set named Mixgroup of current mixer to mix vol, mute, solo.",0x4000,(undefined *)0x0
FUN_102662e0(&DAT_104b0264,(int)"snd_setmixlayer",(int)FUN_1005fe90,
	"Set named Mixgroup of named mix layer to mix vol, mute, solo.",0x4000,
FUN_102662e0(&DAT_104b0288,(int)"snd_setmixlayer_amount",(int)FUN_1005ff50,
	"Set named mix layer mix amount.",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_104b0030,(int)"snd_showclassname",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104b00e0,(int)"snd_showmixer",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104b0190,(int)"snd_soundmixer","Default_Mix",0);
FUN_102662e0(&DAT_104b02ac,(int)"snd_soundmixer_set_trigger_factor",(int)FUN_10060000,
	"Set named mix layer / mix group, trigger amount.",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_104b02d0,(int)"snd_soundmixer_version",&DAT_10325f28,0);
FUN_10266700(&DAT_104b0458,(int)"snd_voice_echo",&DAT_103256a0,2);
FUN_102662e0(&DAT_104c29bc,(int)"snd_async_flush",(int)FUN_10066270,
	"Flush all unlocked async audio data",0,(undefined *)0x0);
FUN_102664a0(&DAT_104c2560,(int)"snd_async_fullyasync",&DAT_10324480,0,
	"All playback is fully async (sound doesn\'t play until data arrives).");
FUN_102662e0(&DAT_104c29e0,(int)"snd_async_showmem",(int)FUN_10066290,"Show async memory stats",0,
FUN_102662e0(&DAT_104c2a28,(int)"snd_async_showmem_music",(int)FUN_100662a0,
	"Show async memory stats for just non-streamed music",0,(undefined *)0x0);
FUN_102662e0(&DAT_104c2a04,(int)"snd_async_showmem_summary",(int)FUN_100662b0,
	"Show brief async memory stats",0,(undefined *)0x0);
FUN_102664a0(&DAT_104c2508,(int)"snd_async_spew_blocking",&DAT_103256a0,0,
	"Spew message to console any time async sound loading blocks on file i/o.");
FUN_102664a0(&DAT_104c2610,(int)"snd_async_stream_fail",&DAT_103256a0,0,
	"Spew stream pool failures.");
FUN_102664a0(&DAT_104c2668,(int)"snd_async_stream_purges",&DAT_103256a0,0,
	"Spew stream pool purges.");
FUN_102664a0(&DAT_104c2718,(int)"snd_async_stream_recover_from_exhausted_stream",&DAT_10324480,0,
	"If 1, recovers when the stream is exhausted when playing PCM sounds (prevents music or ambiance sounds to stop if too many sounds are played). Set to 0, to stop the sound otherwise."
FUN_102664a0(&DAT_104c25b8,(int)"snd_async_stream_spew",&DAT_103256a0,0,
	"Spew streaming info ( 0=Off, 1=streams, 2=buffers");
FUN_102664a0(&DAT_104c2878,(int)"snd_async_stream_spew_delayed_start_filter",&DAT_1032a86c,0,
	"Filter used to spew sounds that starts late. Use an empty string \"\" to display all sounds. By default only the VO are displayed."
FUN_102664a0(&DAT_104c2820,(int)"snd_async_stream_spew_delayed_start_time",&DAT_10325be0,0,
	"Spew any asynchronous sound that starts with more than N milliseconds delay. By default spew when there is more than 500 ms delay."
FUN_102664a0(&DAT_104c2770,(int)"snd_async_stream_spew_exhausted_buffer",&DAT_10324480,0,
	"If 1, spews warnings when the buffer is exhausted (recommended). Set to 0 for no spew (for debugging purpose only)."
FUN_102664a0(&DAT_104c27c8,(int)"snd_async_stream_spew_exhausted_buffer_time",&DAT_10327c20,0,
	"Number of milliseconds between each exhausted buffer spew.");
FUN_102664a0(&DAT_104c26c0,(int)"snd_async_stream_static_alloc",&DAT_103256a0,0,
	"If 1, spews allocations on the static alloc pool. Set to 0 for no spew.");
FUN_102664a0(&DAT_104c2d18,(int)"force_audio_english",&DAT_103256a0,0x1000080,
	"Keeps track of whether we\'re forcing english in a localized language.");
FUN_10266700(&DAT_104c2c68,(int)"snd_async_minsize","262144",0);
FUN_102664a0(&DAT_104c2cc0,(int)"snd_prefetch_common",&DAT_10324480,0x80000,
	"Prefetch common sounds from directories specified in scripts/sound_prefetch.txt");
FUN_102662e0(&DAT_104c2d70,(int)"snd_rebuildaudiocache",(int)FUN_1006ce20,
	"rebuild audio cache for current language\n",0,(undefined *)0x0);
FUN_102662e0(&DAT_104c2db8,(int)"snd_updateaudiocache",(int)FUN_1006ce30,
	"checks _master.cache based on file sizes and rebuilds any change/new entries\n",0,
FUN_102662e0(&DAT_104c2d94,(int)"snd_writemanifest",(int)FUN_1006ce40,
	"If running a game, outputs the precache manifest for the current level\n",0,
FUN_102662e0(&DAT_104c2e1c,(int)"movie_fixwave",(int)FUN_1006d000,
	"Fixup corrupted .wav file if engine crashed during startmovie/endmovie, etc.",0,
FUN_10266700(&DAT_104c2e48,(int)"snd_sos_show_entry_match_free",&DAT_103256a0,0);
FUN_10266700(&DAT_104c2f28,(int)"snd_op_test_convar",&DAT_103242e4,0x4000);
FUN_10266700(&DAT_104c3e80,(int)"snd_sos_show_source_info",&DAT_103256a0,0);
FUN_10266700(&DAT_104c4040,(int)"snd_sos_show_operator_stop_entry",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c4200,(int)"snd_sos_show_queuetotrack",&DAT_103256a0,0x4000);
FUN_10266380(&DAT_104c4764,(int)"snd_sos_flush_operators",(int)FUN_10080760,
	"Flush and re-parse the sound operator system",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_104c471c,(int)"snd_sos_get_opvar",(int)FUN_100811a0,&DAT_103236cf,0x4000,
FUN_10266700(&DAT_104c4648,(int)"snd_sos_list_operator_updates",&DAT_103256a0,0x4000);
FUN_10266380(&DAT_104c4740,(int)"snd_sos_print_operators",(int)FUN_100806f0,
	"Prints a list of currently available operators",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_104c46f8,(int)"snd_sos_set_opvar",(int)FUN_10081200,&DAT_103236cf,0x4000,
FUN_10266700(&DAT_104c46a0,(int)"snd_sos_show_operator_entry_filter",&DAT_103236cf,0x4000);
FUN_10266700(&DAT_104c4438,(int)"snd_sos_show_operator_init",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c45f0,(int)"snd_sos_show_operator_parse",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c44e8,(int)"snd_sos_show_operator_prestart",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c4598,(int)"snd_sos_show_operator_shutdown",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c4490,(int)"snd_sos_show_operator_start",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c4540,(int)"snd_sos_show_operator_updates",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c4838,(int)"snd_sos_show_opvar_list",&DAT_103256a0,0);
FUN_10266700(&DAT_104c4788,(int)"snd_sos_show_startqueue",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104c47e0,(int)"snd_sos_show_track_list",&DAT_103256a0,0);
FUN_10266700(&DAT_104c4d58,(int)"voice_avggain",&DAT_10325ac0,0);
FUN_10266530(&DAT_104c5018,(int)"voice_enable",&DAT_10324480,0x80,
	"Toggle voice transmit and receive.",(int)FUN_10082d20);
FUN_10266700(&DAT_104c4eb8,(int)"voice_fadeouttime",&DAT_10325b0c,0);
FUN_10266700(&DAT_104c50c8,(int)"voice_forcemicrecord",&DAT_10324480,0x80);
FUN_10266700(&DAT_104c4e60,(int)"voice_loopback",&DAT_103256a0,0x200);
FUN_10266700(&DAT_104c4db0,(int)"voice_maxgain",&DAT_1032e794,0);
FUN_10266700(&DAT_104c4f10,(int)"voice_profile",&DAT_103256a0,0);
FUN_10266700(&DAT_104c4e08,(int)"voice_scale",&DAT_10324480,0x80);
FUN_10266700(&DAT_104c4f68,(int)"voice_showchannels",&DAT_103256a0,0);
FUN_10266700(&DAT_104c4fc0,(int)"voice_showincoming",&DAT_103256a0,0);
FUN_10266700(&DAT_104c5070,(int)"voice_threshold",&DAT_1032e834,0x80);
FUN_102664a0(&DAT_104e01f0,(int)"voice_writevoices",&DAT_103256a0,0,
	"Saves each speaker\'s voice data into separate .wav files\n");
FUN_10266700(&DAT_104e0320,(int)"voice_mixer_boost",&DAT_103256a0,0x80);
FUN_10266700(&DAT_104e02c8,(int)"voice_mixer_mute",&DAT_103256a0,0x80);
FUN_10266700(&DAT_104e0378,(int)"voice_mixer_volume",&DAT_103242e4,0x80);
FUN_10266700(&DAT_104e0460,(int)"voice_overdrive",&DAT_10325f28,0);
FUN_10266700(&DAT_104e04b8,(int)"voice_overdrivefadetime",&DAT_1032ecd0,0);
FUN_102664a0(&DAT_104e20d0,(int)"snd_vox_captiontrace",&DAT_103256a0,0,
	"Shows sentence name for sentences which are set not to show captions.");
FUN_10266700(&DAT_104e1fc8,(int)"snd_vox_globaltimeout",&DAT_103260a4,0);
FUN_10266700(&DAT_104e2078,(int)"snd_vox_sectimetout",&DAT_103260a4,0);
FUN_10266700(&DAT_104e2020,(int)"snd_vox_seqtimetout",&DAT_103260a4,0);
FUN_10266380(&DAT_104e1f2c,(int)"vox_reload",(int)FUN_10088b90,"Reload sentences.txt file",0x4000,
FUN_102664a0(&DAT_104e23f8,(int)"cl_failremoteconnections",&DAT_103256a0,2,
	"Force connection attempts to time out");
FUN_102664a0(&DAT_104e23a0,(int)"cl_interpolate",&DAT_103242e4,0x202,
	"Interpolate entities on the client.");
FUN_10266530(&DAT_104e22f0,(int)&DAT_1032e50c,"unnamed",0x10008680,"Current user name",
FUN_102665c0(&DAT_104e2240,(int)"cl_resend",&DAT_1032fc90,0x80000,
	"Delay in seconds before the client will resend the \'connect\' attempt",1,0x3fc00000
FUN_102665c0(&DAT_104e2298,(int)"cl_resend_timeout",&DAT_1032fce4,0x80000,
	"Total time allowed for the client to resend the \'connect\' attempt",1,0x3fc00000,1,
FUN_10266660(&DAT_104e2450,(int)"cl_steam_overlay_position",&DAT_10325994,0x80080,
	"Steam Overlay Position",1,0,1,0x40400000,(int)FUN_1008b0e0);
FUN_102664a0(&DAT_104e2348,(int)"password",&DAT_103236cf,0x20020080,
	"Current server access password");
FUN_102662e0(&DAT_104e2688,(int)"buildcubemaps",(int)FUN_10097890,"Rebuild cubemaps.",0,
FUN_10266700(&DAT_104e24e0,(int)"mat_dynamic_tonemapping",&DAT_10324480,0x4000);
FUN_102662e0(&DAT_104e2640,(int)"envmap",(int)FUN_10097910,&DAT_103236cf,0,(undefined *)0x0);
FUN_102662e0(&DAT_104e2664,(int)"lightprobe",(int)FUN_10097a50,
	"Samples the lighting environment.\nCreates a cubemap and a file indicating the local lighting in a subdirectory called \'materials/lightprobes\'\n.The lightprobe command requires you specify a base file name.\n"
FUN_10266700(&DAT_104e25e8,(int)"mat_force_tonemap_scale",&DAT_10326010,0x4000);
FUN_102664a0(&DAT_104e2590,(int)"r_DrawBeams",&DAT_10324480,0x4000,"0=Off, 1=Normal, 2=Wireframe")
FUN_10266700(&DAT_104e2538,(int)"reload_materials",&DAT_103256a0,0);
FUN_102662e0(&DAT_104e2728,(int)"buildmodelforworld",(int)FUN_1009a6f0,"buildmodelforworld",0,
FUN_10266700(&DAT_104e26d0,(int)"r_buildingmapforworld",&DAT_103256a0,0);
FUN_102662e0(&DAT_104e2880,(int)"bench_end",(int)FUN_1009ad10,"Ends gathering of info.",0x4000,
FUN_102662e0(&DAT_104e285c,(int)"bench_start",(int)FUN_1009ad20,
	"Starts gathering of info. Arguments: filename to write results into",0x4000,
FUN_102662e0(&DAT_104e28a4,(int)"bench_upload",(int)FUN_1009ad40,
	"Uploads most recent benchmark stats to the Valve servers.",0x4000,(undefined *)0x0);
FUN_102664a0(&DAT_104e4010,(int)"cl_showdemooverlay",&DAT_103256a0,0,
	"How often to flash demo recording/playback overlay (0 - disable overlay, -1 - show always)"
FUN_102664a0(&DAT_104e3eb0,(int)"demo_avellimit",&DAT_1032e834,0,
	"Angular velocity limit before eyes considered snapped for demo playback.");
FUN_102664a0(&DAT_104e3528,(int)"demo_debug",&DAT_103256a0,0,"Demo debug info.");
FUN_102664a0(&DAT_104e3630,(int)"demo_enabledemos",&DAT_10324480,0,
	"Enable recording demos (must be set true before loading a map)");
FUN_102664a0(&DAT_104e3f60,(int)"demo_fastforwardfinalspeed",&DAT_10332ec8,0,
	"Go this fast when starting to hold FF button.");
FUN_102664a0(&DAT_104e3fb8,(int)"demo_fastforwardramptime",&DAT_10332f1c,0,
	"How many seconds it takes to get to full FF speed.");
FUN_102664a0(&DAT_104e3f08,(int)"demo_fastforwardstartspeed",&DAT_10325f28,0,
	"Go this fast when starting to hold FF button.");
FUN_102662e0(&DAT_104e41e0,(int)"demo_gototick",(int)FUN_100a24c0,"Skips to a tick in demo.",0,
FUN_102664a0(&DAT_104e3e58,(int)"demo_interplimit",&DAT_10332e00,0,
	"How much origin velocity before it\'s considered to have \'teleported\' causing interpolation to reset."
FUN_102664a0(&DAT_104e3580,(int)"demo_interpolateview",&DAT_10324480,0,
	"Do view interpolation during dem playback.");
FUN_102664a0(&DAT_104e4068,(int)"demo_legacy_rollback",&DAT_10324480,0,
	"Use legacy view interpolation rollback amount in demo playback.");
FUN_102662e0(&DAT_104e4174,(int)"demo_pause",(int)FUN_100a2570,"Pauses demo playback.",0,
FUN_102664a0(&DAT_104e35d8,(int)"demo_pauseatservertick",&DAT_103256a0,0,
	"Pauses demo playback at server tick");
FUN_102662e0(&DAT_104e4108,(int)"demo_play",(int)FUN_1009e4a0,"Play a recorded demo file (.dem )."
FUN_102664a0(&DAT_104e34d0,(int)"demo_quitafterplayback",&DAT_103256a0,0,
	"Quits game after demo playback.");
FUN_102662e0(&DAT_104e40c0,(int)"demo_record",(int)FUN_100a25b0,"Record a demo.",0x20000,
FUN_102662e0(&DAT_104e40e4,(int)"demo_record_inc",(int)FUN_100a2620,"Record a demo incrementally."
FUN_102664a0(&DAT_104e3478,(int)"demo_recordcommands",&DAT_10324480,0x4000,
	"Record commands typed at console into .dem files.");
FUN_102662e0(&DAT_104e4198,(int)"demo_resume",(int)FUN_100a2670,"Resumes demo playback.",0,
FUN_102662e0(&DAT_104e3e34,(int)"demo_stop",(int)FUN_100a2680,"Finish recording demo.",0,
FUN_102662e0(&DAT_104e4204,(int)"demo_timescale",(int)FUN_100a26d0,"Sets demo replay speed.",0,
FUN_102662e0(&DAT_104e41bc,(int)"demo_togglepause",(int)FUN_100a2730,"Toggles demo playback.",0,
FUN_102662e0(&DAT_104e412c,(int)"timedemo",(int)FUN_1009e680,
	"Play a demo and report performance info.",0,FUN_100a27c0);
FUN_102662e0(&DAT_104e4150,(int)"timedemoquit",(int)FUN_1009e570,
	"Play a demo, report performance info, and then exit",0,FUN_100a2810);
FUN_10266380(&DAT_104e4384,(int)"demoui2",(int)FUN_100b00d0,
	"Show/hide the advanced demo player UI (demoui2).",0x20000,(undefined *)0x0);
FUN_10266380(&DAT_104e43cc,(int)"-demoui2",(int)FUN_100b0100,
	"Send the advanced demo player UI (demoui2) to background.",0x20000,(undefined *)0x0)
FUN_10266380(&DAT_104e43a8,(int)"+demoui2",(int)FUN_100b0120,
	"Bring the advanced demo player UI (demoui2) to foreground.",0x20000,(undefined *)0x0
FUN_102664a0(&DAT_104e4400,(int)"cl_entityreport",&DAT_103256a0,0x4000,
	"For debugging, draw entity states to console");
FUN_10266700(&DAT_104e4458,(int)"er_colwidth",&DAT_1033b8d8,0);
FUN_10266700(&DAT_104e4508,(int)"er_graphwidthfrac",&DAT_1032603c,0);
FUN_10266700(&DAT_104e44b0,(int)"er_maxname",&DAT_103286f4,0);
FUN_102664a0(&DAT_104e45b8,(int)"cl_flushentitypacket",&DAT_103256a0,0x4000,
	"For debugging. Force the engine to flush an entity packet.");
FUN_10266380(&DAT_104e4630,(int)"fogui",(int)FUN_100b3fd0,"Show/hide fog control UI.",0x20000,
FUN_102662e0(&DAT_104f2168,(int)&DAT_1033d71c,(int)FUN_100b91a0,"Draw a debug box.",0x4000,
FUN_102664a0(&DAT_104efbc8,(int)"cl_localnetworkbackdoor",&DAT_10324480,0,
	"Enable network optimizations for single player games.");
FUN_10266530(&DAT_104f2250,(int)"cl_cloud_settings",&DAT_10324484,0x10,
	"Cloud enabled from (from HKCU\\Software\\Valve\\Steam\\Apps\\appid\\Cloud)",
FUN_102664a0(&DAT_104efcd0,(int)"cl_connection_trouble_timeout",&DAT_10324484,0x10,
	"How long until we timeout on our network connection because of connectivity loss (-1 if no problem)"
FUN_102662e0(&DAT_104f22a8,(int)"cl_fullupdate",(int)FUN_100b9270,
	"Forces the server to send a full update packet",0x4000,(undefined *)0x0);
FUN_102664a0(&DAT_104efc20,(int)"cl_ignorepackets",&DAT_103256a0,0x4000,
	"Force client to ignore packets (for debugging).");
FUN_102664a0(&DAT_104f21f8,(int)"cl_language","english",0x200,"Language (from Steam API)");
FUN_102664a0(&DAT_104efc78,(int)"cl_playback_screenshots",&DAT_103256a0,0,
	"Allows the client to playback screenshot and jpeg commands in demos.");
FUN_102662e0(&DAT_104f22f0,(int)"cl_precacheinfo",(int)FUN_100b9290,"Show precache info (client)."
FUN_102664a0(&DAT_104f1e80,(int)"cl_retire_low_priority_lights",&DAT_103256a0,0,
	"Low priority dlights are replaced by high priority ones");
FUN_102664a0(&DAT_104f1f78,(int)"cl_screenshotname",&DAT_103236cf,0,"Custom Screenshot name");
FUN_102662e0(&DAT_104f21b0,(int)"cl_showents",(int)FUN_100b9300,"Dump entity list to console.",
FUN_102662e0(&DAT_104f218c,(int)"cl_view",(int)FUN_100b93d0,"Set the view entity index.",0x4000,
FUN_102662e0(&DAT_104f2314,(int)"con_min_severity",(int)FUN_100b9470,
	"Minimum severity level for messages sent to any logging channel: LS_MESSAGE=0, LS_WARNING=1, LS_ASSERT=2, LS_ERROR=3."
FUN_102662e0(&DAT_104f1f30,(int)"connect",(int)FUN_100b94a0,"Connect to specified server.",0x20000
FUN_102662e0(&DAT_104f1f54,(int)"connect_splitscreen",(int)FUN_100b9660,
	"Connect to specified server. With multiple players.",0xa0010,(undefined *)0x0);
FUN_102662e0(&DAT_104f1ff4,(int)"devshots_screenshot",(int)FUN_100b9800,
	"Used by the -makedevshots system to take a screenshot. For taking your own screenshots, use the \'screenshot\' command instead."
FUN_102664a0(&DAT_104f2110,(int)"fps_screenshot_frequency",&DAT_1032e794,0x4000,
	"While the fps is below the threshold we will dump a screen shot this often in seconds (i.e. 10 = screen shot every 10 seconds when under the given fps.)"
FUN_102664a0(&DAT_104f20b8,(int)"fps_screenshot_threshold",&DAT_10324484,0x4000,
	"Dump a screenshot when the FPS drops below the given value.");
FUN_102664a0(&DAT_104f2060,(int)"host_syncfps",&DAT_103256a0,2,
	"Synchronize real render time to host_framerate if possible.");
FUN_102662e0(&DAT_104f2018,(int)&DAT_1033d430,(int)FUN_100b9840,
	"Take a jpeg screenshot:  jpeg <filename> <quality 1-100>.",0x80000,(undefined *)0x0)
FUN_102664a0(&DAT_104f1e28,(int)"jpeg_quality",&DAT_1033cb28,0,"jpeg screenshot quality.");
FUN_10266700(&DAT_104f1ed8,(int)"net_earliertempents",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_104f203c,(int)&DAT_1033d6f8,(int)FUN_100b9940,"Issue an rcon command.",0x20000,
FUN_102662e0(&DAT_104f1fd0,(int)"screenshot",(int)FUN_100b9a40,"Take a screenshot.",0x40000000,
FUN_102662e0(&DAT_104f22cc,(int)"setinfo",(int)FUN_100b9a90,"Adds a new user info value",
FUN_102662e0(&DAT_104f21d4,(int)"startupmenu",(int)FUN_1021ff70,
	"Opens initial menu screen and loads the background bsp, but only if no other level is being loaded, and we\'re not in developer mode."
FUN_102664a0(&DAT_104efb18,(int)"sv_unlockedchapters",&DAT_10324480,0x80,
	"Highest unlocked game chapter.");
FUN_102664a0(&DAT_104efb70,(int)"tv_nochat",&DAT_103256a0,0x280,
	"Don\'t receive chat messages from other TacticalTV spectators");
FUN_102664a0(&DAT_104f2570,(int)"cl_showevents",&DAT_103256a0,0x4000,
	"Print event firing info in the console");
FUN_10266530(&DAT_104f25f0,(int)"rcon_address",&DAT_103236cf,0x20020000,
	"Address of remote server if sending unconnected rcon commands (format x.x.x.x:p) ",
FUN_102662e0(&DAT_104f28b4,(int)"remote_bug",(int)FUN_100bbce0,
	"Starts a bug report with data from the currently connected rcon machine",0,
FUN_102662e0(&DAT_104f266c,(int)"rpt_download_log",(int)FUN_100bbcf0,&DAT_103236cf,0x20010,
FUN_102662e0(&DAT_104f2648,(int)"rpt_screenshot",(int)FUN_100bbd00,&DAT_103236cf,0x20010,
FUN_102662e0(&DAT_104f2794,(int)"vprof_remote_start",(int)FUN_1021ff70,
	"Request a VProf data stream from the remote server (requires authentication)",0,
FUN_102662e0(&DAT_104f25c8,(int)"vprof_remote_stop",(int)FUN_1021ff70,
	"Stop an existing remote VProf data request",0,(undefined *)0x0);
FUN_10266380(&DAT_104f28f8,(int)"skyui",(int)FUN_100bc8e0,"Show/hide sky control UI.",0x20000,
FUN_102664a0(&DAT_104f2da0,(int)"mat_show_texture_memory_usage",&DAT_103256a0,0x5000,
	"Display the texture memory usage on the HUD.");
FUN_102664a0(&DAT_104f2bf8,(int)"mat_texture_list",&DAT_103256a0,0,
	"For debugging, show a list of used textures per frame");
FUN_102664a0(&DAT_104f2c98,(int)"mat_texture_list_all",&DAT_103256a0,0x1000,
	"If this is nonzero, then the texture list panel will show all currently-loaded textures."
FUN_102664a0(&DAT_104f2cf0,(int)"mat_texture_list_all_frames",&DAT_10325f28,0,
	"How many frames to sample texture memory for all textures.");
FUN_10266700(&DAT_104f2df8,(int)"mat_texture_list_exclude_editing",&DAT_103256a0,0);
FUN_10266380(&DAT_104f2c74,(int)"-mat_texture_list",(int)FUN_100bedc0,(undefined *)0x0,0,
FUN_10266380(&DAT_104f2c50,(int)"+mat_texture_list",(int)FUN_100c6230,(undefined *)0x0,0,
FUN_102662e0(&DAT_104f2e50,(int)"mat_texture_list_txlod",(int)FUN_100c62a0,
	"Adjust LOD of the last viewed texture +1 to inc resolution, -1 to dec resolution",
FUN_102664a0(&DAT_104f2d48,(int)"mat_texture_list_view",&DAT_10324480,0x1000,
	"If this is nonzero, then the texture list panel will render thumbnails of currently-loaded textures."
FUN_102662e0(&DAT_104f3150,(int)"asw_engine_finished_building_map",(int)FUN_100c9f50,
	"Notify engine that we\'ve finished building a map",0,(undefined *)0x0);
FUN_102664a0(&DAT_104f30a0,(int)"cl_allowdownload",&DAT_10324480,0x80,
	"Client downloads customization files");
FUN_102664a0(&DAT_104f30f8,(int)"cl_downloadfilter",&DAT_103417c8,0x80,
	"Determines which files can be downloaded from the server (all, none, nosounds)");
FUN_102664a0(&DAT_104f3048,(int)"cl_forcepreload",&DAT_103256a0,0x80,
	"Whether we should force preloading.");
FUN_102664a0(&DAT_104f2f98,(int)"cl_logofile","materials/vgui/logos/spray_bullseye.vtf",0x80,
	"Spraypoint logo decal.");
FUN_102664a0(&DAT_104f2ff0,(int)"cl_soundfile",&DAT_103236cf,0x80,"Jingle sound file.");
FUN_102664a0(&DAT_104f2f40,(int)"cl_timeout",&DAT_10341688,0x80,
	"After this many seconds without receiving a packet from the server, the client will disconnect itself"
FUN_10266380(&DAT_104f3358,(int)"colorcorrectionui",(int)FUN_100d8d80,
	"Show/hide the color correction tools UI.",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_104f32a8,(int)"mat_colcorrection_disableentities",&DAT_103256a0,0);
FUN_10266700(&DAT_104f3300,(int)"mat_colcorrection_editor",&DAT_103256a0,0);
FUN_10266700(&DAT_104f3250,(int)"mat_colorcorrection",&DAT_10324480,0x4000);
FUN_10266380(&DAT_104f337c,(int)"print_colorcorrection",(int)FUN_100d6050,
	"Display the color correction layer information.",0x4000,(undefined *)0x0);
FUN_10266380(&DAT_104f3a38,(int)"clear",(int)FUN_100da0c0,"Clear all console output.",0x20000,
FUN_102664a0(&DAT_104f37d0,(int)"con_drawnotify",&DAT_103256a0,0,
	"Disables drawing of notification area (for taking screenshots).");
FUN_102664a0(&DAT_104f3828,(int)"con_enable",&DAT_10324480,0x80,
	"Allows the console to be activated.");
FUN_102664a0(&DAT_104f3880,(int)"con_filter_enable",&DAT_103256a0,0x800000,
	"Filters console output based on the setting of con_filter_text. 1 filters completely, 2 displays filtered text brighter than other text."
FUN_102664a0(&DAT_104f38d8,(int)"con_filter_text",&DAT_103236cf,0x800000,
	"Text with which to filter console spew. Set con_filter_enable 1 or 2 to activate.");
FUN_102664a0(&DAT_104f3930,(int)"con_filter_text_out",&DAT_103236cf,0x800000,
	"Text with which to filter OUT of console spew. Set con_filter_enable 1 or 2 to activate."
FUN_10266660(&DAT_104f3670,(int)"con_logfile",&DAT_103236cf,0x80000,
	"Console output gets written to this file",0,0,0,0,(int)FUN_100db090);
FUN_102664a0(&DAT_104f3720,(int)"con_notifytime",&DAT_10348218,0x800000,
	"How long to display recent console text to the upper part of the game window");
FUN_102664a0(&DAT_104f3988,(int)"con_nprint_bgalpha",&DAT_10328720,0,
	"Con_NPrint background alpha.");
FUN_102664a0(&DAT_104f39e0,(int)"con_nprint_bgborder",&DAT_10332f1c,0,"Con_NPrint border size.");
FUN_102664a0(&DAT_104f3778,(int)"contimes",&DAT_10348218,0x800000,
	"Number of console lines to overlay for debugging.");
FUN_102664a0(&DAT_104f3618,(int)"con_timestamp",&DAT_103256a0,0,
	"Prefix console.log entries with timestamps");
FUN_102664a0(&DAT_104f36c8,(int)"con_trace",&DAT_103256a0,0x800000,
	"Print console text to low level printout.");
FUN_102662e0(&DAT_104f3aa4,(int)"log_color",(int)FUN_100da750,
	"Set the color of a logging channel.",0x20000,(undefined *)0x0);
FUN_10266380(&DAT_104f3a5c,(int)"log_dumpchannels",(int)FUN_100da770,
	"Dumps information about all logging channels.",0x20000,(undefined *)0x0);
FUN_102662e0(&DAT_104f3ac8,(int)"log_flags",(int)FUN_100daab0,
	"Set the flags on a logging channel.",0x20000,(undefined *)0x0);
FUN_102662e0(&DAT_104f3a80,(int)"log_level",(int)FUN_100dae20,
	"Set the spew level of a logging channel.",0x20000,(undefined *)0x0);
FUN_10266530(&DAT_104f3bb8,(int)"mat_leafvis",&DAT_103256a0,0x4000,
	"Draw wireframe of: [0] nothing, [1] current leaf, [2] entire vis cluster, or [3] entire PVS (see mat_leafvis_draw_mask for what does/doesn\'t get drawn)"
FUN_102664a0(&DAT_104f3cc0,(int)"mat_leafvis_draw_mask",&DAT_10325994,0,
	"A bitfield which affects leaf visibility debug rendering.  -1: show all, bit 0: render PVS-visible leafs, bit 1: render PVS- and frustum-visible leafs, bit 2: render frustum bounds, bit 3: render leaves out of PVS."
FUN_102664a0(&DAT_104f3d18,(int)"mat_leafvis_freeze",&DAT_103256a0,0,
	"If set to 1, uses the last known leaf visibility data for visualization.  If set to 0, updates based on camera movement."
FUN_102664a0(&DAT_104f3c10,(int)"mat_leafvis_update_every_frame",&DAT_103256a0,0,
	"Updates leafvis debug render every frame (expensive)");
FUN_10266530(&DAT_104f3d70,(int)"r_drawclipbrushes",&DAT_103256a0,0x4000,
	"Draw clip brushes (red=NPC+player, pink=player, purple=NPC)",(int)FUN_100dc5b0);
FUN_102664a0(&DAT_104f3c68,(int)"r_visambient",&DAT_103256a0,0,
	"Draw leaf ambient lighting samples.  Needs mat_leafvis 1 to work");
FUN_102664a0(&DAT_104f3dd8,(int)"enable_debug_overlays",&DAT_10324480,0x4004,
	"Enable rendering of debug overlays");
FUN_10266700(&DAT_104f4a98,(int)"dbg_demofile",&DAT_103256a0,0);
FUN_10266380(&DAT_104f4f30,(int)"devshots_nextmap",(int)FUN_100e4220,
	"Used by the devshots system to go to the next map in the devshots maplist.",0,
FUN_10266700(&DAT_104f6188,(int)"disp_dynamic",&DAT_103256a0,0);
FUN_10266700(&DAT_104f62d0,(int)"r_drawlightinfo",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_104f6278,(int)"r_drawlights",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_105f6488,(int)"mat_defaultlightmap",&DAT_10324480,0,
	"Default brightness for lightmaps where none have been created in the level.");
FUN_10266700(&DAT_105f6380,(int)"r_avglightmap",&DAT_103256a0,0x804000);
FUN_10266700(&DAT_105f6430,(int)"r_dlightsenable",&DAT_10324480,0x804000);
FUN_10266700(&DAT_105f63d8,(int)"r_maxdlights",&DAT_1034a2f0,0);
FUN_102662e0(&DAT_105f76ac,(int)"mat_crosshair",(int)FUN_100f2c90,
	"Display the name of the material under the crosshair",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_105f76d0,(int)"mat_crosshair_edit",(int)FUN_100f2cc0,
	"open the material under the crosshair in the editor defined by mat_crosshair_edit_editor"
FUN_102662e0(&DAT_105f76f4,(int)"mat_crosshair_explorer",(int)FUN_100f2dc0,
	"open the material under the crosshair in explorer and highlight the vmt file",0x4000
FUN_102662e0(&DAT_105f773c,(int)"mat_crosshair_printmaterial",(int)FUN_100f2eb0,
	"print the material under the crosshair",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_105f7718,(int)"mat_crosshair_reloadmaterial",(int)FUN_100f2ef0,
	"reload the material under the crosshair",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_105f7688,(int)"mat_edit",(int)FUN_100f2f30,
	"Bring up the material under the crosshair in the editor",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_105f77f0,(int)"r_visualizelighttraces",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f7848,(int)"r_visualizelighttracesshowfulltrace",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f7798,(int)"r_visualizetraces",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f7cb8,(int)"r_dynamiclighting",&DAT_10324480,0x4000);
FUN_10266700(&DAT_105f7fa0,(int)"r_redownloadallpaintmaps",&DAT_103256a0,2);
FUN_10266380(&DAT_105f8028,(int)"linefile",(int)FUN_10130510,"Parses map leak data from .lin file"
FUN_102662e0(&DAT_105f804c,(int)"r_cleardecals",(int)FUN_100f7a10,
	"Usage r_cleardecals <permanent>.",0x40000000,(undefined *)0x0);
FUN_10266380(&DAT_105f8004,(int)"timerefresh",(int)FUN_100f7840,"Profile the renderer.",0x4000,
FUN_10266700(&DAT_105f8860,(int)"fast_fogvolume",&DAT_103256a0,0);
FUN_10266700(&DAT_105f84e8,(int)"fog_enable_water_fog",&DAT_10324480,0x4000);
FUN_10266700(&DAT_105f8388,(int)"mat_forcedynamic",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f8700,(int)"mat_surfaceid",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f8758,(int)"mat_surfacemat",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_105f86a0,(int)"r_csm_fast_path",&DAT_10324480,2,
	"Use shadow fast path for CSM rendering - minimize number of draw call");
FUN_102664a0(&DAT_105f8648,(int)"r_csm_static_vb",&DAT_10324480,0,
	"Use a precomputed static VB for CSM rendering");
FUN_102664a0(&DAT_105f8490,(int)"r_drawfuncdetail",&DAT_10324480,0x4000,"Render func_detail");
FUN_102664a0(&DAT_105f83e0,(int)"r_drawleaf",&DAT_10324484,0x4000,"Draw the specified leaf.");
FUN_10266700(&DAT_105f8330,(int)"r_drawtranslucentworld",&DAT_10324480,0x4000);
FUN_102664a0(&DAT_105f8438,(int)"r_drawworld",&DAT_10324480,0x4000,"Render the world.");
FUN_102664a0(&DAT_105f8540,(int)"r_fastzreject",&DAT_103256a0,0,
	"Activate/deactivates a fast z-setting algorithm to take advantage of hardware with fast z reject. Use -1 to default to hardware settings"
FUN_102664a0(&DAT_105f8598,(int)"r_fastzrejectdisp",&DAT_103256a0,0,
	"Activates/deactivates fast z rejection on displacements (360 only). Only active when r_fastzreject is on."
FUN_10266700(&DAT_105f87b0,(int)"r_flashlightrendermodels",&DAT_10324480,0);
FUN_10266700(&DAT_105f8808,(int)"r_frustumcullworld",&DAT_10324480,0);
FUN_102664a0(&DAT_105f8198,(int)"r_hidepaintedsurfaces",&DAT_103256a0,0,
	"If enabled, hides all surfaces which have been painted.");
FUN_102664a0(&DAT_105f85f0,(int)"r_skybox_draw_last",&DAT_103256a0,0,
	"Draws skybox after world brush geometry, rather than before.");
FUN_10266700(&DAT_105f8920,(int)"miniprofiler_dump",&DAT_103256a0,0);
FUN_10266700(&DAT_105f8aa8,(int)"mat_force_singlepass_ubersky",&DAT_103256a0,0);
FUN_10266700(&DAT_105f89f8,(int)"r_drawskybox",&DAT_10324480,0x4000);
FUN_102664a0(&DAT_105f8a50,(int)"sv_ubersky",&DAT_103256a0,0x2000,
	"This map should use procedural Sky in high spec.");
FUN_10266700(&DAT_105f9310,(int)"mat_softwareskin",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_105f9850,(int)"r_ambientboost",&DAT_10324480,0,
	"Set to boost ambient term if it is totally swamped by local lights");
FUN_102664a0(&DAT_105f9958,(int)"r_ambientfactor",&DAT_10332f1c,0,
	"Boost ambient cube by no more than this factor");
FUN_102664a0(&DAT_105f9900,(int)"r_ambientfraction",&DAT_1032603c,0x4000,
	"Fraction of direct lighting used to boost lighting when model requests");
FUN_102664a0(&DAT_105f98a8,(int)"r_ambientmin",&DAT_1034bc44,0,
	"Threshold above which ambient cube will not boost (i.e. it\'s already sufficiently bright"
FUN_102664a0(&DAT_105f8f48,(int)"r_debugrandomstaticlighting",&DAT_103256a0,0x4000,
	"Set to 1 to randomize static lighting for debugging.  Must restart for change to take affect."
FUN_102664a0(&DAT_105f8ec0,(int)"r_decalstaticprops",&DAT_10324480,0,"Decal static props test");
FUN_10266700(&DAT_105f9470,(int)"r_drawentities",&DAT_10324480,0x4000);
FUN_102664a0(&DAT_105f9a08,(int)"r_drawlightcache",&DAT_103256a0,0x4000,
	"0: off\n1: draw light cache entries\n2: draw rays\n");
FUN_10266700(&DAT_105f8c58,(int)"r_DrawModelLightOrigin",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f8b50,(int)"r_drawmodelstatsoverlay",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f8ba8,(int)"r_drawmodelstatsoverlaydistance",&DAT_10325be0,0x4000);
FUN_10266700(&DAT_105f8c00,(int)"r_drawmodelstatsoverlayfilter",&DAT_10324484,0x4000);
FUN_102664a0(&DAT_105f9b10,(int)"r_drawmodelstatsoverlaymax",&DAT_1034bfb4,0x80,
	"time in milliseconds beyond which a model overlay is fully red in r_drawmodelstatsoverlay 2"
FUN_102664a0(&DAT_105f9ab8,(int)"r_drawmodelstatsoverlaymin",&DAT_10325b0c,0x80,
	"time in milliseconds that a model must take to render before showing an overlay in r_drawmodelstatsoverlay 2"
FUN_10266700(&DAT_105f8d08,(int)"r_entity",&DAT_10324484,0x4002);
FUN_102664a0(&DAT_105f8e10,(int)"r_eyeglintlodpixels",&DAT_103265bc,0,
	"The number of pixels wide an eyeball has to be before rendering an eyeglint.  Is a floating point value."
FUN_10266700(&DAT_105f9158,(int)"r_eyemove",&DAT_10324480,0x80);
FUN_10266700(&DAT_105f9520,(int)"r_eyes",&DAT_10324480,0);
FUN_10266700(&DAT_105f91b0,(int)"r_eyeshift_x",&DAT_103256a0,0x80);
FUN_10266700(&DAT_105f9208,(int)"r_eyeshift_y",&DAT_103256a0,0x80);
FUN_10266700(&DAT_105f9260,(int)"r_eyeshift_z",&DAT_103256a0,0x80);
FUN_10266700(&DAT_105f92b8,(int)"r_eyesize",&DAT_103256a0,0x80);
FUN_10266700(&DAT_105f94c8,(int)"r_flex",&DAT_10324480,0);
FUN_10266380(&DAT_105f8f18,(int)"r_flushlod",(int)FUN_1010af20,"Flush and reload LODs.",0,
FUN_102664a0(&DAT_105f96d8,(int)"r_ignoreStaticColorChecksum",&DAT_10324480,0x4002,
	"0 - validate vhvhdr and studiohdr checksum, 1 - default, ignore checksum (useful if iterating physics model only for example)"
FUN_10266700(&DAT_105f8ff8,(int)"r_itemblinkmax",&DAT_1034b7e0,0x4000);
FUN_10266700(&DAT_105f9050,(int)"r_itemblinkrate",&DAT_1034b7f4,0x4000);
FUN_102664a0(&DAT_105f8d60,(int)"r_lightaverage",&DAT_10324480,0,
	"Activates/deactivate light averaging");
FUN_102664a0(&DAT_105f99b0,(int)"r_lightcachemodel",&DAT_10324484,0x4000,&DAT_103236cf);
FUN_102664a0(&DAT_105f8db8,(int)"r_lightinterp",&DAT_10332f1c,0x4000,
	"Controls the speed of light interpolation, 0 turns off interpolation");
FUN_10266530(&DAT_105f8cb0,(int)"r_lod",&DAT_10324484,0,&DAT_103236cf,(int)FUN_10105900);
FUN_10266700(&DAT_105f9628,(int)"r_maxmodeldecal",&DAT_10328720,0);
FUN_102664a0(&DAT_105f9a60,(int)"r_modelAmbientMin",&DAT_10326010,0x4000,
	"Minimum value for the ambient lighting on dynamic models with more than one bone (like players and their guns)."
FUN_10266700(&DAT_105f95d0,(int)"r_modelwireframedecal",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f9368,(int)"r_nohw",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f93c0,(int)"r_nosw",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_105f8fa0,(int)"r_proplightingfromdisk",&DAT_10324480,0,
	"0=Off, 1=On, 2=Show Errors");
FUN_102664a0(&DAT_105f90a8,(int)"r_proplightingpooling",&DAT_1034b88c,0x4000,
	"0 - off, 1 - static prop color meshes are allocated from a single shared vertex buffer (on hardware that supports stream offset)"
FUN_10266660(&DAT_105f8e68,(int)"r_rootlod",&DAT_103256a0,0x804002,"Root LOD",1,0,1,0x40e00000,
FUN_10266700(&DAT_105f9100,(int)"r_showenvcubemap",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f9578,(int)"r_skin",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f9680,(int)"r_slowpathwireframe",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105f9b68,(int)"r_staticprop_lod",&DAT_10324484,2);
FUN_10266700(&DAT_105f9418,(int)"r_teeth",&DAT_10324480,0);
FUN_10266700(&DAT_105fac48,(int)"mat_bumpbasis",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_105fa90c,(int)"mat_configcurrent",(int)FUN_10112830,
	"show the current video control panel config for the material system",0,
FUN_102662e0(&DAT_105fb360,(int)"mat_debug",(int)FUN_10112850,
	"Activates debugging spew for a specific material.",0x4002,(undefined *)0x0);
FUN_10266700(&DAT_105fa850,(int)"mat_debugalttab",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105fb1c8,(int)"mat_depthbias_normal",&DAT_1034c850,0x4000);
FUN_102662e0(&DAT_105fb2f4,(int)"mat_enable_vrmode",(int)FUN_10112890,
	"Switches the material system to VR mode (after restart)",0,(undefined *)0x0);
FUN_10266700(&DAT_105faca0,(int)"mat_envmapsize",&DAT_103261e0,0);
FUN_10266700(&DAT_105facf8,(int)"mat_envmaptgasize",&DAT_1034c674,0);
FUN_102664a0(&DAT_105fada8,(int)"mat_fastspecular",&DAT_10324480,0,
	"Enable/Disable specularity for visual testing.  Will not reload materials and will not affect perf."
FUN_10266700(&DAT_105fae00,(int)"mat_fullbright",&DAT_103256a0,0x4000);
FUN_10266530(&DAT_105fb278,(int)"mat_hdr_level",&DAT_10325f28,0x12,
	"Set to 0 for no HDR, 1 for LDR+bloom on HDR maps, and 2 for full HDR on HDR maps.",
FUN_102662e0(&DAT_105fb3cc,(int)"mat_info",(int)FUN_101129b0,"Shows material system info",0,
FUN_10266700(&DAT_105fad50,(int)"mat_levelflush",&DAT_10324480,0);
FUN_10266700(&DAT_105fab98,(int)"mat_luxels",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105fb408,(int)"mat_max_worldmesh_vertices","65536",0);
FUN_10266700(&DAT_105fa7f8,(int)"mat_maxframelatency",&DAT_10324480,0);
FUN_102665c0(&DAT_105fae58,(int)"mat_monitorgamma",&DAT_1034c760,0x1000080,
	"monitor gamma (typically 2.2 for CRT and 1.7 for LCD)",1,0x3fcccccd,1,0x40266666);
FUN_102664a0(&DAT_105fafb8,(int)"mat_monitorgamma_tv_enabled",&DAT_103256a0,0x1000080,
FUN_102665c0(&DAT_105faf60,(int)"mat_monitorgamma_tv_exp",&DAT_10326e6c,0,&DAT_103236cf,1,
FUN_10266700(&DAT_105faf08,(int)"mat_monitorgamma_tv_range_max",&DAT_1034c79c,0);
FUN_10266700(&DAT_105faeb0,(int)"mat_monitorgamma_tv_range_min",&DAT_1034c778,0);
FUN_10266700(&DAT_105fb118,(int)"mat_motion_blur_enabled",&DAT_103256a0,0);
FUN_10266700(&DAT_105faae8,(int)"mat_norendering",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105fabf0,(int)"mat_normals",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_105fb3a8,(int)"mat_reset_rendertargets",(int)FUN_101129c0,
	"Resets all the render targets",0,(undefined *)0x0);
FUN_10266530(&DAT_105fb220,(int)"mat_resolveFullFrameDepth",&DAT_103256a0,0x4000,
	"Enable depth resolve to a texture. 0=disable, 1=enable via resolve tricks if supported in hw, otherwise disable, 2=force extra depth only pass"
FUN_102662e0(&DAT_105fb318,(int)"mat_savechanges",(int)FUN_10112a20,
	"saves current video configuration to the registry",0,(undefined *)0x0);
FUN_102662e0(&DAT_105fb2d0,(int)"mat_setvideomode",(int)FUN_10112a50,
	"sets the width, height, windowed state of the material system",0,(undefined *)0x0);
FUN_10266700(&DAT_105fa7a0,(int)"mat_shadowstate",&DAT_10324480,0);
FUN_102662e0(&DAT_105fb384,(int)"mat_suppress",(int)FUN_10112b10,
	"Suppress a material from drawing",0x4002,(undefined *)0x0);
FUN_102662e0(&DAT_105fb33c,(int)"mat_updateconvars",(int)FUN_10112b50,
	"updates the video config convars",0,(undefined *)0x0);
FUN_10266700(&DAT_105fb170,(int)"mat_vrmode_adapter",&DAT_10324484,0);
FUN_10266700(&DAT_105fab40,(int)"mat_wireframe",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105fa988,(int)"r_decals",&DAT_1034c5f0,0);
FUN_102664a0(&DAT_105fb010,(int)"r_drawbrushmodels",&DAT_10324480,0x4000,
	"Render brush models. 0=Off, 1=Normal, 2=Wireframe");
FUN_10266700(&DAT_105faa90,(int)"r_dynamic",&DAT_10324480,0x80000);
FUN_10266700(&DAT_105fb0c0,(int)"r_flashlightdepthtexture",&DAT_10324480,0);
FUN_10266700(&DAT_105fa9e0,(int)"r_lightmap",&DAT_10324484,0x804000);
FUN_10266700(&DAT_105faa38,(int)"r_lightstyle",&DAT_10324484,0x804000);
FUN_10266700(&DAT_105fa930,(int)"r_norefresh",&DAT_103256a0,0);
FUN_10266700(&DAT_105fb068,(int)"r_shadowrendertotexture",&DAT_103256a0,0);
FUN_10266700(&DAT_105fb6c8,(int)"mat_excludetextures",&DAT_103256a0,0);
FUN_10266700(&DAT_105fb720,(int)"mat_glidnarb",&DAT_103256a0,0);
FUN_10266700(&DAT_105fb5c0,(int)"mat_loadtextures",&DAT_10324480,0x4000);
FUN_102662e0(&DAT_105fba54,(int)"mem_vcollide",(int)FUN_1011cbd0,
	"Dumps the memory used by vcollides",0,(undefined *)0x0);
FUN_102662e0(&DAT_105fbd30,(int)"mod_combiner_info",(int)FUN_1011cbe0,
	"debug spew for Combiner Info",0,(undefined *)0x0);
FUN_10266700(&DAT_105fb930,(int)"mod_dynamicloadpause",&DAT_103256a0,0x24010);
FUN_10266700(&DAT_105fb9e0,(int)"mod_dynamicloadspew",&DAT_103256a0,0x20010);
FUN_10266700(&DAT_105fb988,(int)"mod_dynamicloadthrottle",&DAT_103256a0,0x24010);
FUN_102662e0(&DAT_105fbd0c,(int)"mod_dynamicmodeldebug",(int)FUN_1011cbf0,
	"debug spew for dynamic model loading",0x20010,(undefined *)0x0);
FUN_10266700(&DAT_105fb8d8,(int)"mod_dynamicunloadtex",&DAT_10324480,0x20010);
FUN_10266700(&DAT_105fb880,(int)"mod_dynamicunloadtime",&DAT_1034d7d4,0x20010);
FUN_102664a0(&DAT_105fb670,(int)"mod_forcetouchdata",&DAT_10324480,0,
	"Forces all model file data into cache on model load.");
FUN_102664a0(&DAT_105fb618,(int)"mod_touchalldata",&DAT_10324480,0,
	"Touch model data during level startup");
FUN_10266700(&DAT_105fb7d0,(int)"r_hunkalloclightmaps",&DAT_10324480,0);
FUN_10266700(&DAT_105fb828,(int)"r_keepstyledlightmapsonly",&DAT_103256a0,0);
FUN_10266700(&DAT_105fb778,(int)"r_unloadlightmaps",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_105fbce8,(int)"vx_model_list",(int)FUN_1011cc00,"Dump models to VXConsole",0,
FUN_102664a0(&DAT_105fcd58,(int)"r_occludeemaxarea",&DAT_103256a0,0,
	"Prevents occlusion testing for entities that take up more than X% of the screen. 0 means use whatever the level said to use."
FUN_102664a0(&DAT_105fdad0,(int)"r_occluderminarea",&DAT_103256a0,0,
	"Prevents this occluder from being used if it takes up less than X% of the screen. 0 means use whatever the level said to use."
FUN_102664a0(&DAT_105fcd00,(int)"r_occludermincount",&DAT_103256a0,0,
	"At least this many occluders will be used, no matter how big they are.");
FUN_102664a0(&DAT_105fda60,(int)"r_occlusion",&DAT_10324480,0,
	"Activate/deactivate the occlusion system.");
FUN_102664a0(&DAT_105fdb28,(int)"r_occlusionspew",&DAT_103256a0,0x4000,
	"Activate/deactivates spew about what the occlusion system is doing.");
FUN_102664a0(&DAT_105fdb80,(int)"r_visocclusion",&DAT_103256a0,0x4000,
	"Activate/deactivate wireframe rendering of what the occlusion system is doing.");
FUN_10266700(&DAT_105ff688,(int)"r_overlayfadeenable",&DAT_103256a0,0);
FUN_10266700(&DAT_105ff738,(int)"r_overlayfademax",&DAT_1032e834,0);
FUN_10266700(&DAT_105ff6e0,(int)"r_overlayfademin",&DAT_1034f188,0);
FUN_10266700(&DAT_105ff630,(int)"r_overlaywireframe",&DAT_103256a0,0);
FUN_10266700(&DAT_105ff580,(int)"r_renderoverlaybatch",&DAT_10324480,2);
FUN_10266700(&DAT_105ff5d8,(int)"r_renderoverlayfragment",&DAT_10324480,0);
FUN_10266700(&DAT_105ff928,(int)"r_ClipAreaFrustums",&DAT_10324480,0x4000);
FUN_10266700(&DAT_105ff878,(int)"r_ClipAreaPortals",&DAT_10324480,0x4000);
FUN_10266700(&DAT_105ff8d0,(int)"r_DrawPortals",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_105ffab0,(int)"r_ShowViewerArea",&DAT_103256a0,0);
FUN_10266700(&DAT_105ffa00,(int)"r_portalscloseall",&DAT_103256a0,0);
FUN_102664a0(&DAT_105ffa58,(int)"r_portalsopenall",&DAT_103256a0,0x4000,"Open all portals");
FUN_10266700(&DAT_105ff9a8,(int)"r_snapportal",&DAT_10324484,0);
FUN_10266700(&DAT_10605400,(int)"r_decal_cover_count",&DAT_1032597c,0);
FUN_10266700(&DAT_106053a8,(int)"r_decal_overlap_area",&DAT_1032ecd0,0);
FUN_10266700(&DAT_10605350,(int)"r_decal_overlap_count",&DAT_10325994,0);
FUN_102664a0(&DAT_10625768,(int)"r_drawbatchdecals",&DAT_10324480,0,"Render decals batched.");
FUN_102664a0(&DAT_10625710,(int)"r_drawdecals",&DAT_10324480,0x4000,"Render decals.");
FUN_10266700(&DAT_10625608,(int)"r_dscale_basefov",&DAT_1033cb28,0x4000);
FUN_10266700(&DAT_106255b0,(int)"r_dscale_fardist",&DAT_1032e834,0x4000);
FUN_10266700(&DAT_10625558,(int)"r_dscale_farscale",&DAT_1032597c,0x4000);
FUN_10266700(&DAT_10625500,(int)"r_dscale_neardist",&DAT_1033b8d8,0x4000);
FUN_10266700(&DAT_10605488,(int)"r_dscale_nearscale",&DAT_10324480,0x4000);
FUN_10266380(&DAT_106257c0,(int)"r_printdecalinfo",(int)FUN_101301c0,(undefined *)0x0,0,
FUN_10266700(&DAT_10625d78,(int)"r_flashlight_always_cull_for_single_pass",&DAT_103256a0,0);
FUN_10266700(&DAT_10639ff0,(int)"r_flashlightclip",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_10625cc8,(int)"r_flashlightculldepth",&DAT_10324480,0);
FUN_10266700(&DAT_1063a048,(int)"r_flashlightdrawclip",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_10625b10,(int)"r_flashlightdrawdepth",&DAT_103256a0,0);
FUN_10266700(&DAT_10625b68,(int)"r_flashlightdrawdepthres",&DAT_1034f87c,0);
FUN_10266700(&DAT_10625a08,(int)"r_flashlightdrawsweptbbox",&DAT_103256a0,0);
FUN_10266700(&DAT_10625a60,(int)"r_flashlightnodraw",&DAT_103256a0,0);
FUN_10266700(&DAT_10625c70,(int)"r_flashlightrender",&DAT_10324480,0);
FUN_10266700(&DAT_10625c18,(int)"r_flashlightrendermodels",&DAT_10324480,0);
FUN_10266700(&DAT_10625bc0,(int)"r_flashlightrenderworld",&DAT_10324480,0);
FUN_10266700(&DAT_1063a0a0,(int)"r_flashlightscissor",&DAT_103256a0,0x800000);
FUN_10266700(&DAT_10625ab8,(int)"r_flashlightupdatedepth",&DAT_10324480,0);
FUN_10266700(&DAT_106259b0,(int)"r_shadowids",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_10625900,(int)"r_shadows",&DAT_10324480,0);
FUN_10266700(&DAT_10625958,(int)"r_shadows_gamecontrol",&DAT_10324484,0x4000);
FUN_10266700(&DAT_10625d20,(int)"r_threaded_shadow_clip",&DAT_103256a0,0);
FUN_10266700(&DAT_1063b6f0,(int)"r_brush_queue_mode",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_1063b778,(int)"net_megasnapshot",&DAT_10324480,0);
FUN_10266700(&DAT_1063b828,(int)"sv_multiplayer_sounds",&DAT_10332ec8,0);
FUN_10266700(&DAT_1063b7d0,(int)"sv_multiplayer_maxtempentities",&DAT_1034a2f0,0);
FUN_10266700(&DAT_1063bc40,(int)"net_showreliablesounds",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_1063bbe8,(int)"ss_voice_hearpartner",&DAT_103256a0,0,
	"Route voice between splitscreen players on same system.");
FUN_102664a0(&DAT_1063bae0,(int)"sv_allowdownload",&DAT_10324480,0,
	"Allow clients to download files");
FUN_102664a0(&DAT_1063bb38,(int)"sv_allowupload",&DAT_10324480,0,
	"Allow clients to upload customizations files");
FUN_102664a0(&DAT_1063bcf0,(int)"sv_extra_client_connect_time",&DAT_1035187c,0,
	"Seconds after client connect during which extra frames are buffered to prevent non-delta\'d update"
FUN_10266700(&DAT_1063bc98,(int)"sv_maxclientframes",&DAT_103261e0,0);
FUN_102665c0(&DAT_1063b928,(int)"sv_maxrate",&DAT_103256a0,0x82000,
	"Max bandwidth rate allowed on server, 0 == unlimited",1,0,1,0x47fa0000);
FUN_102664a0(&DAT_1063b9d8,(int)"sv_maxupdaterate",&DAT_10351338,0x2000,
	"Maximum updates per second that the server will allow");
FUN_102665c0(&DAT_1063b980,(int)"sv_minrate",&DAT_103512ec,0x82000,
	"Min bandwidth rate allowed on server, 0 == unlimited",1,0,1,0x47fa0000);
FUN_102664a0(&DAT_1063ba30,(int)"sv_minupdaterate",&DAT_1032e794,0x2000,
	"Minimum updates per second that the server will allow");
FUN_102664a0(&DAT_1063bb90,(int)"sv_sendtables",&DAT_103256a0,2,
	"Force full sendtable sending path.");
FUN_10266700(&DAT_1063bd48,(int)"sv_sound_discardextraunreliable",&DAT_10324480,0);
FUN_102664a0(&DAT_1063ba88,(int)"sv_stressbots",&DAT_103256a0,2,
	"If set to 1, the server calculates data and fills packets to bots. Used for perf testing."
FUN_102664a0(&DAT_1063b8d0,(int)"sv_timeout",&DAT_10351260,0,
	"After this many seconds without a message from a client, the client is dropped");
FUN_102664a0(&DAT_1063bdf8,(int)"sv_deltaprint",&DAT_103256a0,0,
	"Print accumulated CalcDelta profiling data (only if sv_deltatime is on)");
FUN_102664a0(&DAT_1063bda0,(int)"sv_deltatime",&DAT_103256a0,0,
	"Enable profiling of CalcDelta calls");
FUN_102662e0(&DAT_1063bed0,(int)"addip",(int)FUN_10146480,"Add an IP address to the ban list.",0,
FUN_102662e0(&DAT_1063c014,(int)"banid",(int)FUN_10146c30,"Add a user ID to the ban list.",0,
FUN_102662e0(&DAT_1063bef4,(int)"banip",(int)FUN_10146480,"Add an IP address to the ban list.",0,
FUN_102662e0(&DAT_1063bff0,(int)"listid",(int)FUN_10147130,"Lists banned users.",0,
FUN_102662e0(&DAT_1063bf3c,(int)"listip",(int)FUN_101471e0,"List IP addresses on the ban list.",0,
FUN_102662e0(&DAT_1063bfa8,(int)"removeallids",(int)FUN_101472d0,
	"Remove all user IDs from the ban list.",0,(undefined *)0x0);
FUN_102662e0(&DAT_1063bfcc,(int)"removeid",(int)FUN_101472f0,"Remove a user ID from the ban list."
FUN_102662e0(&DAT_1063bf18,(int)"removeip",(int)FUN_10147600,
	"Remove an IP address from the ban list.",0,(undefined *)0x0);
FUN_102664a0(&DAT_1063be50,(int)"sv_filterban",&DAT_10324480,0,"Set packet filtering by IP mode");
FUN_102662e0(&DAT_1063bf84,(int)"writeid",(int)FUN_101478c0,
	"Writes a list of permanently-banned user IDs to banned_user.cfg.",0,(undefined *)0x0
FUN_102662e0(&DAT_1063bf60,(int)"writeip",(int)FUN_101479c0,"Save the ban list to banned_ip.cfg.",
FUN_102664a0(&DAT_1063c070,(int)"sv_creationtickcheck",&DAT_10324480,0x4002,
	"Do extended check for encoding of timestamps against tickcount");
FUN_102664a0(&DAT_10640290,(int)"sv_logblocks",&DAT_103256a0,0,
	"If true when log when a query is blocked (can cause very large log files)");
FUN_102664a0(&DAT_10640188,(int)"sv_max_queries_sec",&DAT_103527b4,0,
	"Maximum queries per second to respond to from a single IP address.");
FUN_102664a0(&DAT_106401e0,(int)"sv_max_queries_sec_global",&DAT_1032fce4,0,
	"Maximum queries per second to respond to from anywhere.");
FUN_102664a0(&DAT_10640238,(int)"sv_max_queries_window",&DAT_10341688,0,
	"Window over which to average queries per second averages.");
FUN_102662e0(&DAT_10640598,(int)&DAT_1032ca24,(int)FUN_1014aaf0,
	"Enables logging to file, console, and udp < on | off >.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106405bc,(int)"logaddress_add",(int)FUN_1014ace0,
	"Set address and port for remote host <ip:port>.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10640604,(int)"logaddress_del",(int)FUN_1014ae50,
	"Remove address and port for remote host <ip:port>.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106405e0,(int)"logaddress_delall",(int)FUN_1014afc0,
	"Remove all udp addresses being logged to",0,(undefined *)0x0);
FUN_102662e0(&DAT_10640628,(int)"logaddress_list",(int)FUN_1014aff0,
	"List all addresses currently being used by logaddress.",0,(undefined *)0x0);
FUN_102664a0(&DAT_10640448,(int)"sv_log_onefile",&DAT_103256a0,0x80,
	"Log server information to only one file.");
FUN_102664a0(&DAT_106404a0,(int)"sv_logbans",&DAT_103256a0,0x80,
	"Log server bans in the server logs.");
FUN_102664a0(&DAT_106403f0,(int)"sv_logecho",&DAT_103256a0,0x80,
	"Echo log information to the console.");
FUN_102664a0(&DAT_10640340,(int)"sv_logfile",&DAT_10324480,0x80,
	"Log server information in the log file.");
FUN_102664a0(&DAT_106404f8,(int)"sv_logfilecompress",&DAT_10324480,0x80,
	"Gzip compress logfile and rename to logfilename.log.gz on close.");
FUN_102664a0(&DAT_10640398,(int)"sv_logflush",&DAT_103256a0,0x80,
	"Flush the log file to disk on each write (slow).");
FUN_102664a0(&DAT_106402e8,(int)"sv_logsdir",&DAT_1035295c,0x80,
	"Folder in the game directory where server logs will be stored.");
FUN_102664a0(&DAT_10641030,(int)"host_flush_threshold",&DAT_103536e4,0x80000,
	"Memory threshold below which the host should flush caches between server instances")
FUN_102662e0(&DAT_10663af8,(int)"maxplayers",(int)FUN_1014ecd0,
	"Change the maximum number of players allowed on this server.",0,(undefined *)0x0);
FUN_102664a0(&DAT_10663638,(int)"sv_cacheencodedents",&DAT_10324480,0,
	"If set to 1, does an optimization to prevent extra SendTable_Encode calls.");
FUN_10266530(&DAT_106634d8,(int)"sv_cheats",&DAT_103256a0,0x82100,"Allow cheats on server",
FUN_10266700(&DAT_106633d0,(int)"sv_cheats_flagged",&DAT_103256a0,0x2012);
FUN_102664a0(&DAT_106638f8,(int)"sv_client_cmdrate_difference",&DAT_10332ec8,0x2000,
	"cl_cmdrate is moved to within sv_client_cmdrate_difference units of cl_updaterate before it is clamped between sv_mincmdrate and sv_maxcmdrate."
FUN_102664a0(&DAT_106639a8,(int)"sv_client_max_interp_ratio",&DAT_10332f1c,0x2000,
	"This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected). If sv_client_min_interp_ratio is -1, then this cvar has no effect."
FUN_102664a0(&DAT_10663950,(int)"sv_client_min_interp_ratio",&DAT_10324480,0x2000,
	"This can be used to limit the value of cl_interp_ratio for connected clients (only while they are connected).\n              -1 = let clients set cl_interp_ratio to anything\n any other value = set minimum value for cl_interp_ratio"
FUN_102664a0(&DAT_10663a00,(int)"sv_client_predict",&DAT_10324480,0x2000,
	"This can be used to force the value of cl_predict for connected clients (only while they are connected).\n   -1 = let clients set cl_predict to anything\n    0 = force cl_predict to 0\n    1 = force cl_predict to 1"
FUN_102664a0(&DAT_10663798,(int)"sv_consistency",&DAT_103256a0,0x82000,
	"Whether the server enforces file consistency for critical files");
FUN_102664a0(&DAT_106635e0,(int)"sv_contact",&DAT_103236cf,0x80100,
	"Contact email for server sysop");
FUN_102664a0(&DAT_10663740,(int)"sv_downloadurl",&DAT_103236cf,0x82000,
	"Location from which clients can download missing files");
FUN_102664a0(&DAT_10640f28,(int)"sv_hibernate_ms",&DAT_10332ec8,0x80000,
	"# of milliseconds to sleep per frame while hibernating");
FUN_102664a0(&DAT_10640f80,(int)"sv_hibernate_ms_vgui",&DAT_10332ec8,0x80000,
	"# of milliseconds to sleep per frame while hibernating but running the vgui dedicated server frontend"
FUN_102664a0(&DAT_10640fd8,(int)"sv_hibernate_postgame_delay",&DAT_1032e794,0x80000,
	"# of seconds to wait after final client leaves before hibernating.");
FUN_10266530(&DAT_10640ed0,(int)"sv_hibernate_when_empty",&DAT_10324480,0x80000,
	"Puts the server into extremely low CPU usage mode when no clients connected",
FUN_102664a0(&DAT_10663530,(int)"sv_lan",&DAT_103256a0,0x80000,
	"Server is a lan server ( no heartbeat, no authentication, no non-class C addresses )"
FUN_102664a0(&DAT_106638a0,(int)"sv_maxcmdrate",&DAT_10351338,0x82000,
	"(If sv_mincmdrate is > 0), this sets the maximum value for cl_cmdrate.");
FUN_102665c0(&DAT_106637f0,(int)"sv_maxreplay",&DAT_103256a0,0,"Maximum replay time in seconds",1,
FUN_102664a0(&DAT_10663b68,(int)"sv_memlimit",&DAT_103256a0,0x4000,
	"If set, whenever a game ends, if the total memory used by the server is greater than this # of megabytes, the server will exit."
FUN_102664a0(&DAT_10663848,(int)"sv_mincmdrate",&DAT_1032e794,0x82000,
	"This sets the minimum value for cl_cmdrate. 0 == unlimited.");
FUN_10266700(&DAT_10663bc0,(int)"sv_parallel_sendsnapshot",&DAT_103256a0,0);
FUN_102664a0(&DAT_10663588,(int)"sv_pausable",&DAT_103256a0,0x80000,"Is the server pausable.");
FUN_102664a0(&DAT_10641088,(int)"sv_pausable_dev",&DAT_10324480,2,
	"Whether listen server is pausable when running -dev and playing solo against bots");
FUN_102664a0(&DAT_106410e0,(int)"sv_pausable_dev_ds",&DAT_103256a0,2,
	"Whether dedicated server is pausable when running -dev and playing solo against bots"
FUN_102662e0(&DAT_10640eac,(int)"sv_pure",(int)FUN_1014d7a0,"Show user data.",0,(undefined *)0x0);
FUN_102664a0(&DAT_10663428,(int)"sv_pure_kick_clients",&DAT_10324480,0x80000,
	"If set to 1, the server will kick clients with mismatching files. Otherwise, it will issue a warning to the client."
FUN_102664a0(&DAT_10663480,(int)"sv_pure_trace",&DAT_103256a0,0x80000,
	"If set to 1, the server will print a message whenever a client is verifying a CRC for a file."
FUN_10266380(&DAT_10663b44,(int)"sv_shutdown",(int)FUN_1014edc0,
	"Sets the server to shutdown when all games have completed",0x4000,(undefined *)0x0);
FUN_102664a0(&DAT_10663690,(int)"sv_voicecodec","vaudio_speex",0,
	"Specifies which voice codec DLL to use in a game. Set to the name of the DLL without the extension."
FUN_10266700(&DAT_106636e8,(int)"sv_voiceenable",&DAT_10324480,0x80180);
FUN_10266530(&DAT_10663a58,(int)"tv_enable",&DAT_103256a0,0x100,"Activates TacticalTV on server.",
FUN_102662e0(&DAT_10663ab0,(int)&DAT_10354214,(int)FUN_1014edf0,"Show user data.",0,
FUN_102662e0(&DAT_10663ad4,(int)"users",(int)FUN_1014eed0,"Show user info for players on server.",
FUN_10266700(&DAT_10663c18,(int)"voice_debugfeedbackfrom",&DAT_103256a0,0);
FUN_10266380(&DAT_10663ce0,(int)"heartbeat",(int)FUN_1014ef80,"Force heartbeat of master servers",
FUN_102664a0(&DAT_10663d60,(int)"sv_debugmanualmode",&DAT_103256a0,0,
	"Make sure entities correctly report whether or not their network data has changed.")
FUN_10266700(&DAT_10663db8,(int)"sv_parallel_packentities",&DAT_10324480,0);
FUN_102664a0(&DAT_10663d08,(int)"sv_validate_edict_change_infos",&DAT_103256a0,0,
	"Verify that edict changeinfos are being calculated properly (used to debug local network backdoor mode)."
FUN_102664a0(&DAT_10663e10,(int)"sv_forcepreload",&DAT_103256a0,0x80,
	"Force server side preloading.");
FUN_102662e0(&DAT_10663e68,(int)"sv_precacheinfo",(int)FUN_101509d0,"Show precache info.",0,
FUN_10266530(&DAT_10663ef8,(int)"rcon_password",&DAT_103236cf,0x200a0000,
	"remote console password.",(int)FUN_101517d0);
FUN_102665c0(&DAT_10664000,(int)"sv_rcon_banpenalty",&DAT_103256a0,0,
	"Number of minutes to ban users who fail rcon authentication",1,0,0,0);
FUN_102665c0(&DAT_10663f50,(int)"sv_rcon_maxfailures",&DAT_1032e794,0,
	"Max number of times a user can fail rcon authentication before being banned",1,
FUN_102665c0(&DAT_10663fa8,(int)"sv_rcon_minfailures",&DAT_10332f1c,0,
	"Number of times a user can fail rcon authentication in sv_rcon_minfailuretime before being banned"
FUN_102665c0(&DAT_10664058,(int)"sv_rcon_minfailuretime",&DAT_10341688,0,
	"Number of seconds to track failed rcon authentications",1,0x3f800000,0,0);
FUN_10266380(&DAT_10665198,(int)"stats",(int)FUN_10152f00,"Prints server performance variables",0,
FUN_102664a0(&DAT_10665140,(int)"sv_rcon_log",&DAT_10324480,0,"Enable/disable rcon logging.");
FUN_102664a0(&DAT_106651e8,(int)"sv_master_share_game_socket",&DAT_10324480,0,
	"Use the game\'s socket to communicate to the master server. If this is 0, then it will create a socket on -steamport + 1 to communicate to the master server on."
FUN_102664a0(&DAT_10666280,(int)"sv_allow_lobby_connect_only",&DAT_103256a0,0x80000,
	"If set, players may only join this server from matchmaking lobby, may not connect directly."
FUN_102664a0(&DAT_10666148,(int)"sv_allow_wait_command",&DAT_10324480,0x82000,
	"Allow or disallow the wait command on clients connected to this server.");
FUN_102664a0(&DAT_10666548,(int)"sv_alternateticks",&DAT_10324480,0x80040,
	"If set, server only simulates entities on even numbered ticks.\n");
FUN_102664a0(&DAT_106660f0,(int)"sv_debugtempentities",&DAT_103256a0,0,
	"Show temp entity bandwidth usage.");
FUN_102664a0(&DAT_106661a0,(int)"sv_enableoldqueries",&DAT_103256a0,0,
	"Enable support for old style (HL1) server queries");
FUN_10266700(&DAT_10666498,(int)"sv_hosting_lobby",&DAT_103256a0,0x2002);
FUN_102664a0(&DAT_106664f0,(int)"sv_instancebaselines",&DAT_10324480,2,
	"Enable instanced baselines. Saves network overhead.");
FUN_10266530(&DAT_106665f8,(int)"sv_password",&DAT_103236cf,0xa0120,
	"Server password for entry into multiplayer games",(int)FUN_1015f090);
FUN_102664a0(&DAT_10666330,(int)"sv_region",&DAT_10324484,0x80000,
	"The region of the world to report this server in.");
FUN_102665c0(&DAT_106665a0,(int)"sv_reservation_grace",&DAT_10332f1c,0,
	"Time in seconds given for a lobby reservation.",1,0x40400000,1,0x41f00000);
FUN_102665c0(&DAT_10666650,(int)"sv_reservation_timeout",&DAT_103571f4,0x80000,
	"Time in seconds before lobby reservation expires.",1,0x40a00000,1,0x43340000);
FUN_102662e0(&DAT_10666254,(int)"sv_showtags",(int)FUN_1015fbc0,"Describe current gametags.",0,
FUN_102664a0(&DAT_10666440,(int)"sv_stats",&DAT_10324480,0,"Collect CPU usage stats");
FUN_10266530(&DAT_106663e0,(int)"sv_steamgroup",&DAT_103236cf,0x80100,
	"The ID of the steam group that this server belongs to. You can find your group\'s ID on the admin profile page in the steam community."
FUN_102664a0(&DAT_106661f8,(int)"sv_steamgroup_exclusive",&DAT_103256a0,0x80000,
	"If set, only members of Steam group will be able to join the server when it\'s empty, public people will be able to join the server only if it has players."
FUN_10266530(&DAT_106662d8,(int)"sv_tags",&DAT_103236cf,0x80100,
	"Server tags. Used to provide extra information to clients when they\'re browsing for servers. Separate tags with a comma."
FUN_102664a0(&DAT_10666388,(int)"sv_visiblemaxplayers",&DAT_10324484,0x80000,
	"Overrides the max players reported to prospective clients");
FUN_10266700(&DAT_1066a890,(int)"blackbox",&DAT_10324480,0);
FUN_102662e0(&DAT_1066a858,(int)"blackbox_dump",(int)FUN_10160150,
	"Dump the contents of the blackbox",0x20000,(undefined *)0x0);
FUN_102662e0(&DAT_1066a8e8,(int)"blackbox_record",(int)FUN_101601d0,
	"Record an entry into the blackbox",0x20000,(undefined *)0x0);
FUN_102662e0(&DAT_1066aea8,(int)"_bugreporter_restart",(int)FUN_10167600,
	"Restarts bug reporter .dll",0,(undefined *)0x0);
FUN_102662e0(&DAT_1066af28,(int)&DAT_1035aba8,(int)FUN_10167920,"Show the bug reporting UI.",
FUN_102664a0(&DAT_1066af50,(int)"bugreporter_console_bytes","15000",0,
	"Max # of console bytes to put into bug report body (full text still attached).");
FUN_102664a0(&DAT_1066adf8,(int)"bugreporter_includebsp",&DAT_10324480,0,
	"Include .bsp for internal bug submissions.");
FUN_102664a0(&DAT_1066ad90,(int)"bugreporter_snapshot_delay",&DAT_103585fc,0,
	"Frames to delay before taking snapshot");
FUN_102664a0(&DAT_1066aed0,(int)"bugreporter_uploadasync",&DAT_103256a0,0x80,
	"Upload attachments asynchronously");
FUN_102664a0(&DAT_1066ae50,(int)"bugreporter_username",&DAT_103236cf,0x80,
	"Username to use for bugreporter");
FUN_102664a0(&DAT_1066b288,(int)"debug_map_crc",&DAT_103256a0,2,
	"Prints CRC for each map lump loaded");
FUN_102665c0(&DAT_1066b2e0,(int)"cl_cmdrate",&DAT_10351338,0x280,
	"Max number of command packets sent to server per second",1,0x41200000,1,0x43000000);
FUN_10266530(&DAT_1066b340,(int)&DAT_10350ea8,"80000",0x200,
	"Max bytes/sec the host can receive data",(int)FUN_1016bcb0);
FUN_102664a0(&DAT_1066b398,(int)"cl_updaterate",&DAT_10351338,0x400280,
	"Number of packets per second of updates you are requesting from the server");
FUN_102664a0(&DAT_1066b4a0,(int)"cl_clock_correction",&DAT_10324480,0x4000,
	"Enable/disable clock correction on the client.");
FUN_102664a0(&DAT_1066b608,(int)"cl_clock_correction_adjustment_max_amount",&DAT_1035b234,0x4000,
	"Sets the maximum number of milliseconds per second it is allowed to correct the client clock. It will only correct this amount if the difference between the client and server clock is equal to or larger than cl_clock_correction_adjustment_max_offset."
FUN_102664a0(&DAT_1066b5b0,(int)"cl_clock_correction_adjustment_max_offset",&DAT_1033cb28,0x4000,
	"As the clock offset goes from cl_clock_correction_adjustment_min_offset to this value (in milliseconds), it moves towards applying cl_clock_correction_adjustment_max_amount of adjustment. That way, the response is small when the offset is small."
FUN_102664a0(&DAT_1066b3f0,(int)"cl_clock_correction_adjustment_min_offset",&DAT_1032e794,0x4000,
	"If the clock offset is less than this amount (in milliseconds), then no clock correction is applied."
FUN_102664a0(&DAT_1066b448,(int)"cl_clock_correction_force_server_tick",&DAT_1035b10c,0x4000,
	"Force clock correction to match the server tick + this offset (-999 disables it).");
FUN_102664a0(&DAT_1066b558,(int)"cl_clock_showdebuginfo",&DAT_103256a0,0x4000,
	"Show debugging info about the clock drift. ");
FUN_102664a0(&DAT_1066b500,(int)"cl_clockdrift_max_ms",&DAT_1035b038,0x4000,
	"Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server\'s."
FUN_102664a0(&DAT_1066b660,(int)"cl_clockdrift_max_ms_threadmode",&DAT_103256a0,0x4000,
	"Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server\'s."
FUN_102662e0(&DAT_1067276c,(int)"BindToggle",(int)FUN_1021ff70,
	"Performs a bind <key> \"increment var <cvar> 0 1 1\"",0,(undefined *)0x0);
FUN_102662e0(&DAT_1066b6bc,(int)&DAT_1035b730,(int)FUN_1016d720,"Forward command to server.",0,
FUN_102662e0(&DAT_10672748,(int)&DAT_1035b70c,(int)FUN_1016d740,"Echo text to console.",0x10000000
FUN_102662e0(&DAT_10672790,(int)&DAT_1035b738,(int)FUN_1016cb60,"Execute script file.",0,
FUN_102662e0(&DAT_106726e4,(int)"execifexists",(int)FUN_1016cb40,
	"Execute script file if file exists.",0,FUN_1016d7f0);
FUN_102662e0(&DAT_10672724,(int)"stuffcmds",(int)FUN_1021ff70,
	"Parses and stuffs command line + commands to command buffer.",0,(undefined *)0x0);
FUN_102664a0(&DAT_10672c38,(int)"map_noareas",&DAT_103256a0,0,
	"Disable area to area connection testing.");
FUN_10266700(&DAT_10672ba8,(int)"occlusion_test_rays",&DAT_103256a0,2);
FUN_102662e0(&DAT_10672b80,(int)"occlusion_test_record",(int)FUN_10173e40,
	"dump occlusion tests - useful on server only",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_10672c14,(int)"occlusion_test_run",(int)FUN_10173fb0,"run occlusion test",0x4000
FUN_102662e0(&DAT_10676790,(int)&DAT_1035cd20,(int)FUN_1017d700,
	"sets userinfo string for split screen player in slot 1",0,(undefined *)0x0);
FUN_102662e0(&DAT_1067680c,(int)&DAT_1035cd60,(int)FUN_1017d720,
	"sets userinfo string for split screen player in slot 2",0,(undefined *)0x0);
FUN_102662e0(&DAT_106767e8,(int)&DAT_1035cda0,(int)FUN_1017d740,
	"sets userinfo string for split screen player in slot 3",0,(undefined *)0x0);
FUN_102662e0(&DAT_106767b8,(int)&DAT_1035cde0,(int)FUN_1017d760,
	"sets userinfo string for split screen player in slot 4",0,(undefined *)0x0);
FUN_102662e0(&DAT_1067676c,(int)"reset_gameconvars",(int)FUN_1021ff70,
	"Reset a bunch of game convars to default values",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_10676838,(int)"r_DispBuildable",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_106768c0,(int)"r_DispWalkable",&DAT_103256a0,0x4000);
FUN_102664a0(&DAT_10676918,(int)"r_DrawDisp",&DAT_10324480,0x4000,
	"Toggles rendering of displacment maps");
FUN_10266700(&DAT_10680d60,(int)"sv_logdownloadlist",&DAT_103256a0,0);
FUN_102664a0(&DAT_10681058,(int)"dtwatchdecode",&DAT_10324480,0,"When watching show decode.");
FUN_102664a0(&DAT_10681000,(int)"dtwatchencode",&DAT_10324480,0,"When watching show encode.");
FUN_102664a0(&DAT_10681168,(int)"dtwarning",&DAT_103256a0,0,"Print data table warnings?");
FUN_102664a0(&DAT_106810b0,(int)"dtwatchclass",&DAT_103236cf,0,
	"Watch all fields encoded with this table.");
FUN_102664a0(&DAT_10680f48,(int)"dtwatchent",&DAT_10324484,0,
	"Watch this entities data table encoding.");
FUN_102664a0(&DAT_10680fa0,(int)"dtwatchvar",&DAT_103236cf,0,"Watch the named variable.");
FUN_10266700(&DAT_10681110,(int)"sv_new_delta_bits",&DAT_10324480,0);
FUN_102664a0(&DAT_10681210,(int)"dt_ShowPartialChangeEnts",&DAT_103256a0,0,
	"(SP only) - show entities that were copied using small optimized lists (FL_EDICT_PARTIAL_CHANGE)."
FUN_102664a0(&DAT_10681268,(int)"dt_UsePartialChangeEnts",&DAT_10324480,0,
	"(SP only) - enable FL_EDICT_PARTIAL_CHANGE optimization.");
FUN_102662e0(&DAT_10681724,(int)"disp_list_all_collideable",(int)FUN_10198ad0,
	"List all collideable displacements",0,(undefined *)0x0);
FUN_102662e0(&DAT_10681644,(int)"occlusion_stats",(int)FUN_10198c40,
	"Occlusion statistics; [-jitter] [-reset]",0x80000,(undefined *)0x0);
FUN_10266530(&DAT_106815e0,(int)"occlusion_test_async",&DAT_103256a0,0x80000,
	"Enable asynchronous occlusion test in another thread; may save some server tick time at the cost of synchronization overhead with the async occlusion query thread"
FUN_10266700(&DAT_10681520,(int)"occlusion_test_async_jitter",&DAT_10325f28,0x4000);
FUN_10266700(&DAT_10681668,(int)"occlusion_test_async_move_tolerance",&DAT_1035f12c,0x4000);
FUN_102664a0(&DAT_10681438,(int)"occlusion_test_jump_margin",&DAT_103536e4,0x80000,
	"Amount by which the player bounding box is expanded up for occlusion test to account for jumping. This margin should be large enough to accommodate player movement within a frame or two. Affects both camera box and player box."
FUN_102664a0(&DAT_10681578,(int)"occlusion_test_margins",&DAT_1035eedc,0x80000,
	"Amount by which the player bounding box is expanded for occlusion test. This margin should be large enough to accommodate player movement within a frame or two, and the longest weapon they might hold. Shadow does not take this into account."
FUN_102664a0(&DAT_106816c0,(int)"occlusion_test_shadow_max_distance",&DAT_1035f040,0x80000,
	"Max distance at which to consider shadows for occlusion computations");
FUN_102662e0(&DAT_10681784,(int)"fs_printopenfiles",(int)FUN_10198d80,
	"Show all files currently opened by the engine.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106817a8,(int)"fs_syncdvddevcache",(int)FUN_10198da0,
	"Force the 360 to get updated files that are in your p4 changelist(s) from the host PC when running with -dvddev."
FUN_102662e0(&DAT_10681760,(int)"fs_warning_level",(int)FUN_10198dc0,
	"Set the filesystem warning level.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106817cc,(int)&DAT_1035f1b8,(int)FUN_10198eb0,"Show the engine filesystem path."
FUN_10266700(&DAT_10681c20,(int)"display_game_events",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_10681cd0,(int)"net_dumpeventstats",(int)FUN_1019c6c0,
	"Dumps out a report of game event network usage",0,(undefined *)0x0);
FUN_102664a0(&DAT_10681b18,(int)"net_showeventlisteners",&DAT_103256a0,0,
	"Show listening addition/removals");
FUN_102664a0(&DAT_10681c78,(int)"net_showevents",&DAT_103256a0,0,
	"Dump game events to console (1=client only, 2=all).");
FUN_102662e0(&DAT_10681d28,(int)"TransmitEvents",(int)FUN_1019c950,
	"Transmits Game Events to <address:port>",2,(undefined *)0x0);
FUN_102664a0(&DAT_10681e68,(int)"tv_chatgroupsize",&DAT_103256a0,0x80000,
	"Set the default chat group size");
FUN_102664a0(&DAT_10681d60,(int)"tv_chattimelimit",&DAT_10348218,0x80000,
	"Limits spectators to chat only every n seconds");
FUN_102664a0(&DAT_10681e10,(int)"tv_maxrate","20000",0x80000,
	"Max TacticalTV spectator bandwidth rate allowed, 0 == unlimited");
FUN_102664a0(&DAT_10681db8,(int)"tv_relaypassword",&DAT_103236cf,0xa0120,
	"TacticalTV password for relay proxies");
FUN_102664a0(&DAT_10681ec0,(int)"tv_autoretry",&DAT_10324480,0x80000,
	"Relay proxies retry connection after network timeout");
FUN_102664a0(&DAT_10681f20,(int)"tv_snapshotrate",&DAT_1034c778,0x80000,
	"Snapshots broadcasted per second");
FUN_102664a0(&DAT_10681f78,(int)"tv_timeout",&DAT_10341688,0x80000,
	"TacticalTV connection timeout in seconds.");
FUN_102662e0(&DAT_106824d4,(int)"editdemo",(int)FUN_101a1500,"Edit a recorded demo file (.dem ).",
FUN_102664a0(&DAT_10682130,(int)"tv_autorecord",&DAT_103256a0,0x80000,
	"Automatically records all games as TacticalTV demos.");
FUN_102662e0(&DAT_10682204,(int)"tv_clients",(int)FUN_101a33b0,
	"Shows list of connected TacticalTV clients.",0,(undefined *)0x0);
FUN_102664a0(&DAT_106822d0,(int)"tv_debug",&DAT_103256a0,0x80000,"TacticalTV debug info.");
FUN_102664a0(&DAT_10682350,(int)"tv_deltacache",&DAT_10325f28,0x80000,
	"Enable delta entity bit stream cache");
FUN_102664a0(&DAT_10682400,(int)"tv_dispatchmode",&DAT_10324480,0x80000,
	"Dispatch clients to relay proxies: 0=never, 1=if appropriate, 2=always");
FUN_102665c0(&DAT_10682188,(int)"tv_maxclients",&DAT_103261e0,0x80000,
	"Maximum client number on TacticalTV server.",1,0,1,0x437f0000);
FUN_102662e0(&DAT_1068205c,(int)"tv_msg",(int)FUN_101a3520,"Send a screen message to all clients."
FUN_10266530(&DAT_106823a8,(int)"tv_name","TacticalTV",0x80000,"TacticalTV host name",
FUN_102664a0(&DAT_106820d8,(int)"tv_overridemaster",&DAT_103256a0,0x80000,
	"Overrides the TacticalTV master root address.");
FUN_102664a0(&DAT_10682250,(int)"tv_password",&DAT_103236cf,0x20120,
	"TacticalTV password for all clients");
FUN_102662e0(&DAT_106824b0,(int)"tv_record",(int)FUN_101a35c0,"Starts TacticalTV demo recording.",
FUN_102662e0(&DAT_10682228,(int)"tv_relay",(int)FUN_101a3720,
	"Connect to TacticalTV server and relay broadcast.",0,(undefined *)0x0);
FUN_102664a0(&DAT_10681fe0,(int)"tv_relayvoice",&DAT_10324480,0x80000,
	"Relay voice data: 0=off, 1=on");
FUN_102662e0(&DAT_10682328,(int)"tv_retry",(int)FUN_101a3800,
	"Reconnects the TacticalTV relay proxy.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106822ac,(int)"tv_status",(int)FUN_101a38c0,"Show TacticalTV server status.",0,
FUN_102662e0(&DAT_106821e0,(int)"tv_stop",(int)FUN_101a3be0,"Stops the TacticalTV broadcast.",0,
FUN_102662e0(&DAT_10682038,(int)"tv_stoprecord",(int)FUN_101a3c40,
	"Stops TacticalTV demo recording.",0,(undefined *)0x0);
FUN_10266530(&DAT_10682458,(int)"tv_title","TacticalTV",0x80000,
	"Set title for TacticalTV spectator UI",(int)FUN_101a3c80);
FUN_102664a0(&DAT_10682080,(int)"tv_transmitall",&DAT_10324480,0x82000,
	"Transmit all entities (not only director view)");
FUN_102664a0(&DAT_10682838,(int)"cl_configversion",&DAT_10324480,2,"Configuration layout version."
FUN_102664a0(&DAT_10683228,(int)"cl_configversion_dummy",&DAT_103256a0,2,
	"Configuration layout version dummy.");
FUN_102664a0(&DAT_10683460,(int)"closecaption",&DAT_103256a0,0x1000280,"Enable close captioning.")
FUN_102664a0(&DAT_10682e00,(int)&DAT_103623f0,&DAT_103256a0,0x100,"Cooperative play.");
FUN_102664a0(&DAT_106830c0,(int)"deathmatch",&DAT_103256a0,0x100,"Running a deathmatch server.");
FUN_102664a0(&DAT_10682760,(int)"developer",&DAT_103256a0,0x80000,"Set developer message level");
FUN_102662e0(&DAT_106834dc,(int)"display_elapsedtime",(int)FUN_101aa270,
	"Displays how much time has elapsed since the game started",0x4000,(undefined *)0x0);
FUN_10266380(&DAT_106832a4,(int)"dti_flush",(int)FUN_101a46b0,
	"Write out the datatable instrumentation files (you must run with -dti for this to work)."
FUN_10266700(&DAT_106829e8,(int)"fs_enable_stats",&DAT_103256a0,0);
FUN_102664a0(&DAT_10682d50,(int)"host_ShowIPCCallCount",&DAT_103256a0,0,
	"Print # of IPC calls this number of times per second. If set to -1, the # of IPC calls is shown every frame."
FUN_102664a0(&DAT_10683118,(int)"host_sleep",&DAT_103256a0,0x4000,
	"Force the host to sleep a certain number of milliseconds each frame.");
FUN_102664a0(&DAT_10682ca0,(int)"host_framerate",&DAT_103256a0,0x6000,
	"Set to lock per-frame time elapse.");
FUN_102664a0(&DAT_10682fb8,(int)"host_limitlocal",&DAT_10324480,0,
	"Apply cl_cmdrate and cl_updaterate to loopback connection");
FUN_10266700(&DAT_10682da8,(int)"host_print_frame_times",&DAT_103256a0,0);
FUN_10266700(&DAT_106826b0,(int)"host_profile",&DAT_103256a0,0);
FUN_10266700(&DAT_106827b8,(int)"host_runframe_input_parcelremainder",&DAT_10324480,0);
FUN_102662e0(&DAT_1068260c,(int)"host_runofftime",(int)FUN_101aa290,
	"Run off some time without rendering/updating sounds\n",0,(undefined *)0x0);
FUN_102664a0(&DAT_10682890,(int)"host_showcachemiss",&DAT_103256a0,0,
	"Print a debug message when the client or server cache is missed.");
FUN_102664a0(&DAT_10682f08,(int)"host_speeds",&DAT_103256a0,0,"Show general system running times."
FUN_102664a0(&DAT_10683068,(int)"host_thread_mode",&DAT_103256a0,2,
	"Run the host in threaded mode, (0 == off, 1 == if multicore, 2 == force)");
FUN_102664a0(&DAT_10682708,(int)"host_threaded_sound",&DAT_103256a0,0,
	"Run the sound on a thread (independent of mix)");
FUN_102662e0(&DAT_106834b8,(int)"host_timer_report",(int)FUN_101aa350,
	"Spew CPU timer jitter for the last 128 frames in microseconds (dedicated only)",0,
FUN_102664a0(&DAT_106832c8,(int)"host_timescale",&DAT_103242e4,0x6000,
	"Prescale the clock by this amount.");
FUN_102662e0(&DAT_10682814,(int)"host_writeconfig",(int)FUN_101aa3a0,
	"Store current settings to config.cfg (or specified .cfg file).",0,(undefined *)0x0);
FUN_102662e0(&DAT_10683344,(int)"host_writeconfig_forced",(int)FUN_101aa420,
	"Store current settings to config.cfg (or specified .cfg file).",0,(undefined *)0x0);
FUN_102662e0(&DAT_106828e8,(int)"host_writeconfig_ss",(int)FUN_101aa4a0,
	"Store current settings to config.cfg (or specified .cfg file) with first param as splitscreen index."
FUN_102662e0(&DAT_10682630,(int)"mem_compact",(int)FUN_101aa580,&DAT_103236cf,0,(undefined *)0x0);
FUN_102662e0(&DAT_106825e8,(int)"mem_dump",(int)FUN_101aa590,"Dump memory stats to text file.",0,
FUN_102664a0(&DAT_10682eb0,(int)"mem_dumpstats",&DAT_103256a0,0,
	"Dump current and max heap usage info to console at end of frame ( set to 2 for continuous output )\n"
FUN_102662e0(&DAT_1068343c,(int)"mem_eat",(int)FUN_101aa5e0,&DAT_103236cf,0,(undefined *)0x0);
FUN_102662e0(&DAT_1068290c,(int)"mem_incremental_compact",(int)FUN_101aa600,&DAT_103236cf,0,
FUN_102664a0(&DAT_10682bf0,(int)"mem_incremental_compact_rate",&DAT_10361dfc,0x4000,
	"Rate at which to attempt internal heap compation");
FUN_102664a0(&DAT_10682c48,(int)"mem_periodicdumps",&DAT_103256a0,0,
	"Write periodic memstats dumps every n seconds.");
FUN_102662e0(&DAT_10682930,(int)"mem_test",(int)thunk_FUN_101a7fc0,&DAT_103236cf,0,
FUN_102664a0(&DAT_10682e58,(int)"mem_test_each_frame",&DAT_103256a0,0,
	"Run heap check at end of every frame\n");
FUN_102664a0(&DAT_10682a40,(int)"mem_test_every_n_seconds",&DAT_103256a0,0,
	"Run heap check at a specified interval\n");
FUN_102664a0(&DAT_10682f60,(int)"mem_test_quiet",&DAT_103256a0,0,
	"Don\'t print stats when memtesting");
FUN_102662e0(&DAT_10683280,(int)"mem_verify",(int)FUN_101aa620,"Verify the validity of the heap",0
FUN_102664a0(&DAT_10682aa0,(int)&DAT_10361f24,&DAT_103256a0,0x4000,
	"Set to 1 to advance to next frame ( when singlestep == 1 )");
FUN_10266700(&DAT_10682cf8,(int)"r_ForceRestore",&DAT_103256a0,0);
FUN_10266380(&DAT_10682b1c,(int)"recompute_speed",(int)FUN_101a6ef0,
	"Recomputes clock speed (for debugging purposes).",0x4000,(undefined *)0x0);
FUN_102664a0(&DAT_10682b98,(int)"singlestep",&DAT_103256a0,0x4000,
	"Run engine in single step mode ( set next to 1 to advance a frame )");
FUN_102665c0(&DAT_10682658,(int)"skill",&DAT_10324480,0x80,"Game skill level (1-3).",1,0x3f800000,
FUN_10266380(&DAT_10683418,(int)"snd_restart",(int)FUN_101a88e0,"Restart sound system.",0,
FUN_102662e0(&DAT_106829c4,(int)"thread_test_tslist",(int)FUN_101aa630,&DAT_103236cf,0,
FUN_102662e0(&DAT_106835b0,(int)"thread_test_tsqueue",(int)FUN_101aa6a0,&DAT_103236cf,0,
FUN_10266660(&DAT_10683368,(int)"threadpool_affinity",&DAT_10324480,0,"Enable setting affinity",0,
FUN_102662e0(&DAT_106825c4,(int)"threadpool_cycle_reserve",(int)FUN_101aa720,
	"Cycles threadpool reservation by powers of 2",0,(undefined *)0x0);
FUN_10266660(&DAT_106831c8,(int)"threadpool_reserve",&DAT_103256a0,0,
	"Consume the specified number of threads in the thread pool",0,0,0,0,
FUN_102662e0(&DAT_10683320,(int)"threadpool_run_tests",(int)FUN_101aa770,&DAT_103236cf,0,
FUN_102664a0(&DAT_10682b40,(int)"ti_low_violence",&DAT_10325f28,0x80,"Low Violence");
FUN_102664a0(&DAT_10683170,(int)"violence_ablood",&DAT_10324480,0,"Draw alien blood");
FUN_102664a0(&DAT_10683558,(int)"violence_agibs",&DAT_10324480,0,"Show alien gib entities");
FUN_102664a0(&DAT_10682958,(int)"violence_hblood",&DAT_10324480,0,"Draw human blood");
FUN_102664a0(&DAT_106833c0,(int)"violence_hgibs",&DAT_10324480,0,"Show human gib entities");
FUN_10266700(&DAT_10683500,(int)"vprof_server_spike_threshold","999.0",0);
FUN_10266700(&DAT_10683010,(int)"vprof_server_thread",&DAT_103256a0,0);
FUN_102662e0(&DAT_10682af8,(int)"write_config_to_cloud",(int)FUN_101aa7b0,
	"Writes config.cfg to cloud, from local file.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10684e34,(int)"_restart",(int)thunk_FUN_101b5820,
	"Shutdown and restart the engine.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106850cc,(int)"cache_print",(int)FUN_101ab770,
	"cache_print [section]\nPrint out contents of cache memory.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10684f78,(int)"cache_print_lru",(int)FUN_101ab7a0,
	"cache_print_lru [section]\nPrint out contents of cache memory.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10684bf4,(int)"cache_print_summary",(int)FUN_101ab7d0,
	"cache_print_summary [section]\nPrint out a summary contents of cache memory.",0,
FUN_10266380(&DAT_10684a2c,(int)&DAT_10364c88,(int)FUN_101ab110,"Exit the engine.",0,
FUN_102662e0(&DAT_10684978,(int)"dec_sensitivity",(int)FUN_101ab800,
	"Decrease sensitivity in 0.1 increments, loops around between 1.0 and 6.0.",0x20000,
FUN_102662e0(&DAT_10684ad0,(int)"demolist",(int)thunk_FUN_101aaf10,"Print demo sequence list.",0,
FUN_102662e0(&DAT_10684aac,(int)"demos",(int)FUN_101ab8e0,"Demo demo file sequence.",0,
FUN_102662e0(&DAT_10684c3c,(int)"disconnect",(int)FUN_101ab9d0,"Disconnect game from server.",
FUN_102662e0(&DAT_10684fc0,(int)"dumpstringtables",(int)FUN_1021ff70,
	"Print string tables to console.",0,(undefined *)0x0);
FUN_10266380(&DAT_10685008,(int)"-voicerecord",(int)FUN_101ab3a0,(undefined *)0x0,0,
FUN_102662e0(&DAT_106849c0,(int)"flush",(int)FUN_101abaa0,"Flush unlocked cache memory.",0x4000,
FUN_102662e0(&DAT_10684cf0,(int)"flush_locked",(int)FUN_101abae0,
	"Flush unlocked and locked cache memory.",0x4000,(undefined *)0x0);
FUN_102664a0(&DAT_10685050,(int)"host_map",&DAT_103236cf,0x80000,"Current map name.");
FUN_10266660(&DAT_10684db8,(int)"hostname",&DAT_103236cf,0x80000,"Hostname for server.",0,0,0,0,
FUN_102662e0(&DAT_106850f0,(int)"inc_sensitivity",(int)FUN_101abb20,
	"increase sensitivity in 0.1 increments, loops around between 1.0 and 6.0.",0x20000,
FUN_102662e0(&DAT_10684b88,(int)"incrementvar",(int)FUN_1021ff70,
	"Increment specified convar value.",0x20000,(undefined *)0x0);
FUN_102662e0(&DAT_1068502c,(int)&DAT_103525a4,(int)FUN_101abbf0,"Kick a player by name.",0,
FUN_102662e0(&DAT_10684bac,(int)"kickid",(int)FUN_101abd50,
	"Kick a player by userid or uniqueid, with a message.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10684c18,(int)"kickid_ex",(int)FUN_101abe30,
	"Kick a player by userid or uniqueid, provide a force-the-kick flag and also assign a message."
FUN_102662e0(&DAT_1068499c,(int)"killserver",(int)FUN_101abfa0,"Shutdown the server.",0,
FUN_10266380(&DAT_106849e4,(int)"light_crosshair",(int)FUN_101aaa90,
	"Show texture color at crosshair",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_10684af4,(int)"listmodels",(int)FUN_101ac040,"List loaded models.",0,
FUN_102662e0(&DAT_10684b1c,(int)"map_edit",(int)FUN_101ac050,&DAT_103236cf,0,(undefined *)0x0);
FUN_102662e0(&DAT_10684b40,(int)"memory",(int)FUN_101ac070,"Print memory stats.",0,
FUN_102662e0(&DAT_10684ed8,(int)"multvar",(int)FUN_1021ff70,"Multiply specified convar value.",
FUN_102662e0(&DAT_10684d90,(int)"nextdemo",(int)FUN_101ac1c0,"Play next demo in sequence.",0,
FUN_102662e0(&DAT_10684a08,(int)"pause",(int)FUN_101ac270,"Toggle the server pause state.",0,
FUN_102662e0(&DAT_10685114,(int)&DAT_10351540,(int)FUN_101ac300,"Display ping to server.",0,
FUN_10266380(&DAT_10684efc,(int)&DAT_1035470c,(int)FUN_101ab110,"Exit the engine.",0,
FUN_102662e0(&DAT_10684ccc,(int)"reload",(int)FUN_101ac440,
	"Reload the most recent saved game (add setpos to jump to current view position on reload)."
FUN_102662e0(&DAT_10684930,(int)"restart",(int)FUN_101ac620,
	"Restart the game on the same level (add setpos to jump to current view position on restart)."
FUN_102662e0(&DAT_10684fe4,(int)"setpause",(int)FUN_101ac6d0,"Set the pause state of the server.",
FUN_102662e0(&DAT_10684f9c,(int)"soundfade",(int)FUN_101ac750,"Fade client volume.",0x10000000,
FUN_102662e0(&DAT_10684c60,(int)"ss_connect",(int)FUN_101ac8f0,
	"If connected with available split screen slots, connects a split screen player to this machine."
FUN_102662e0(&DAT_10684b64,(int)"ss_disconnect",(int)FUN_101ac9f0,
	"If connected with available split screen slots, connects a split screen player to this machine."
FUN_102662e0(&DAT_10684e10,(int)"startdemos",(int)FUN_101acae0,"Play demos in demo sequence.",0,
FUN_10266380(&DAT_10684ca8,(int)"+voicerecord",(int)FUN_101ab310,(undefined *)0x0,0,
FUN_102662e0(&DAT_10684d14,(int)"status",(int)FUN_101acbe0,"Display map and connection status.",0,
FUN_102662e0(&DAT_10684c84,(int)"stopdemo",(int)FUN_101acfc0,"Stop playing back a demo.",0x20000,
FUN_102662e0(&DAT_10684954,(int)"stringtabledictionary",(int)FUN_1021ff70,
	"Create dictionary for current strings.",0,(undefined *)0x0);
FUN_10266530(&DAT_10684a50,(int)"sv_allow_voice_from_file",&DAT_103256a0,0x2000,
	"Allow or disallow clients from using voice_inputfromfile on this server.",
FUN_102664a0(&DAT_10684e80,(int)"sv_use_steam_voice",&DAT_10324480,0x2000,
	"Enable/disable using Steam Voice instead of the old voice codec (if enabled, voice_inputfromfile will no longer function)."
FUN_102662e0(&DAT_106850a8,(int)"voicerecord_toggle",(int)FUN_101ab400,(undefined *)0x0,0,
FUN_102662e0(&DAT_10684e58,(int)"unpause",(int)FUN_101ad060,"Unpause the game.",0,(undefined *)0x0
FUN_102662e0(&DAT_10684bd0,(int)"version",(int)FUN_101ad0d0,"Print version info string.",0,
FUN_10266530(&DAT_10684d38,(int)"voice_inputfromfile",&DAT_103256a0,0,
	"Get voice input from \'voice_input.wav\' rather than from the microphone.",
FUN_102664a0(&DAT_10684f20,(int)"voice_recordtofile",&DAT_103256a0,0,
	"Record mic data and decompressed voice data into \'voice_micdata.wav\' and \'voice_decompressed.wav\'"
FUN_102662e0(&DAT_10685238,(int)"changelevel",(int)FUN_101aa8e0,
	"Change server to the specified map",0x20000,FUN_101ad3a0);
FUN_102662e0(&DAT_10685264,(int)&DAT_103322f8,(int)FUN_101aaef0,"Start playing on specified map.",
FUN_102662e0(&DAT_10685288,(int)&DAT_1034df20,(int)FUN_101ad3e0,"Displays list of maps.",0,
FUN_102662e0(&DAT_10685378,(int)"_autosave",(int)FUN_101b4ea0,"Autosave",0,(undefined *)0x0);
FUN_102662e0(&DAT_10685710,(int)"_autosavedangerous",(int)FUN_101b4eb0,"AutoSaveDangerous",0,
FUN_102662e0(&DAT_10685604,(int)"autosave",(int)FUN_101b4ed0,"Autosave",0,(undefined *)0x0);
FUN_102662e0(&DAT_1068564c,(int)"autosavedangerous",(int)FUN_101b4f40,"AutoSaveDangerous",0,
FUN_102662e0(&DAT_10685490,(int)"autosavedangerousissafe",(int)FUN_101b4fd0,&DAT_103236cf,0,
FUN_102662e0(&DAT_10685694,(int)&DAT_1033b634,(int)FUN_101b08d0,"Load a saved game.",0,
FUN_10266700(&DAT_106854d8,(int)"map_wants_save_disable",&DAT_103256a0,0x4000);
FUN_102662e0(&DAT_10685670,(int)"minisave",(int)FUN_101b5030,
	"Saves game (for current level only!)",0x20000,(undefined *)0x0);
FUN_10266700(&DAT_10685530,(int)"save_async",&DAT_10324480,0);
FUN_102664a0(&DAT_106853b0,(int)"save_asyncdelay",&DAT_103256a0,0,
	"For testing, adds this many milliseconds of delay to the save operation.");
FUN_102662e0(&DAT_10685414,(int)&DAT_10339090,(int)FUN_101b5180,"Saves current game.",0x20000,
FUN_102664a0(&DAT_10685d80,(int)"save_console",&DAT_103256a0,0,
	"Autosave on the PC behaves like it does on the consoles.");
FUN_10266700(&DAT_10685320,(int)"save_disable",&DAT_103256a0,0);
FUN_102662e0(&DAT_10685628,(int)"save_finish_async",(int)thunk_FUN_101b06f0,&DAT_103236cf,0,
FUN_102664a0(&DAT_10685818,(int)"save_history_count",&DAT_10324480,0,
	"Keep this many old copies in history of autosaves and quicksaves.");
FUN_102664a0(&DAT_10685768,(int)"save_huddelayframes",&DAT_10324480,0,
	"Number of frames to defer for drawing the Saving message.");
FUN_10266700(&DAT_10685588,(int)"save_multiplayer_override",&DAT_103256a0,0x12);
FUN_10266700(&DAT_10685438,(int)"save_noxsave",&DAT_103256a0,0);
FUN_102664a0(&DAT_106856b8,(int)"save_screenshot",&DAT_10324480,0,
	"0 = none, 1 = non-autosave, 2 = always");
FUN_10266700(&DAT_106857c0,(int)"save_spew",&DAT_103256a0,0);
FUN_102664a0(&DAT_106852c8,(int)"sv_autosave",&DAT_10324480,0,
	"Set to 1 to autosave game on level transition. Does not affect autosave triggers.");
FUN_102662e0(&DAT_106855e0,(int)"xload",(int)FUN_101b52b0,
	"Load a saved game from a console storage device.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106854b4,(int)"xsave",(int)FUN_101b5350,
	"Saves current game to a console storage device.",0x20000,(undefined *)0x0);
FUN_10266530(&DAT_10686150,(int)"enable_fast_math",&DAT_10324480,0x80000,
	"Turns Denormals-Are-Zeroes and Flush-to-Zero on or off",(int)FUN_101b6460);
FUN_102662e0(&DAT_106861a8,(int)&DAT_103665b0,(int)thunk_FUN_101b6530,"Bind a key.",0,
FUN_102662e0(&DAT_106861cc,(int)"bind_osx",(int)FUN_1021ff70,"Bind a key for OSX only.",0,
FUN_102662e0(&DAT_10687828,(int)"escape",(int)FUN_101b7990,"Escape key pressed.",0x40000000,
FUN_102662e0(&DAT_10687804,(int)"forcebind",(int)FUN_101b7320,
	"Bind a command to an available key. (forcebind command opt:suggestedKey)",0,
FUN_102664a0(&DAT_10687788,(int)"in_forceuser",&DAT_103256a0,0x4000,
	"Force user input to this split screen player.");
FUN_102662e0(&DAT_1068621c,(int)"key_findbinding",(int)FUN_101b79a0,
	"Find key bound to specified command string.",0,(undefined *)0x0);
FUN_102662e0(&DAT_10686240,(int)"key_listboundkeys",(int)FUN_101b7a90,
	"List bound keys with bindings.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106861f8,(int)"unbind",(int)FUN_101b7b30,"Unbind a key.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106877e0,(int)"unbindall",(int)FUN_101b7bb0,"Unbind all keys.",0,
FUN_10266700(&DAT_10689f40,(int)"lightcache_maxmiss",&DAT_10325f28,0x4000);
FUN_10266700(&DAT_106a1e78,(int)"mat_ambient_light_b",&DAT_10326010,0);
FUN_10266700(&DAT_10689e90,(int)"mat_ambient_light_g",&DAT_10326010,0);
FUN_10266700(&DAT_10689ee8,(int)"mat_ambient_light_r",&DAT_10326010,0);
FUN_102664a0(&DAT_106a1c90,(int)"r_ambientlightingonly",&DAT_103256a0,0x4000,
	"Set this to 1 to light models with only ambient lighting (and no static lighting).")
FUN_10266700(&DAT_106a1d70,(int)"r_avglight",&DAT_10324480,0x4000);
FUN_102664a0(&DAT_1068a070,(int)"r_drawlightcache",&DAT_103256a0,0x4000,
	"0: off\n1: draw light cache entries\n2: draw rays\n");
FUN_102662e0(&DAT_1068a048,(int)"r_lightcache_invalidate",(int)thunk_FUN_101bc870,&DAT_103236cf,
FUN_102665c0(&DAT_106a1e20,(int)"r_lightcache_numambientsamples",&DAT_1035ddcc,0x4000,
	"number of random directions to fire rays when computing ambient lighting",1,
FUN_102664a0(&DAT_10689e30,(int)"r_lightcache_radiusfactor",&DAT_10327c20,0x4000,
	"Allow lights to influence lightcaches beyond the lights\' radii");
FUN_10266700(&DAT_106a1ed0,(int)"r_lightcache_zbuffercache",&DAT_103256a0,0);
FUN_10266700(&DAT_106a1be0,(int)"r_lightcachecenter",&DAT_10324480,0x4000);
FUN_10266700(&DAT_106a1d18,(int)"r_maxnewsamples",&DAT_1032fc90,0);
FUN_10266700(&DAT_106a1c38,(int)"r_maxsampledist",&DAT_103261e0,0);
FUN_10266700(&DAT_106a1dc8,(int)"r_minnewsamples",&DAT_10325994,0);
FUN_102664a0(&DAT_10689ff0,(int)"r_oldlightselection",&DAT_103256a0,0x4000,
	"Set this to revert to HL2\'s method of selecting lights");
FUN_102664a0(&DAT_10689dd8,(int)"r_radiosity",&DAT_1032597c,0x4000,
	"0: no radiosity\n1: radiosity with ambient cube (6 samples)\n2: radiosity with 162 samples\n3: 162 samples for static props, 6 samples for everything else"
FUN_10266700(&DAT_10689f98,(int)"r_worldlightmin","0.0002",0);
FUN_102664a0(&DAT_1068a0c8,(int)"r_worldlights",&DAT_10325994,0,
	"number of world lights to use per vertex");
FUN_102664a0(&DAT_106a2348,(int)"r_lockpvs",&DAT_103256a0,0x4000,
	"Lock the PVS so you can fly around and inspect what is being drawn.");
FUN_102664a0(&DAT_106a4630,(int)"r_novis",&DAT_103256a0,0x4000,"Turn off the PVS.");
FUN_102664a0(&DAT_106a4838,(int)"net_blockmsg",&DAT_1032c9b4,0x4000,
	"Discards incoming message: <0|1|name>");
FUN_102665c0(&DAT_106a4c80,(int)"net_maxfragments",&DAT_10367a84,0,"Max fragment bytes per packet"
FUN_102664a0(&DAT_106a4de0,(int)"net_chokeloop",&DAT_103256a0,2,
	"Apply bandwidth choke to loopback packets");
FUN_102664a0(&DAT_106a4960,(int)"net_compresspackets",&DAT_10324480,0,
	"Use compression on game packets.");
FUN_102664a0(&DAT_106a49c0,(int)"net_compresspackets_minsize",&DAT_10367c90,0,
	"Don\'t bother compressing packets below this size.");
FUN_10266700(&DAT_106a4890,(int)"net_dumptest",&DAT_103256a0,0);
FUN_102664a0(&DAT_106a4cd8,(int)"net_maxcleartime",&DAT_10367d18,0,
	"Max # of seconds we can wait for next packets to be sent based on rate setting (0 == no limit)."
FUN_102665c0(&DAT_106a4c28,(int)"net_maxfilesize",&DAT_1034c778,0,
	"Maximum allowed file size for uploading in MB",1,0,1,0x42800000);
FUN_102664a0(&DAT_106a4788,(int)"net_maxpacketdrop",&DAT_103512ec,0,
	"Ignore any packets with the sequence number more than this ahead (0 == no limit)");
FUN_102664a0(&DAT_106a4a18,(int)"net_minroutable",&DAT_1034c778,2,"Forces larger payloads.");
FUN_10266700(&DAT_106a4b20,(int)"net_paranoid",&DAT_10324480,0);
FUN_102664a0(&DAT_106a4ac8,(int)"net_showdrop",&DAT_103256a0,2,"Show dropped packets in console");
FUN_102664a0(&DAT_106a48e8,(int)"net_showfragments",&DAT_103256a0,0,"Show netchannel fragments");
FUN_102664a0(&DAT_106a4d88,(int)"net_showmsg",&DAT_103256a0,2,"Show incoming message: <0|1|name>")
FUN_102664a0(&DAT_106a47e0,(int)"net_showpeaks",&DAT_103256a0,0,
	"Show messages for large packets only: <size>");
FUN_102664a0(&DAT_106a4a70,(int)"net_showtcp",&DAT_103256a0,0,"Dump TCP stream summary to console"
FUN_102664a0(&DAT_106a4bd0,(int)"net_showudp",&DAT_103256a0,0x80000,
	"Dump UDP packets summary to console");
FUN_102664a0(&DAT_106a4d30,(int)"net_showudp_oob",&DAT_103256a0,0x80000,
	"Dump OOB UDP packets summary to console");
FUN_102664a0(&DAT_106a4b78,(int)"net_showudp_remoteonly",&DAT_103256a0,0x80000,
	"Dump non-loopback udp only");
FUN_102664a0(&DAT_106a4e68,(int)"net_steamcnx_allowrelay",&DAT_10324480,0x80080,
	"Allow steam connections to attempt to use relay servers as fallback (best if specified on command line:  +net_steamcnx_allowrelay 1)"
FUN_102664a0(&DAT_106a4f98,(int)"net_steamcnx_debug",&DAT_10324480,0,
	"Show debug spew for steam based connections, 2 shows all network traffic for steam sockets."
FUN_102664a0(&DAT_106a4ec0,(int)"net_steamcnx_enabled",&DAT_10324480,0x80000,
	"Use steam connections on listen server as a fallback, 2 forces use of steam connections instead of raw UDP."
FUN_102662e0(&DAT_106a4e38,(int)"net_steamcnx_status",(int)FUN_101ccad0,
	"Print status of steam connection sockets.",0,(undefined *)0x0);
FUN_102664a0(&DAT_106a5120,(int)"clientport","27005",0x80000,"Host game client port");
FUN_102664a0(&DAT_106a5018,(int)"net_droppackets",&DAT_103256a0,0x4000,
	"Drops next n packets on client");
FUN_102664a0(&DAT_106a5518,(int)"net_fakejitter",&DAT_103256a0,0x4000,"Jitter fakelag packet time"
FUN_102664a0(&DAT_106a56e0,(int)"net_fakelag",&DAT_103256a0,0x4000,
	"Lag all incoming network data (including loopback) by this many milliseconds.");
FUN_102664a0(&DAT_106a54c0,(int)"net_fakeloss",&DAT_103256a0,0x4000,
	"Simulate packet loss as a percentage (negative means drop 1/n packets)");
FUN_102664a0(&DAT_106a5610,(int)"tv_port","27020",0x80000,"Host TacticalTV port");
FUN_102664a0(&DAT_106a5388,(int)"hostip",&DAT_103236cf,0x80000,"Host game server ip");
FUN_102664a0(&DAT_106a57d8,(int)"hostport","27015",0x80000,"Host game server port");
FUN_102664a0(&DAT_106a50c8,(int)&DAT_10351f90,"localhost",0x80000,
	"Overrides IP for multihomed hosts");
FUN_102662e0(&DAT_106a5754,(int)"net_channels",(int)FUN_101d2180,"Shows net channel info",0,
FUN_102664a0(&DAT_106a5330,(int)"net_compressvoice",&DAT_103256a0,0,
	"Attempt to compress out of band voice payloads (360 only).");
FUN_102665c0(&DAT_106a5178,(int)"net_maxroutable",&DAT_10367a84,0x280,
	"Requested max packet size before packets are \'split\'.",1,0x44100000,1,0x44960000);
FUN_102664a0(&DAT_106a5468,(int)"net_public_adr",&DAT_103236cf,0x80000,
	"For servers behind NAT/DHCP meant to be exposed to the public internet, this is the public facing ip address string: (\"x.x.x.x\" )"
FUN_102664a0(&DAT_106a5268,(int)"net_showsplits",&DAT_103256a0,0x80000,
	"Show info about packet splits");
FUN_102664a0(&DAT_106a52c0,(int)"net_showudp_wire",&DAT_103256a0,0,
	"Show incoming packet information");
FUN_102664a0(&DAT_106a5778,(int)"net_splitrate",&DAT_10325994,0x80000,
	"Number of fragments for a splitpacket that can be sent per frame");
FUN_102662e0(&DAT_106a5244,(int)"net_start",(int)FUN_101d2210,"Inits multiplayer network sockets",
FUN_102662e0(&DAT_106a55ec,(int)"net_status",(int)FUN_101d2220,"Shows current network status",0,
FUN_102664a0(&DAT_106a5070,(int)"net_usesocketsforloopback",&DAT_103256a0,0,
	"Use network sockets layer even for listen server local player\'s packets (multiplayer only)."
FUN_102665c0(&DAT_106a53f8,(int)"sv_maxroutable",&DAT_10367a84,0,
	"Server upper bound on net_maxroutable that a client can use.",1,0x44100000,1,
FUN_102664a0(&DAT_106a5588,(int)"voice_verbose",&DAT_103256a0,2,
	"Turns on debug output with detailed spew about voice data processing.");
FUN_10266700(&DAT_106a5668,(int)"voice_xsend_debug",&DAT_103256a0,0);
FUN_10266700(&DAT_106a5980,(int)"net_queue_trace",&DAT_103256a0,0x2000000);
FUN_102664a0(&DAT_106a5878,(int)"net_queued_packet_thread",&DAT_10324480,0,
	"Use a high priority thread to send queued packets out instead of sending them each frame."
FUN_102664a0(&DAT_106a5ff0,(int)"stringtable_alwaysrebuilddictionaries",&DAT_103256a0,0,
	"Rebuild dictionary file on every level load\n");
FUN_102664a0(&DAT_106a5f98,(int)"stringtable_compress",&DAT_10324480,0,
	"Compress string table for networking\n");
FUN_102664a0(&DAT_106a5e50,(int)"stringtable_showsizes",&DAT_103256a0,0,
	"Show sizes of string tables when building for signon\n");
FUN_102664a0(&DAT_106a5df0,(int)"stringtable_usedictionaries",&DAT_10324480,0,
	"Use dictionaries for string table networking\n");
FUN_102664a0(&DAT_106a5ea8,(int)"sv_compressstringtablebaselines_threshold",&DAT_1034c5f0,0,
	"Minimum size (in bytes) for stringtablebaseline buffer to be compressed.");
FUN_10266700(&DAT_106a6048,(int)"sv_dumpstringtables",&DAT_103256a0,0x4000);
FUN_10266700(&DAT_106a6440,(int)"debug_paint_alpha",&DAT_103256a0,2);
FUN_10266700(&DAT_106a6498,(int)"paint_alpha_offset_enabled",&DAT_10324480,0x2002);
FUN_10266700(&DAT_106a6548,(int)"paint_max_surface_border_alpha",&DAT_1036bac0,0x2002);
FUN_10266700(&DAT_106a6390,(int)"paint_min_valid_alpha_value",&DAT_1036bac0,0x2002);
FUN_102664a0(&DAT_106a64f0,(int)"paintsplat_bias",&DAT_1036bb34,0x6000,
	"Change bias value for computing circle buffer");
FUN_102664a0(&DAT_106a63e8,(int)"paintsplat_max_alpha_noise",&DAT_1036bb34,0x6000,
	"Max noise value of circle alpha");
FUN_10266700(&DAT_106a6338,(int)"paintsplat_noise_enabled",&DAT_10324480,0x6000);
FUN_102664a0(&DAT_106a65b0,(int)"sv_useexplicitdelete",&DAT_10324480,2,
	"Explicitly delete dormant client entities caused by AllowImmediateReuse().");
FUN_102662e0(&DAT_106a8aa8,(int)"audit_save_in_memory",(int)FUN_1021ff70,
	"Audit the memory usage and files in the save-to-memory system",0,(undefined *)0x0);
FUN_10266530(&DAT_106a8a48,(int)"save_in_memory",&DAT_103256a0,0,
	"Set to 1 to save to memory instead of disk (Xbox 360)",(int)FUN_101e7f20);
FUN_102664a0(&DAT_106a8ba8,(int)"cl_allowupload",&DAT_10324480,0x80,
	"Client uploads customization files");
FUN_102664a0(&DAT_106a8c00,(int)"cl_debugtempentities",&DAT_103256a0,0,&DAT_103236cf);
FUN_102664a0(&DAT_106a8b48,(int)"cl_voice_filter",&DAT_103236cf,0,"Filter voice by name substring"
FUN_10266700(&DAT_106a8af0,(int)"voice_debugfeedback",&DAT_103256a0,0);
FUN_102664a0(&DAT_106a8c90,(int)"snd_foliage_db_loss",&DAT_1032597c,0x4000,
	"foliage dB loss per 1200 units");
FUN_10266700(&DAT_106a8ce8,(int)"snd_gain",&DAT_10324480,0x4000);
FUN_10266700(&DAT_106a8d40,(int)"snd_gain_max",&DAT_10324480,0x4000);
FUN_10266700(&DAT_106a8e48,(int)"snd_gain_min",&DAT_1036d098,0x4000);
FUN_10266530(&DAT_106a8df0,(int)"snd_refdb",&DAT_1032fce4,0x4000,"Reference dB at snd_refdist",
FUN_102664a0(&DAT_106a8d98,(int)"snd_refdist",&DAT_1035eedc,0x4000,
	"Reference distance for snd_refdb");
FUN_102664a0(&DAT_106a90f8,(int)"r_partition_level",&DAT_10324484,0x4000,
	"Displays a particular level of the spatial partition system. Use -1 to disable it.")
FUN_102664a0(&DAT_106a9158,(int)"think_trace_limit",&DAT_103256a0,0x4002,
	"Break into the debugger if this many or more traces are performed in a single think function. Negative numbers mean that the same think function may be broken into many times (once per [x] may traces), positive numbers mean each think will break only once."
FUN_102664a0(&DAT_106a92f8,(int)"cl_skipslowpath",&DAT_103256a0,0x4000,
	"Set to 1 to skip any models that don\'t go through the model fast path");
FUN_102664a0(&DAT_106a9220,(int)"disable_static_prop_loading",&DAT_103256a0,0x4000,
	"If non-zero when a map loads, static props won\'t be loaded");
FUN_10266700(&DAT_106a9350,(int)"pipeline_static_props",&DAT_10324480,0);
FUN_10266380(&DAT_106a92d0,(int)"prop_crosshair",(int)FUN_101f5700,
	"Shows name for prop looking at",0x4000,(undefined *)0x0);
FUN_10266700(&DAT_106a9470,(int)"r_DrawSpecificStaticProp",&DAT_10324484,0);
FUN_10266700(&DAT_106a94c8,(int)"r_drawmodeldecals",&DAT_10324480,0);
FUN_102664a0(&DAT_106a9418,(int)"r_drawstaticprops",&DAT_10324480,0x4000,
	"0=Off, 1=Normal, 2=Wireframe");
FUN_102664a0(&DAT_106a9278,(int)"r_shadow_deferred",&DAT_103256a0,0x4000,
	"Toggle deferred shadow rendering");
FUN_10266700(&DAT_106a91c0,(int)"r_staticpropinfo",&DAT_103256a0,0);
FUN_102664a0(&DAT_106a9fa8,(int)"mod_load_preload",&DAT_103242e4,0,
	"Indicates how far ahead in seconds to preload animations.");
FUN_102664a0(&DAT_106a9f50,(int)"mod_load_showstall",&DAT_103256a0,0,
	"1 - show hitches , 2 - show stalls");
FUN_10266700(&DAT_106ab0c8,(int)"mm_heartbeat_seconds",&DAT_103260a4,0);
FUN_10266700(&DAT_106ab018,(int)"mm_heartbeat_seconds_xlsp",&DAT_1032fce4,0);
FUN_10266700(&DAT_106aa0d0,(int)"mm_heartbeat_timeout",&DAT_1032e794,0);
FUN_10266700(&DAT_106ab070,(int)"mm_heartbeat_timeout_legacy",&DAT_103585fc,0);
FUN_102662e0(&DAT_106ab120,(int)"pingserver",(int)FUN_101fb2d0,"Ping a server for info",0,
FUN_102664a0(&DAT_106aa078,(int)"sv_master_legacy_mode",&DAT_10324480,0,
	"Use (outside-of-Steam) code to communicate with master servers.");
FUN_10266530(&DAT_106aa130,(int)"sv_search_key",&DAT_103236cf,0x80000,
	"When searching for a dedicated server from lobby, restrict search to only dedicated servers having the same sv_search_key."
FUN_102664a0(&DAT_106ab148,(int)"xlsp_force_dc_name",&DAT_103236cf,0,
	"Restrict to xlsp datacenter by name.");
FUN_10266530(&DAT_106abfa0,(int)"errorcallstacks_enable",&DAT_103256a0,2,
	"All Error() calls will attach a callstack",(int)FUN_101fcce0);
FUN_10266530(&DAT_106ac5d8,(int)"errorcallstacks_length",&DAT_10332ec8,2,
	"Length of automatic error callstacks",(int)FUN_101fcd10);
FUN_102664a0(&DAT_106abf48,(int)"mem_max_heapsize",&DAT_1035dde0,0,
	"Maximum amount of memory to dedicate to engine hunk and datacache (in mb)");
FUN_102664a0(&DAT_106ac520,(int)"mem_max_heapsize_dedicated",&DAT_10351338,0,
	"Maximum amount of memory to dedicate to engine hunk and datacache, for dedicated server (in mb)"
FUN_102664a0(&DAT_106ac580,(int)"mem_min_heapsize",&DAT_10351338,0,
	"Minimum amount of memory to dedicate to engine hunk and datacache (in mb)");
FUN_102662e0(&DAT_106abffc,(int)"star_memory",(int)FUN_101fcd50,"Dump memory stats",0,
FUN_102664a0(&DAT_106ac4c8,(int)"sys_minidumpspewlines",&DAT_10325be0,0x80000,
	"Lines of crash dump console spew to keep.");
FUN_10266530(&DAT_106ac470,(int)"warningcallstacks_enable",&DAT_103256a0,2,
	"All Warning()/DevWarning()/... calls will attach a callstack",(int)FUN_101fce10);
FUN_10266530(&DAT_106abee8,(int)"warningcallstacks_length",&DAT_10332f1c,2,
	"Length of automatic warning callstacks",(int)FUN_101fce40);
FUN_10266380(&DAT_106ac88c,(int)"editor_toggle",(int)FUN_101fde90,
	"Disables the simulation and returns focus to the editor",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_106ac868,(int)"reload_vjobs",(int)FUN_101ff0f0,"reload vjobs module",0,
FUN_102662e0(&DAT_106ac78c,(int)"render_blanks",(int)FUN_101ff150,"render N blank frames",0,
FUN_10266700(&DAT_106ac7d8,(int)"sys_minidumpexpandedspew",&DAT_10324480,0);
FUN_102664a0(&DAT_106ace70,(int)"async_serialize",&DAT_103256a0,0,
	"Force async reads to serialize for profiling");
FUN_10266660(&DAT_106acf78,(int)"cpu_frequency_monitoring",&DAT_103256a0,0x80000,
	"Set CPU frequency monitoring interval in seconds. Zero means disabled.",1,0,1,
FUN_10266700(&DAT_106acd08,(int)"engine_no_focus_sleep",&DAT_1032605c,0x80);
FUN_10266530(&DAT_106ace18,(int)"fps_max",&DAT_1035ddd8,0x80000,"Frame rate limiter",
FUN_102664a0(&DAT_106acf20,(int)"fps_max_splitscreen",&DAT_1035ddd8,0,
	"Frame rate limiter, splitscreen");
FUN_102662e0(&DAT_106acce0,(int)"host_filtered_time_report",(int)FUN_101ff950,
	"Dumps time spent idle in previous frames in ms(dedicated only).",0,(undefined *)0x0)
FUN_10266530(&DAT_106acdb8,(int)"mat_powersavingsmode",&DAT_103256a0,0x80,"Power Savings Mode",
FUN_102664a0(&DAT_106acd60,(int)"sleep_when_meeting_framerate",&DAT_10324480,0,
	"Sleep instead of spinning if we\'re meeting the desired framerate.");
FUN_102664a0(&DAT_106acec8,(int)"vx_do_not_throttle_events",&DAT_103256a0,0,
	"Force VXConsole updates every frame; smoother vprof data on PS3 but at a slight (~0.2ms) perf cost."
FUN_102664a0(&DAT_106ad000,(int)"cl_savescreenshotstosteam",&DAT_10324480,0x10,
	"Saves screenshots to the Steam\'s screenshot library");
FUN_102664a0(&DAT_106ad058,(int)"cl_screenshotlocation",&DAT_103236cf,0x10,
	"Location to tag the screenshot with");
FUN_102664a0(&DAT_106ad0b0,(int)"cl_screenshotusertag",&DAT_103236cf,0x10,
	"User to tag in the screenshot");
FUN_102662e0(&DAT_106ad500,(int)"budget_toggle_group",(int)FUN_10206210,
	"Turn a budget group on/off",0,(undefined *)0x0);
FUN_102664a0(&DAT_106ad708,(int)"rpt_vprof_time",&DAT_10326fbc,0x20010,&DAT_103236cf);
FUN_102662e0(&DAT_106ad2b0,(int)"spike",(int)FUN_10206260,"generates a fake spike",0x4000,
FUN_102662e0(&DAT_106ad760,(int)"vprof_cachemiss",(int)FUN_10206340,
	"Toggle VProf cache miss checking",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad6e4,(int)"vprof_cachemiss_off",(int)FUN_102063f0,
	"Turn off VProf cache miss checking",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad1dc,(int)"vprof_cachemiss_on",(int)FUN_10206480,
	"Turn on VProf cache miss checking",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad2d8,(int)"vprof",(int)FUN_10206270,"Toggle VProf profiler",0,
FUN_10266700(&DAT_106ad200,(int)"vprof_counters",&DAT_103256a0,0);
FUN_10266700(&DAT_106ad450,(int)"vprof_counters_show_minmax",&DAT_103256a0,0);
FUN_102662e0(&DAT_106ad1b8,(int)"vprof_dump_counters",(int)FUN_10206510,
	"Dump vprof counters to the console",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad3e4,(int)"vprof_dump_groupnames",(int)FUN_10206520,
	"Write the names of all of the vprof groups to the console.",0,(undefined *)0x0);
FUN_102664a0(&DAT_106ad258,(int)"vprof_dump_oninterval",&DAT_103256a0,0,
	"Interval (in seconds) at which vprof will batch up data and dump it to the console."
FUN_102664a0(&DAT_106ad668,(int)"vprof_dump_spikes",&DAT_103256a0,0,
	"Framerate at which vprof will begin to dump spikes to the console. 0 = disabled, negative to reset after dump"
FUN_102664a0(&DAT_106ad610,(int)"vprof_dump_spikes_budget_group",&DAT_103236cf,0,
	"Budget gtNode to start report from when doing a dump spikes");
FUN_102664a0(&DAT_106ad548,(int)"vprof_dump_spikes_hiearchy",&DAT_103256a0,0,
	"Set to 1 to get a hierarchy report whith vprof_dump_spikes");
FUN_102664a0(&DAT_106ad4a8,(int)"vprof_dump_spikes_node",&DAT_103236cf,0,
	"Node to start report from when doing a dump spikes");
FUN_102664a0(&DAT_106ad320,(int)"vprof_dump_spikes_terse",&DAT_103256a0,0,
	"Whether to use most terse output");
FUN_102662e0(&DAT_106ad6c0,(int)"vprof_generate_report_AI",(int)FUN_102065d0,
	"Generate a report to the console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad408,(int)"vprof_generate_report_AI_only",(int)FUN_102066a0,
	"Generate a report to the console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad5ec,(int)"vprof_generate_report_budget",(int)FUN_10206800,
	"Generate a report to the console based on budget group.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad2fc,(int)"vprof_generate_report",(int)FUN_10206570,
	"Generate a report to the console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad7a8,(int)"vprof_generate_report_hierarchy",(int)FUN_102068f0,
	"Generate a report to the console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad524,(int)"vprof_generate_report_hierarchy_per_frame_and_count_only",
FUN_102662e0(&DAT_106ad3ac,(int)"vprof_generate_report_map_load",(int)FUN_10206aa0,
	"Generate a report to the console.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad5a0,(int)"vprof_off",(int)FUN_10206b70,"Turn off VProf profiler",0,
FUN_102662e0(&DAT_106ad784,(int)"vprof_on",(int)FUN_10206c70,"Turn on VProf profiler",0,
FUN_102662e0(&DAT_106ad42c,(int)"vprof_reset",(int)FUN_10206d10,
	"Reset the stats in VProf profiler",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad5c8,(int)"vprof_reset_peaks",(int)FUN_10206dc0,
	"Reset just the peak time in VProf profiler",0,(undefined *)0x0);
FUN_102662e0(&DAT_106ad388,(int)"vprof_vtune_group",(int)FUN_10206e40,
	"enable vtune for a particular vprof group (\"disable\" to disable)",0,
FUN_102662e0(&DAT_106adb90,(int)"vprof_playback_average",(int)FUN_102094b0,
	"Average the next N frames.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106adbb8,(int)"vprof_playback_start",(int)FUN_10209510,
	"Start playing back a recorded .vprof file.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106af654,(int)"vprof_playback_step",(int)FUN_102092b0,
	"While playing back a .vprof file, step to the next tick.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106adbdc,(int)"vprof_playback_stepback",(int)FUN_102092c0,
	"While playing back a .vprof file, step to the previous tick.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106af630,(int)"vprof_playback_stop",(int)FUN_102095a0,
	"Stop playing back a recorded .vprof file.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106adb48,(int)"vprof_record_start",(int)FUN_102095c0,
	"Start recording vprof data for playback later.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106af67c,(int)"vprof_record_stop",(int)FUN_102095f0,"Stop recording vprof data",
FUN_102662e0(&DAT_106adb6c,(int)"vprof_to_csv",(int)FUN_10209610,
	"Convert a recorded .vprof file to .csv.",0,(undefined *)0x0);
FUN_102662e0(&DAT_106af824,(int)"hunk_print_allocations",(int)FUN_10212fa0,&DAT_103236cf,
FUN_10266700(&DAT_106af880,(int)"hunk_track_allocation_types",&DAT_10324480,0x4000);
FUN_102662e0(&DAT_106af910,(int)"toolload",(int)FUN_10215f10,"Load a tool.",0,FUN_102164b0);
FUN_102662e0(&DAT_106af934,(int)"toolunload",(int)FUN_10215fd0,"Unload a tool.",0,FUN_10216500);
FUN_10266380(&DAT_106afa08,(int)"perfui",(int)FUN_10217e90,
	"Show/hide the level performance tools UI.",0x4000,(undefined *)0x0);
FUN_102662e0(&DAT_106afb7c,(int)"gameui_activate",(int)FUN_1021ccd0,"Shows the game UI",0,
FUN_102662e0(&DAT_106afc0c,(int)"gameui_allowescape",(int)FUN_1021cce0,
	"Escape key allowed to hide game UI",0,(undefined *)0x0);
FUN_102662e0(&DAT_106afbc4,(int)"gameui_allowescapetoshow",(int)FUN_1021cd00,
	"Escape key allowed to show game UI",0,(undefined *)0x0);
FUN_102662e0(&DAT_106afb58,(int)"gameui_hide",(int)FUN_1021cd20,"Hides the game UI",0,
FUN_102662e0(&DAT_106afba0,(int)"gameui_preventescape",(int)FUN_1021cd30,
	"Escape key doesn\'t hide game UI",0,(undefined *)0x0);
FUN_102662e0(&DAT_106afbe8,(int)"gameui_preventescapetoshow",(int)FUN_1021cd50,
	"Escape key doesn\'t show game UI",0,(undefined *)0x0);
FUN_10266700(&DAT_106afb00,(int)"gameui_xbox",&DAT_103256a0,0);
FUN_102664a0(&DAT_106afd30,(int)"mat_drawTitleSafe",&DAT_103256a0,0,"Enable title safe overlay");
FUN_10266380(&DAT_106afc30,(int)"progress_enable",(int)FUN_10219d80,(undefined *)0x0,0,
FUN_102664a0(&DAT_106afaa8,(int)"r_drawvgui",&DAT_10324480,0x4000,
	"Enable the rendering of vgui panels");
FUN_102664a0(&DAT_106afdc0,(int)"vgui_drawfocus",&DAT_103256a0,0,
	"Report which panel is under the mouse.");
FUN_102664a0(&DAT_106afe18,(int)"vgui_drawkeyfocus",&DAT_103256a0,0,
	"Report which panel has keyboard focus.");
FUN_102662e0(&DAT_106afe70,(int)"vgui_dump_panels",(int)FUN_1021cd70,"vgui_dump_panels [visible]",
FUN_102662e0(&DAT_106afd9c,(int)"vgui_togglepanel",(int)FUN_1021cdc0,
	"show/hide vgui panel by name.",0,(undefined *)0x0);
FUN_102664a0(&DAT_106afef8,(int)"budget_averages_window",&DAT_10341688,0x80,
	"number of frames to look at when figuring out average frametimes");
FUN_102664a0(&DAT_106b0000,(int)"budget_bargraph_background_alpha",&DAT_103261e0,0x80,
	"how translucent the budget panel is");
FUN_102664a0(&DAT_106afea0,(int)"budget_peaks_window",&DAT_10341688,0x80,
	"number of frames to look at when figuring out peak frametimes");
FUN_102664a0(&DAT_106aff50,(int)"budget_show_averages",&DAT_103256a0,0x80,
	"enable/disable averages in the budget panel");
FUN_102664a0(&DAT_106affa8,(int)"budget_show_peaks",&DAT_10324480,0x80,
	"enable/disable peaks in the budget panel");
FUN_102664a0(&DAT_106b00b8,(int)"budget_history_numsamplesvisible",&DAT_1033b8d8,0x80,
	"number of samples to draw in the budget history window.  The lower the better as far as rendering overhead of the budget panel"
FUN_102664a0(&DAT_106b0060,(int)"budget_show_history",&DAT_10324480,0x80,
	"turn history graph off and on. . good to turn off on low end");
FUN_10266380(&DAT_106b0184,(int)"-showbudget",(int)FUN_1021e2a0,&DAT_103236cf,0,(undefined *)0x0);
FUN_10266380(&DAT_106b0160,(int)"+showbudget",(int)FUN_1021e260,&DAT_103236cf,0,(undefined *)0x0);
FUN_102662e0(&DAT_106b013c,(int)"vprof_adddebuggroup1",(int)FUN_1021e5f0,
	"add a new budget group dynamically for debugging",0,(undefined *)0x0);
FUN_102664a0(&DAT_106b02d0,(int)"budget_background_alpha",&DAT_103261e0,0x80,
	"how translucent the budget panel is");
FUN_10266530(&DAT_106b0380,(int)"budget_bargraph_range_ms","16.6666666667",0x80,
	"budget bargraph range in milliseconds",(int)FUN_1021e810);
FUN_10266530(&DAT_106b0218,(int)"budget_history_range_ms","66.666666667",0x80,
	"budget history range in milliseconds",(int)FUN_1021e810);
FUN_10266530(&DAT_106b01c0,(int)"budget_panel_bottom_of_history_fraction",&DAT_10378f00,0x80,
	"number between 0 and 1",(int)FUN_1021e810);
FUN_10266530(&DAT_106b03d8,(int)"budget_panel_height",&DAT_1035dde4,0x80,
	"height in pixels of the budget panel",(int)FUN_1021e810);
FUN_10266530(&DAT_106b0430,(int)"budget_panel_width",&DAT_1035dde0,0x80,
	"width in pixels of the budget panel",(int)FUN_1021e810);
FUN_10266530(&DAT_106b0278,(int)"budget_panel_x",&DAT_103256a0,0x80,
	"number of pixels from the left side of the game screen to draw the budget panel",
FUN_10266530(&DAT_106b0328,(int)"budget_panel_y",&DAT_10332ec8,0x80,
	"number of pixels from the top side of the game screen to draw the budget panel",
FUN_102664a0(&DAT_106b0598,(int)"vgui_drawtree",&DAT_103256a0,0x4000,
	"Draws the vgui panel hiearchy to the specified depth level.");
FUN_10266530(&DAT_106b08b0,(int)"vgui_drawtree_bounds",&DAT_103256a0,0,"Show panel bounds.",
FUN_10266380(&DAT_106b0a00,(int)"vgui_drawtree_clear",(int)FUN_10221750,(undefined *)0x0,0,
FUN_10266530(&DAT_106b0908,(int)"vgui_drawtree_draw_selected",&DAT_103256a0,0,
	"Highlight the selected panel",(int)FUN_10220990);
FUN_10266530(&DAT_106b06f8,(int)"vgui_drawtree_freeze",&DAT_103256a0,0,
	"Set to 1 to stop updating the vgui_drawtree view.",(int)FUN_10220990);
FUN_10266530(&DAT_106b0648,(int)"vgui_drawtree_hidden",&DAT_103256a0,0,"Draw the hidden panels.",
FUN_10266380(&DAT_106b09dc,(int)"-vgui_drawtree",(int)FUN_10221770,(undefined *)0x0,0,
FUN_10266380(&DAT_106b09b8,(int)"+vgui_drawtree",(int)FUN_10221780,(undefined *)0x0,0,
FUN_10266530(&DAT_106b07a8,(int)"vgui_drawtree_panelalpha",&DAT_103256a0,0,
	"Show the panel alpha values in the vgui_drawtree view.",(int)FUN_10220990);
FUN_10266530(&DAT_106b0800,(int)"vgui_drawtree_panelfgcolor",&DAT_103256a0,0,
	"Show the panel fg color values in the vgui_drawtree view.",(int)FUN_10220990);
FUN_10266530(&DAT_106b0750,(int)"vgui_drawtree_panelptr",&DAT_103256a0,0,
	"Show the panel pointer values in the vgui_drawtree view.",(int)FUN_10220990);
FUN_10266530(&DAT_106b06a0,(int)"vgui_drawtree_popupsonly",&DAT_103256a0,0,
	"Draws the vgui popup list in hierarchy(1) or most recently used(2) order.",
FUN_10266530(&DAT_106b0858,(int)"vgui_drawtree_render_order",&DAT_103256a0,0,
	"List the vgui_drawtree panels in render order.",(int)FUN_10220990);
FUN_10266530(&DAT_106b0960,(int)"vgui_drawtree_scheme",&DAT_103256a0,0,
	"Show scheme file for each panel",(int)FUN_10220990);
FUN_10266530(&DAT_106b05f0,(int)"vgui_drawtree_visible",&DAT_10324480,0,"Draw the visible panels."
FUN_102664a0(&DAT_106b0aa0,(int)"showbudget_texture",&DAT_103256a0,0x4000,
	"Enable the texture budget panel.");
FUN_10266380(&DAT_106b0bbc,(int)"-showbudget_texture_global",(int)FUN_10222b40,&DAT_103236cf,
FUN_10266380(&DAT_106b0b98,(int)"+showbudget_texture_global",(int)FUN_10222b20,&DAT_103236cf,
FUN_10266700(&DAT_106b0af8,(int)"showbudget_texture_global_sum",&DAT_1034c850,0);
FUN_10266380(&DAT_106b0b74,(int)"-showbudget_texture",(int)FUN_10222b40,&DAT_103236cf,0x4000,
FUN_10266380(&DAT_106b0b50,(int)"+showbudget_texture",(int)FUN_10222b50,&DAT_103236cf,0x4000,
FUN_102664a0(&DAT_106b0d98,(int)"texture_budget_background_alpha",&DAT_103261e0,0x80,
	"how translucent the budget panel is");
FUN_10266530(&DAT_106b0d40,(int)"texture_budget_panel_bottom_of_history_fraction",&DAT_10378f00,
FUN_102664a0(&DAT_106b0a48,(int)"texture_budget_panel_global",&DAT_103256a0,0,
	"Show global times in the texture budget panel.");
FUN_10266530(&DAT_106b0ce8,(int)"texture_budget_panel_height",&DAT_1035ddd4,0x80,
	"height in pixels of the budget panel",(int)FUN_10222b10);
FUN_10266530(&DAT_106b0c90,(int)"texture_budget_panel_width",&DAT_1035dde0,0x80,
	"width in pixels of the budget panel",(int)FUN_10222b10);
FUN_10266530(&DAT_106b0be0,(int)"texture_budget_panel_x",&DAT_103256a0,0x80,
	"number of pixels from the left side of the game screen to draw the budget panel",
FUN_10266530(&DAT_106b0c38,(int)"texture_budget_panel_y",&DAT_1035dddc,0x80,
	"number of pixels from the top side of the game screen to draw the budget panel",
FUN_10266380(&DAT_106b0f6c,(int)"vprof_child",(int)FUN_10222f70,(undefined *)0x0,0,
FUN_102664a0(&DAT_106b0df8,(int)"vprof_graph",&DAT_103256a0,0,"Draw the vprof graph.");
FUN_10266700(&DAT_106b0ea8,(int)"vprof_graphheight",&DAT_1034f87c,0x80);
FUN_10266700(&DAT_106b0e50,(int)"vprof_graphwidth",&DAT_1035dde0,0x80);
FUN_10266380(&DAT_106b0f48,(int)"vprof_parent",(int)FUN_10223000,(undefined *)0x0,0,
FUN_10266380(&DAT_106b0f24,(int)"vprof_nextsibling",(int)FUN_10222fe0,(undefined *)0x0,0,
FUN_10266380(&DAT_106b0f00,(int)"vprof_prevsibling",(int)FUN_10223020,(undefined *)0x0,0,
FUN_10266380(&DAT_106b1160,(int)"-showvprof",(int)FUN_102254c0,(undefined *)0x0,0,(undefined *)0x0
FUN_10266380(&DAT_106b113c,(int)"+showvprof",(int)FUN_10225470,(undefined *)0x0,0,(undefined *)0x0
FUN_102662e0(&DAT_106b10f4,(int)"vprof_collapse_all",(int)FUN_10227400,
	"Collapse the whole vprof tree",0,(undefined *)0x0);
FUN_102662e0(&DAT_106b10d0,(int)"vprof_expand_all",(int)FUN_10227420,"Expand the whole vprof tree"
FUN_102662e0(&DAT_106b1118,(int)"vprof_expand_group",(int)FUN_10227440,
	"Expand a budget group in the vprof tree by name",0,(undefined *)0x0);
FUN_10266660(&DAT_106b1188,(int)"vprof_scope",&DAT_103236cf,0,
	"Set a specific scope to start showing vprof tree",0,0,0,0,(int)FUN_10224a20);
FUN_102664a0(&DAT_106b1020,(int)"vprof_unaccounted_limit",&DAT_1034bc44,0x80,
	"number of milliseconds that a node must exceed to turn red in the vprof panel");
FUN_102664a0(&DAT_106b0fc8,(int)"vprof_verbose",&DAT_10324480,0x80,
	"Set to one to show average and peak times");
FUN_102664a0(&DAT_106b1078,(int)"vprof_warningmsec",&DAT_1032e794,0x80,
	"Above this many milliseconds render the label red to indicate slow code.");
FUN_102664a0(&DAT_106f1c68,(int)"panel_test_title_safe",&DAT_103256a0,0x4000,
	"Test vgui panel positioning with title safe indentation");
FUN_10399fe0(&DAT_105fd248,(int)"ai_debug_directnavprobe",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd2a8,(int)"ai_no_steer",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd3f0,(int)"ai_moveprobe_debug",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd448,(int)"ai_moveprobe_jump_debug",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd4a0,(int)"ai_moveprobe_usetracelist",&DAT_10436dec,0);
FUN_10399bc0(&DAT_105fd550,(int)"ai_set_move_height_epsilon",(int)FUN_1005ee40,
	"Set how high AI bumps up ground walkers when checking steps",0,(undefined *)0x0);
FUN_10399fe0(&DAT_105fd4f8,(int)"ai_strong_optimizations_no_checkstand",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd620,(int)"ai_debug_nav",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd678,(int)"ai_navigator_generate_spikes",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fd6d0,(int)"ai_navigator_generate_spikes_strength",&DAT_1044d638,0);
FUN_10399fe0(&DAT_105fd728,(int)"ai_use_clipped_paths",&DAT_10436de8,0);
FUN_10399fe0(&DAT_105fd5c8,(int)"ai_vehicle_avoidance",&DAT_10436de8,0x4000);
FUN_10399d80(&DAT_105fd810,(int)"ai_nav_debug_experimental_pathing",&DAT_10436dec,0,
	"Draw paths tried during search for bodysnatcher pathing");
FUN_10399fe0(&DAT_105fd7b8,(int)"ai_no_node_cache",&DAT_10436dec,0);
FUN_10399bc0(&DAT_105fd880,(int)"ai_debug_node_connect",(int)FUN_1006c700,
	"Debug the attempted connection between two nodes",0,(undefined *)0x0);
FUN_10399fe0(&DAT_105fd8a8,(int)"ai_norebuildgraph",&DAT_10436dec,0);
FUN_10399d80(&DAT_105fd900,(int)"g_ai_threadedgraphbuild",&DAT_10436dec,0,
	"If true, use experimental threaded node graph building.");
FUN_10399fe0(&DAT_105fdb20,(int)"ai_no_talk_delay",&DAT_10436dec,0);
FUN_10399fe0(&DAT_105fe878,(int)"npc_ally_deathmessage",&DAT_10436de8,0x4000);
FUN_10399d80(&DAT_105fdb78,(int)"rr_debug_qa",&DAT_10436dec,0,
	"Set to 1 to see debug related to the Question & Answer system used to create conversations between allied NPCs."
FUN_10399d80(&DAT_105fda70,(int)"sk_ally_regen_time","0.3003",0,
	"Time taken for an ally to regenerate a point of health.");
FUN_10399d80(&DAT_105fdac8,(int)"sv_npc_talker_maxdist",&DAT_1044f208,0,
	"NPCs over this distance from the player won\'t attempt to speak.");
FUN_10399bc0(&DAT_105fe994,(int)"rr_reloadresponsesystems",(int)FUN_10075a10,
	"Reload all response system scripts.",0,(undefined *)0x0);
FUN_10399fe0(&DAT_10602990,(int)"ai_debugscriptconditions",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106033b0,(int)"npc_sentences",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10603430,(int)"ai_debug_speech",&DAT_10436dec,0);
FUN_10399bc0(&DAT_10603490,(int)"npc_speakall",(int)FUN_1007e470,
	"Force the npc to try and speak all their responses",0,(undefined *)0x0);
FUN_10399d80(&DAT_10603518,(int)"rr_followup_maxdist",&DAT_10451bd8,0x4000,
	"\'then ANY\' or \'then ALL\' response followups will be dispatched only to characters within this distance."
FUN_10399d80(&DAT_10603570,(int)"rr_thenany_score_slop",&DAT_1043880c,0x4000,
	"When computing respondents for a \'THEN ANY\' rule, all rule-matching scores within this much of the best score will be considered."
FUN_10399fe0(&DAT_10603640,(int)"ai_find_lateral_cover",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10603698,(int)"ai_find_lateral_los",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10603718,(int)"g_debug_trackpather",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_106037a8,(int)"free_pass_peek_debug",&DAT_10436dec,0);
FUN_10399d80(&DAT_10603aa0,(int)"mp_facefronttime",&DAT_1045424c,0x2002,
	"After this amount of time of standing in place but aiming to one side, go ahead and move feet to face upper body."
FUN_10399d80(&DAT_10603a48,(int)"mp_feetyawrate",&DAT_1043da4c,0x2002,
	"How many degrees per second that we can turn our feet or upper body.");
FUN_10399d80(&DAT_10603af8,(int)"mp_ik",&DAT_10436de8,0x2002,"Use IK on in-place turns.");
FUN_10399d80(&DAT_106039f0,(int)"sv_showanimstate_activities",&DAT_10436de8,0x4002,
	"Show activities in the (server) animation state display.");
FUN_10399d80(&DAT_10603998,(int)"sv_showanimstate_log",&DAT_10436dec,0x4002,
	"1 to output sv_showanimstate to Msg(). 2 to store in AnimStateServer.log. 3 for both."
FUN_10399d80(&DAT_10603940,(int)"sv_showanimstate",&DAT_1043b6a0,0x4002,
	"Show the (server) animation state for the specified entity (-1 for none).");
FUN_10399fe0(&DAT_10603b58,(int)"ai_sequence_debug",&DAT_10436dec,0);
FUN_10399d80(&DAT_10603ce0,(int)"ai_setupbones_debug",&DAT_10436dec,0,
	"Shows that bones that are setup every think");
FUN_10399d80(&DAT_10603c30,(int)"npc_height_adjust",&DAT_10436de8,0x80,
	"Enable test mode for ik height adjustment");
FUN_10399d80(&DAT_10603c88,(int)"sv_pvsskipanimation",&DAT_10436de8,0x80,
	"Skips SetupBones when npc\'s are outside the PVS");
FUN_10399fe0(&DAT_10604af0,(int)"ai_force_serverside_ragdoll",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10604a98,(int)"ai_show_hull_attacks",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10604b48,(int)"ai_use_visibility_cache",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10604c90,(int)"phys_impactforcescale",&DAT_10436e38,0);
FUN_10399fe0(&DAT_10604c38,(int)"phys_stressbodyweights",&DAT_10456018,0);
FUN_10399fe0(&DAT_10604ce8,(int)"phys_upimpactforcescale","0.375",0);
FUN_10399fe0(&DAT_106050f8,(int)"weapon_showproficiency",&DAT_10436dec,0);
FUN_10399c60(&DAT_106051f8,(int)"reload_weapondata_server",(int)FUN_1009dc40,
	"Reload Weapon Script for Active Weapon (Server Side)",0x4000,(undefined *)0x0);
FUN_10399e10(&DAT_10605bd8,(int)"ai_debug_los",&DAT_10436dec,0x4000,
	"NPC Line-Of-Sight debug mode. If 1, solid entities that block NPC LOC will be highlighted with white bounding boxes. If 2, it\'ll show non-solid entities that would do it if they were solid."
FUN_10399fe0(&DAT_10605ad8,(int)"autoaim_viewing_client",&DAT_10436de8,2);
FUN_10399fe0(&DAT_10605b30,(int)"debug_overlay_fullposition",&DAT_10436dec,0);
FUN_10399bc0(&DAT_10605ddc,(int)"ent_absbox",(int)FUN_100a4dc0,
	"Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605e24,(int)"ent_attachments",(int)FUN_100a4e00,
	"Displays the attachment points on an entity.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_106060ac,(int)"ent_autoaim",(int)FUN_100a4e30,
	"Displays the entity\'s autoaim radius.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
FUN_10399bc0(&DAT_10605db8,(int)"ent_bbox",(int)FUN_100a4e60,
	"Displays the movement bounding box for the given entity(ies) in orange.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605f8c,(int)"ent_cancelpendingentfires",(int)FUN_100a4ea0,
	"Cancels all ent_fire created outputs that are currently waiting for their delay to expire."
FUN_10399bc0(&DAT_10606128,(int)"ent_create",(int)FUN_100a4ee0,
	"Creates an entity of the given type where the player is looking.",0x4004,
FUN_10399bc0(&DAT_10605f20,(int)"ent_dump",(int)FUN_100a50a0,"Usage:\n   ent_dump <entity name>\n"
FUN_10399cf0(&DAT_10605f68,(int)"ent_fire",(int)&PTR_vftable_1059d300,
	"Usage:\n   ent_fire <target> [action] [value] [delay]\n",0x4000,
FUN_10399bc0(&DAT_10605fb0,(int)"ent_info",(int)FUN_100a5190,"Usage:\n   ent_info <class name>\n",
FUN_10399bc0(&DAT_10605fd4,(int)"ent_messages",(int)FUN_100a5330,
	"Toggles input/output message display for the selected entity(ies).  The name of the entity will be displayed as well as any messages that it sends or receives.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at"
FUN_10399d80(&DAT_10605c30,(int)"ent_messages_draw",&DAT_10436dec,0x4000,
	"Visualizes all entity input/output activity.");
FUN_10399bc0(&DAT_10605d4c,(int)"ent_name",(int)FUN_100a5370,(undefined *)0x0,0x4000,
FUN_10399bc0(&DAT_10606170,(int)"ent_orient",(int)FUN_100a53b0,
	"Orient the specified entity to match the player\'s angles. By default, only orients target entity\'s YAW. Use the \'allangles\' option to orient on all axis.\n\tFormat: ent_orient <entity name> <optional: allangles>"
FUN_10399c60(&DAT_10605ff8,(int)"ent_pause",(int)FUN_100a5490,
	"Toggles pausing of input/output message processing for entities.  When turned on processing of all message will stop.  Any messages displayed with \'ent_messages\' will stop fading and be displayed indefinitely. To step through the messages one by one use \'ent_step\'."
FUN_10399bc0(&DAT_10606040,(int)"ent_pivot",(int)FUN_100a54f0,
	"Displays the pivot for the given entity(ies).\n\t(y=up=green, z=forward=blue, x=left=red). \n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605e00,(int)"ent_rbox",(int)FUN_100a5530,
	"Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605e6c,(int)"ent_remove",(int)FUN_100a5570,
	"Removes the given entity(s)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605e90,(int)"ent_remove_all",(int)FUN_100a56d0,
	"Removes all entities of the specified type\n\tArguments:   \t{entity_name} / {class_name} "
FUN_10399bc0(&DAT_10605d94,(int)"ent_script_dump",(int)FUN_100a5810,
	"Dumps the names and values of this entity\'s script scope to the console\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605eb4,(int)"ent_setname",(int)FUN_100a5850,
	"Sets the targetname of the given entity(s)\n\tArguments:   \t{new entity name} {entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399d80(&DAT_106059b8,(int)"ent_show_contexts",&DAT_10436dec,0,
	"Show entity contexts in ent_text display");
FUN_10399bc0(&DAT_10606088,(int)"ent_show_response_criteria",(int)FUN_100a59f0,
	"Print, to the console, an entity\'s current criteria set used to select responses.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10606064,(int)"ent_step",(int)FUN_100a5b60,
	"When \'ent_pause\' is set this will step through one waiting input / output message at a time."
FUN_10399bc0(&DAT_1060614c,(int)"ent_teleport",(int)FUN_100a5ba0,
	"Teleport the specified entity to where the player is looking.\n\tFormat: ent_teleport <entity name>"
FUN_10399bc0(&DAT_10605d70,(int)"ent_text",(int)FUN_100a5bf0,
	"Displays text debugging information about the given entity(ies) on top of the entity (See Overlay Text)\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605e48,(int)"ent_viewoffset",(int)FUN_100a5c30,
	"Displays the eye position for the given entity(ies) in red.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_10605ed8,(int)"find_ent",(int)FUN_100a5c60,
	"Find and list all entities with classnames or targetnames that contain the specified substring.\nFormat: find_ent <substring>\n"
FUN_10399bc0(&DAT_10605efc,(int)"find_ent_index",(int)FUN_100a5d80,
	"Display data for entity matching specified index.\nFormat: find_ent_index <index>\n"
FUN_10399bc0(&DAT_10605f44,(int)"firetarget",(int)FUN_100a5150,(undefined *)0x0,0x4000,
FUN_10399c60(&DAT_1060601c,(int)"picker",(int)FUN_100a54d0,
	"Toggles \'picker\' mode.  When picker is on, the bounding box, pivot and debugging text is displayed for whatever entity the player is looking at.\n\tArguments:\tfull - enables all debug information"
FUN_10399fe0(&DAT_106060d0,(int)"step_spline",&DAT_10436dec,0);
FUN_10399d80(&DAT_10605960,(int)"sv_netvisdist","10000",0x4002,
	"Test networking visibility distance");
FUN_10399fe0(&DAT_10605a10,(int)"sv_script_think_interval",&DAT_104388e4,0);
FUN_10399fe0(&DAT_10607298,(int)"ai_debug_shoot_positions",&DAT_10436dec,0x6000);
FUN_10399fe0(&DAT_10607240,(int)"ai_shot_bias_max",&DAT_10436e38,0x2000);
FUN_10399fe0(&DAT_106071e8,(int)"ai_shot_bias_min",&DAT_1045b3b8,0x2000);
FUN_10399fe0(&DAT_10607190,(int)"ent_debugkeys",&DAT_1043677a,0);
FUN_10399fe0(&DAT_10607138,(int)"hl2_episodic",&DAT_10436dec,0x2000);
FUN_10399d80(&DAT_10607540,(int)"ai_expression_frametime",&DAT_1045ce04,0,
	"Maximum frametime to still play background expressions.");
FUN_10399d80(&DAT_106074e8,(int)"ai_expression_optimization",&DAT_10436dec,0,
	"Disable npc background expressions when you can\'t see them.");
FUN_10399fe0(&DAT_10607598,(int)"flex_expression",&DAT_1045cf6c,0);
FUN_10399fe0(&DAT_106075f0,(int)"flex_talk",&DAT_10436dec,0);
FUN_10399d80(&DAT_10607350,(int)"scene_showlook",&DAT_10436dec,0x80,
	"When playing back, show the directions of look events.");
FUN_10399d80(&DAT_106073a8,(int)"scene_showmoveto",&DAT_10436dec,0x80,
	"When moving, show the end location.");
FUN_10399d80(&DAT_10607400,(int)"scene_showunlock",&DAT_10436dec,0x80,
	"Show when a vcd is playing but normal AI is running.");
FUN_10399d80(&DAT_10607cf0,(int)"sv_allchat",&DAT_10436de8,0x100,
	"Players can receive all other players\' text chat, no death restrictions");
FUN_10399d80(&DAT_10607d48,(int)"tf_escort_score_rate",&DAT_10436de8,0x4000,
	"Score for escorting the train, in points per second");
FUN_10399fe0(&DAT_10608090,(int)"physicsshadowupdate_render",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106080e8,(int)"physicsshadowupdate_render_time",&DAT_10436e38,0);
FUN_10399d80(&DAT_10607e80,(int)"player_can_use_painted_power",&DAT_10436dec,0x2002,
	"Allow/disallow players to be painted.");
FUN_10399d80(&DAT_10607ed8,(int)"player_loses_painted_power_over_time",&DAT_10436de8,0x2002,
	"The player should lose the power after having it for player_paint_effects_duration."
FUN_10399d80(&DAT_10607f30,(int)"player_paint_effects_duration",&DAT_1045e7ac,0x2002,
	"Amount of time player maintains her power after being painted.");
FUN_10399d80(&DAT_10607f88,(int)"player_paint_effects_enabled",&DAT_10436de8,0x2002,
	"Display the visual effects of being painted.");
FUN_10399d80(&DAT_10607fe0,(int)"player_paint_screen_effect_restart_delay",&DAT_1045e898,0x2002,
	"Time to wait between particle system restarts when the player gets painted multiple times in rapid succession."
FUN_10399d80(&DAT_106081f0,(int)"smoothstairs",&DAT_10436de8,0x2000,
	"Smooth player eye z coordinate when traversing stairs.");
FUN_10399d80(&DAT_10608140,(int)"sv_debug_player_use",&DAT_10436dec,0x2000,
	"Visualizes +use logic. Green cross=trace success, Red cross=trace too far, Green box=radius success"
FUN_10399d80(&DAT_10608038,(int)"sv_footstep_sound_frequency",&DAT_1045e938,0x6000,
	"How frequent to hear the player\'s step sound or how fast they appear to be running from first person."
FUN_10399fe0(&DAT_10608198,(int)"sv_suppress_viewpunch",&DAT_10436dec,0x6002);
FUN_10399c60(&DAT_1060b1d8,(int)"dumpeventqueue",(int)FUN_100d0950,
	"Dump the contents of the Entity I/O event queue to the console.",0,(undefined *)0x0)
FUN_10399c60(&DAT_1060b5cc,(int)"bug_swap",(int)FUN_100d3060,
	"Automatically swaps the current weapon for the bug bait and back again.",0x4000,
FUN_10399bc0(&DAT_1060b518,(int)"drawcross",(int)FUN_100d2ba0,
	"Draws a cross at the given location\n\tArguments: x y z",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b4f4,(int)"drawline",(int)FUN_100d2d10,
	"Draws line between two 3D Points.\n\tGreen if no collision\n\tRed is collides with something\n\tArguments: x1 y1 z1 x2 y2 z2"
FUN_10399bc0(&DAT_1060b6d8,(int)"ent_setang",(int)FUN_100d4b60,"Set entity angles",0x4000,
FUN_10399bc0(&DAT_1060b6b4,(int)"ent_setpos",(int)FUN_100d4cb0,"Move entity to position",0x4000,
FUN_10399c60(&DAT_1060b690,(int)&DAT_10465410,(int)FUN_100d2de0,
	"Toggle. Player becomes invulnerable.",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b7f8,(int)"groundlist",(int)FUN_100d2e60,
	"Display ground entity list <index>",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b7d4,(int)"hurtme",(int)FUN_100d2ee0,
	"Hurts the player.\n\tArguments: <health to lose>",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b614,(int)"noclip",(int)FUN_100d4e00,
	"Toggle. Player becomes non-solid and flies.  Optional argument of 0 or 1 to force enable/disable"
FUN_10399fe0(&DAT_1060b638,(int)"noclip_fixup",&DAT_10436de8,0x4000);
FUN_10399c60(&DAT_1060b7b0,(int)"notarget",(int)FUN_100d2fe0,
	"Toggle. Player becomes hidden to NPCs.",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b53c,(int)&DAT_1046407c,(int)FUN_100d4ea0,"Display player message",0,
FUN_10399bc0(&DAT_1060b560,(int)"say_team",(int)FUN_100d4f30,"Display player message to team",0,
FUN_10399bc0(&DAT_1060b744,(int)"setang",(int)FUN_100d3510,
	"Snap player eyes to specified pitch yaw <roll:optional> (must have sv_cheats).",
FUN_10399bc0(&DAT_1060b78c,(int)"setang_exact",(int)FUN_100d4fa0,
	"Snap player eyes and orientation to specified pitch yaw <roll:optional> (must have sv_cheats)."
FUN_10399bc0(&DAT_1060b584,(int)"setmodel",(int)FUN_100d30f0,"Changes\'s player\'s model",0x4000,
FUN_10399bc0(&DAT_1060b6fc,(int)"setpos",(int)FUN_100d50f0,
	"Move player to specified origin (must have sv_cheats).",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1060b768,(int)"setpos_exact",(int)FUN_100d52a0,
	"Move player to an exact specified origin (must have sv_cheats).",0x4000,
FUN_10399bc0(&DAT_1060b720,(int)"setpos_player",(int)FUN_100d5410,
	"Move specified player to specified origin (must have sv_cheats).",0x4000,
FUN_10399bc0(&DAT_1060b5a8,(int)"test_dispatcheffect",(int)FUN_100d3180,
	"Test a clientside dispatch effect.\n\tUsage: test_dispatcheffect <effect name> <distance away> <flags> <magnitude> <scale>\n\tDefaults are: <distance 1024> <flags 0> <magnitude 0> <scale 0>\n"
FUN_10399bc0(&DAT_1060b5f0,(int)&DAT_104652e8,(int)FUN_100d34c0,
	"Use a particular weapon\t\nArguments: <weapon_name>",0,(undefined *)0x0);
FUN_10399fe0(&DAT_1060cd18,(int)"ai_debug_ragdoll_magnets",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1060cd98,(int)"debug_visibility_monitor",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_1060cdf0,(int)"vismon_poll_frequency",&DAT_104674e8,0x4000);
FUN_10399fe0(&DAT_1060ce48,(int)"vismon_trace_limit",&DAT_10467504,0x4000);
FUN_10399c60(&DAT_1060ec08,(int)"test_entity_blocker",(int)FUN_100ebca0,
	"Test command that drops an entity blocker out in front of the player.",0x4000,
FUN_10399d80(&DAT_1063fa20,(int)"cl_csm_auto_entity",&DAT_10436de8,0,&DAT_1043677a);
FUN_10399bc0(&DAT_1063fabc,(int)"cl_csm_server_status",(int)FUN_100f1b40,
	"Usage:\n cl_csm_server_status\n",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1063fda8,(int)"dbghist_addline",(int)FUN_100f2350,
	"Add a line to the debug history. Format: <category id> <line>",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1063fdcc,(int)"dbghist_dump",(int)FUN_100f2390,
	"Dump the debug history to the console. Format: <category id>\n    Categories:\n     0: Entity I/O\n     1: AI Decisions\n     2: Scene Print\n     3: Alyx Blind\n     4: Log of damage done to player"
FUN_10399bc0(&DAT_106403bc,(int)"create_flashlight",(int)FUN_100f4cd0,(undefined *)0x0,0x4000,
FUN_10399bc0(&DAT_106416c0,(int)"fadein",(int)FUN_100fa490,
	"fadein {time r g b}: Fades the screen in from black or from the specified color over the given number of seconds."
FUN_10399bc0(&DAT_1064169c,(int)"fadeout",(int)FUN_100fa4e0,
	"fadeout {time r g b}: Fades the screen to black or to the specified color over the given number of seconds."
FUN_10399c60(&DAT_10641754,(int)"creditsdone",(int)FUN_100fba60,(undefined *)0x0,0,
FUN_10399bc0(&DAT_1064177c,(int)"test_outtro_stats",(int)FUN_100fb990,(undefined *)0x0,0x4000,
FUN_10399c60(&DAT_10641840,(int)"shake",(int)FUN_100fd950,"Shake the screen.",0x4000,
FUN_10399d80(&DAT_106418c8,(int)"fx_new_sparks",&DAT_10436de8,0x4000,"Use new style sparks.\n");
FUN_10399fe0(&DAT_10642150,(int)"fire_absorbrate",&DAT_1045424c,0);
FUN_10399fe0(&DAT_10642360,(int)"fire_dmgbase",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10642410,(int)"fire_dmginterval",&DAT_10436e38,0);
FUN_10399fe0(&DAT_10642308,(int)"fire_dmgscale",&DAT_104388e4,0);
FUN_10399fe0(&DAT_10642200,(int)"fire_extabsorb",&DAT_10436df0,0);
FUN_10399fe0(&DAT_106421a8,(int)"fire_extscale",&DAT_10467504,0);
FUN_10399fe0(&DAT_106423b8,(int)"fire_growthrate",&DAT_10436e38,0);
FUN_10399fe0(&DAT_10642258,(int)"fire_heatscale",&DAT_10436e38,0);
FUN_10399fe0(&DAT_106422b0,(int)"fire_incomingheatscale",&DAT_104388e4,0);
FUN_10399fe0(&DAT_106420f8,(int)"fire_maxabsorb",&DAT_10438740,0);
FUN_10399d80(&DAT_106427f0,(int)"fish_dormant",&DAT_10436dec,0x6000,
	"Turns off interactive fish behavior. Fish become immobile and unresponsive.");
FUN_10399d80(&DAT_106432d0,(int)"fog_volume_debug",&DAT_10436dec,0,
	"If enabled, prints diagnostic information about the current fog volume");
FUN_10399fe0(&DAT_10643880,(int)"func_break_max_pieces",&DAT_104788a0,0x2080);
FUN_10399fe0(&DAT_106438d8,(int)"func_break_reduction_factor",&DAT_104674e8,0);
FUN_10399fe0(&DAT_10643a68,(int)"debug_smash_force",&DAT_1048467c,0);
FUN_10399d80(&DAT_10644618,(int)"elevator_movedelay",&DAT_10485cb8,2,
	"Time delay for elevator movement start.");
FUN_10399d80(&DAT_10644b18,(int)"sv_showladders",&DAT_10436dec,0,
	"Show bbox and dismount points for all ladders (must be set before level load.)\n");
FUN_10399fe0(&DAT_10645d50,(int)"mp_autocrosshair",&DAT_10436de8,0x100);
FUN_10399fe0(&DAT_10645f08,(int)"mp_allowNPCs",&DAT_10436de8,0x100);
FUN_10399fe0(&DAT_10645da8,(int)"decalfrequency",&DAT_104897f0,0x100);
FUN_10399fe0(&DAT_10645eb0,(int)"mp_defaultteam",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10645930,(int)"displaysoundlist",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10645b98,(int)"mp_falldamage",&DAT_10436dec,0x100);
FUN_10399fe0(&DAT_10645cf8,(int)"mp_flashlight",&DAT_10436dec,0x100);
FUN_10399fe0(&DAT_10645ca0,(int)"mp_footsteps",&DAT_10436de8,0x100);
FUN_10399fe0(&DAT_10645c48,(int)"mp_forcerespawn",&DAT_10436de8,0x100);
FUN_10399fe0(&DAT_10645b40,(int)"mp_fraglimit",&DAT_10436dec,0x100);
FUN_10399fe0(&DAT_106459e0,(int)"loopsingleplayermaps",&DAT_10436dec,0x6000);
FUN_10399fe0(&DAT_10645a90,(int)"lservercfgfile","listenserver.cfg",0);
FUN_10399e10(&DAT_10645988,(int)"mapcyclefile","mapcycle.txt",0,
	"Name of the .txt file used to cycle the maps on multiplayer servers ",
FUN_10399fe0(&DAT_10645a38,(int)"servercfgfile","server.cfg",0);
FUN_10399fe0(&DAT_10645f60,(int)"suitvolume",&DAT_10489854,0x80);
FUN_10399fe0(&DAT_10645e00,(int)"mp_teamlist","hgrunt;scientist",0x100);
FUN_10399fe0(&DAT_10645e58,(int)"mp_teamoverride",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10645ae8,(int)"mp_teamplay",&DAT_10436dec,0x100);
FUN_10399fe0(&DAT_10645bf0,(int)"mp_weaponstay",&DAT_10436dec,0x100);
FUN_10399fe0(&DAT_10646358,(int)"ai_post_frame_navigation",&DAT_10436dec,0);
FUN_10399e10(&DAT_106464d8,(int)"hostfile","host.txt",0x80000,"The HOST file to load.",
FUN_10399e10(&DAT_10646480,(int)"motdfile","motd.txt",0x80000,"The MOTD file to load.",
FUN_10399fe0(&DAT_106462a8,(int)"mp_dev_gamemode",&DAT_1043677a,2);
FUN_10399d80(&DAT_10646080,(int)"occlusion_test_camera_margins",&DAT_10467504,0x80000,
	"Amount by which the camera (viewer\'s eye) is expanded for occlusion test. This should be large enough to accommodate eye\'s movement within a frame or two"
FUN_10399d80(&DAT_106460d8,(int)"occlusion_test_jump_margin",&DAT_10467504,0x80000,
	"Amount by which the player bounding box is expanded up for occlusion test to account for jumping. This margin should be large enough to accommodate player movement within a frame or two. Affects both camera box and player box."
FUN_10399d80(&DAT_10646028,(int)"occlusion_test_shadow_length",&DAT_104691d8,0x80000,
	"Max length of completely occluded shadow to consider a player for occlusion test. If shadow provably stops at this distance, the player may be considered for occlusion test. For longer shadows, we just don\'t do occlusion because we are not likely to find full occlusion when one of the boxes is expanded too much."
FUN_10399d80(&DAT_10646130,(int)"pvs_min_player_distance",&DAT_1048ad00,0x80000,
	"Min distance to player at which PVS is used. At closer distances, PVS assumes we can see a shadow or something else from the player, so it\'s safer to just always be \"Visible\""
FUN_10399d80(&DAT_10646250,(int)"sv_autosave",&DAT_10436de8,0,
	"Set to 1 to autosave game on level transition. Does not affect autosave triggers.");
FUN_10399d80(&DAT_106461f8,(int)"sv_force_transmit_ents",&DAT_10436dec,0x4002,
	"Will transmit all entities to client, regardless of PVS conditions (will still skip based on transmit flags, however)."
FUN_10399fe0(&DAT_106461a0,(int)"sv_massreport",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106465a0,(int)"sv_occlude_players",&DAT_10436de8,0x80000);
FUN_10399d80(&DAT_10646300,(int)"sv_showhitboxes",&DAT_1043b6a0,0x4000,
	"Send server-side hitboxes for specified entity to client (NOTE:  this uses lots of bandwidth, use on listen server only)."
FUN_10399fe0(&DAT_106463b0,(int)"sv_threaded_init",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10646530,(int)"sv_unlockedchapters",&DAT_10436de8,0x80);
FUN_10399fe0(&DAT_10646428,(int)"trace_report",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10646750,(int)"dispcoll_drawplane",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10646848,(int)"sv_optimizedmovement",&DAT_10436de8,0x2002);
FUN_10399fe0(&DAT_106468c8,(int)"g_Language",&DAT_10436dec,0x2000);
FUN_10399fe0(&DAT_106469a8,(int)"old_radiusdamage",&DAT_1043880c,0x2000);
FUN_10399fe0(&DAT_10646920,(int)"sk_autoaim_mode",&DAT_10436de8,0x2080);
FUN_10399fe0(&DAT_10646a00,(int)"skill",&DAT_10436de8,0x80);
FUN_10399d80(&DAT_1064aa90,(int)"gamestats_file_output_directory",&DAT_1043677a,0,
	"When -gamestatsfileoutputonly is specified, file will be emitted here instead of to modpath\n"
FUN_10399c60(&DAT_1064ab28,(int)"dumpgamestringtable",(int)FUN_10121530,
	"Dump the contents of the game string table to the console.",0x4000,(undefined *)0x0)
FUN_10399d80(&DAT_1064ac00,(int)"mp_friendlyfire",&DAT_10436dec,0x2100,
	"Allows team members to injure other members of their team");
FUN_10399d80(&DAT_1064aba8,(int)"mp_allowspectators",&DAT_10436e38,0x2000,
	"toggles whether the server allows spectator mode or not");
FUN_10399d80(&DAT_1064ac58,(int)"mp_fadetoblack",&DAT_10436dec,0x2100,
	"fade a player\'s screen to black when he dies");
FUN_10399e10(&DAT_1064ab50,(int)"mp_forcecamera",&DAT_10436de8,0x2000,
	"Restricts spectator modes for dead players",(int)FUN_10121810);
FUN_10399d80(&DAT_1064aea0,(int)"global_event_log_enabled",&DAT_10436dec,0x4000,
	"Enables the global event log system");
FUN_10399bc0(&DAT_1064af6c,(int)"dump_globals",(int)FUN_101247f0,"Dump all global entities/states"
FUN_10399bc0(&DAT_1064af98,(int)"server_game_time",(int)FUN_10124810,
	"Gives the game time in seconds (server\'s curtime)",0,(undefined *)0x0);
FUN_10399c60(&DAT_1064b29c,(int)"sv_clearhinthistory",(int)FUN_10126140,
	"Clear memory of server side hints displayed to the player.",0,(undefined *)0x0);
FUN_10399d80(&DAT_1064b370,(int)"tv_allow_camera_man",&DAT_10436de8,0,
	"Auto director allows spectators to become camera man");
FUN_10399d80(&DAT_1064b318,(int)"tv_allow_static_shots",&DAT_10436de8,0,
	"Auto director uses fixed level cameras for shots");
FUN_10399ea0(&DAT_1064b2c0,(int)"tv_delay",&DAT_104788a0,0,"TacticalTV broadcast delay in seconds"
FUN_10399bc0(&DAT_1064c2c4,(int)"global_set",(int)FUN_10131370,
	"global_set <globalname> <state>: Sets the state of the given env_global (0 = OFF, 1 = ON, 2 = DEAD)."
FUN_10399fe0(&DAT_1064c780,(int)"debug_materialmodifycontrol",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1064d820,(int)"r_AirboatViewDampenDamp",&DAT_10436e38,0x6100);
FUN_10399fe0(&DAT_1064d7c8,(int)"r_AirboatViewDampenFreq",&DAT_1049bf50,0x6100);
FUN_10399fe0(&DAT_1064d878,(int)"r_AirboatViewZHeight",&DAT_1043880c,0x6100);
FUN_10399fe0(&DAT_1064d718,(int)"r_JeepViewDampenDamp",&DAT_10436e38,0x6100);
FUN_10399fe0(&DAT_1064d6c0,(int)"r_JeepViewDampenFreq",&DAT_1049bf50,0x6100);
FUN_10399fe0(&DAT_1064d770,(int)"r_JeepViewZHeight",&DAT_1049bf84,0x6100);
FUN_10399fe0(&DAT_1064d668,(int)"r_VehicleViewDampen",&DAT_10436de8,0x6100);
FUN_10399fe0(&DAT_1064d198,(int)"sv_accelerate",&DAT_104897f0,0x2102);
FUN_10399fe0(&DAT_1064d1f0,(int)"sv_airaccelerate",&DAT_104897f0,0x2102);
FUN_10399d80(&DAT_1064d5b8,(int)"sv_backspeed",&DAT_10438884,0x2002,
	"How much to slow down backwards motion");
FUN_10399d80(&DAT_1064d458,(int)"sv_bounce",&DAT_10436dec,0x2102,
	"Bounce multiplier for when physically simulated objects collide with other objects."
FUN_10399d80(&DAT_1064d2f8,(int)"sv_footsteps",&DAT_10436de8,0x2102,
	"Play footstep sound for players");
FUN_10399d80(&DAT_1064d400,(int)"sv_friction",&DAT_1049bd98,0x2102,"World friction.");
FUN_10399d80(&DAT_1064ce80,(int)"sv_gravity",&DAT_10468bc0,0x6100,"World gravity.");
FUN_10399d80(&DAT_1064ced8,(int)"sv_gravity_alt",&DAT_104688a4,0x6100,"Sets alternate-gravity.");
FUN_10399fe0(&DAT_1064d140,(int)"sv_maxspeed",&DAT_10469420,0x2102);
FUN_10399d80(&DAT_1064d4b0,(int)"sv_maxvelocity",&DAT_1049be58,0x2002,
	"Maximum speed any ballistically moving object is allowed to attain per axis.");
FUN_10399fe0(&DAT_1064cf88,(int)"sv_noclipaccelerate",&DAT_10436df0,0x2180);
FUN_10399fe0(&DAT_1064cfe0,(int)"sv_noclipspeed",&DAT_10436df0,0x2180);
FUN_10399d80(&DAT_1064d3a8,(int)"sv_rollangle",&DAT_10436dec,0x2102,"Max view roll angle");
FUN_10399fe0(&DAT_1064d350,(int)"sv_rollspeed",&DAT_104692b8,0x2102);
FUN_10399d80(&DAT_1064d560,(int)"sv_skyname","sky_ti_09_hdr",0x2080,
	"Current name of the skybox texture");
FUN_10399fe0(&DAT_1064d038,(int)"sv_specaccelerate",&DAT_10436df0,0x2180);
FUN_10399fe0(&DAT_1064d0e8,(int)"sv_specnoclip",&DAT_10436de8,0x2180);
FUN_10399fe0(&DAT_1064d090,(int)"sv_specspeed",&DAT_1045424c,0x2180);
FUN_10399fe0(&DAT_1064d508,(int)"sv_stepsize",&DAT_1049be70,0x2102);
FUN_10399d80(&DAT_1064cf30,(int)"sv_stopspeed",&DAT_10469128,0x2102,
	"Minimum stopping speed when on ground.");
FUN_10399fe0(&DAT_1064d248,(int)"sv_wateraccelerate",&DAT_104897f0,0x2102);
FUN_10399d80(&DAT_1064d610,(int)"sv_waterdist",&DAT_10467504,0x2002,
	"Vertical view fixup when eyes are near water plane.");
FUN_10399fe0(&DAT_1064d2a0,(int)"sv_waterfriction",&DAT_10436de8,0x2102);
FUN_10399ea0(&DAT_1064d8f8,(int)"mp_chattime",&DAT_104897f0,0x2000,
	"amount of time players can chat after the game is over",1,0x3f800000,1,0x42f00000);
FUN_10399d80(&DAT_1064dbb8,(int)"mp_clan_ready_signal","ready",4,
	"Text that team leader from each team must speak for the match to begin");
FUN_10399d80(&DAT_1064db60,(int)"mp_clan_readyrestart",&DAT_10436dec,4,
	"If non-zero, game will restart once someone from each team gives the ready signal");
FUN_10399d80(&DAT_1064da00,(int)"mp_restartgame",&DAT_10436dec,4,
	"If non-zero, game will restart in the specified number of seconds");
FUN_10399e10(&DAT_1064d950,(int)"mp_timelimit",&DAT_10436dec,0x2100,"game time per map in minutes"
FUN_10399d80(&DAT_1064db08,(int)"mp_waitingforplayers_cancel",&DAT_10436dec,4,
	"Set to 1 to end the WaitingForPlayers period.");
FUN_10399d80(&DAT_1064dab0,(int)"mp_waitingforplayers_restart",&DAT_10436dec,4,
	"Set to 1 to start or restart the WaitingForPlayers period.");
FUN_10399d80(&DAT_1064da58,(int)"mp_waitingforplayers_time",&DAT_10436dec,4,
	"WaitingForPlayers time length in seconds");
FUN_10399d80(&DAT_1064dc10,(int)"nextlevel",&DAT_1043677a,0x104,
	"If set to a valid map name, will change to this map during the next changelevel");
FUN_10399d80(&DAT_1064d9a8,(int)"tv_delaymapchange",&DAT_10436dec,0,
	"Delays map change until broadcast is complete");
FUN_10399bc0(&DAT_1064dcb8,(int)"clear_debug_overlays",(int)FUN_10142030,"clears debug overlays",0
FUN_10399d80(&DAT_1064dde8,(int)"sv_pushaway_clientside",&DAT_10436dec,0x2002,
	"Clientside physics push away (0=off, 1=only localplayer, 1=all players)");
FUN_10399d80(&DAT_1064dce0,(int)"sv_pushaway_force","30000",0x2002,
	"How hard physics objects are pushed away from the players on the server.");
FUN_10399d80(&DAT_1064dd90,(int)"sv_pushaway_max_force",&DAT_10438830,0x2002,
	"Maximum amount of force applied to physics objects by players.");
FUN_10399d80(&DAT_1064de98,(int)"sv_pushaway_max_player_force","10000",0x6002,
	"Maximum of how hard the player is pushed away from physics objects.");
FUN_10399d80(&DAT_1064dd38,(int)"sv_pushaway_min_player_speed",&DAT_1049cdec,0x2002,
	"If a player is moving slower than this, don\'t push away physics objects (enables ducking behind things)."
FUN_10399d80(&DAT_1064de40,(int)"sv_pushaway_player_force","200000",0x6002,
	"How hard the player is pushed away from physics objects (falls off with inverse square of distance)."
FUN_10399d80(&DAT_1064dfc8,(int)"particle_test_attach_attachment",&DAT_10436dec,0x4000,
	"Attachment index for attachment mode");
FUN_10399d80(&DAT_1064df70,(int)"particle_test_attach_mode","follow_attachment",0x4000,
	"Possible Values: \'start_at_attachment\', \'follow_attachment\', \'start_at_origin\', \'follow_origin\'"
FUN_10399d80(&DAT_1064df18,(int)"particle_test_file",&DAT_1043677a,0x4000,
	"Name of the particle system to dynamically spawn");
FUN_10399bc0(&DAT_1064e020,(int)"particle_test_start",(int)FUN_101426c0,
	"Dispatches the test particle system with the parameters specified in particle_test_file,\n particle_test_attach_mode and particle_test_attach_param on the entity the player is looking at.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399bc0(&DAT_1064e044,(int)"particle_test_stop",(int)FUN_10142700,
	"Stops all particle systems on the selected entities.\n\tArguments:   \t{entity_name} / {class_name} / no argument picks what player is looking at "
FUN_10399d80(&DAT_1064e758,(int)"g_debug_constraint_sounds",&DAT_10436dec,0x4000,
	"Enable debug printing about constraint sounds.");
FUN_10399bc0(&DAT_1064eeb0,(int)"air_density",(int)FUN_1014c3a0,
	"Changes the density of air for drag computations.",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_1064eda8,(int)"collision_shake_amp",&DAT_104a4250,0);
FUN_10399fe0(&DAT_1064ee00,(int)"collision_shake_freq",&DAT_10436e20,0);
FUN_10399fe0(&DAT_1064ee58,(int)"collision_shake_time",&DAT_10436e20,0);
FUN_10399fe0(&DAT_1064e9a8,(int)"phys_debug_check_contacts",&DAT_10436dec,0x6000);
FUN_10399d80(&DAT_1064ec78,(int)"phys_penetration_error_time",&DAT_104897f0,0,
	"Controls the duration of vphysics penetration error boxes.");
FUN_10399fe0(&DAT_1064e950,(int)"phys_show_active",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_1064e8f8,(int)"phys_speeds",&DAT_10436dec,0);
FUN_10399e10(&DAT_1064ea30,(int)"phys_timescale",&DAT_10436de8,0,"Scale time for physics",
FUN_10399bc0(&DAT_1064ed84,(int)"physics_budget",(int)FUN_101514d0,
	"Times the cost of each active object",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ed18,(int)"physics_constraints",(int)FUN_10151910,
	"Highlights constraint system graph for an entity",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ed3c,(int)"physics_debug_entity",(int)FUN_10151930,
	"Dumps debug info for an entity",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ec54,(int)"physics_highlight_active",(int)FUN_10151950,
	"Turns on the absbox for all active physics objects",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ecd0,(int)"physics_report_active",(int)FUN_10151970,
	"Lists all active physics objects",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ed60,(int)"physics_select",(int)FUN_10151990,
	"Dumps debug info for an entity",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1064ecf4,(int)"surfaceprop",(int)FUN_101519b0,
	"Reports the surface properties at the cursor",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_1064f220,(int)"npc_vphysics",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1064f2f8,(int)"sv_teststepsimulation",&DAT_10436de8,0);
FUN_10399fe0(&DAT_1064f1c8,(int)"vprof_scope_entity_gamephys",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1064f170,(int)"vprof_scope_entity_thinks",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1064f118,(int)"vprof_think_limit",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1064f418,(int)"PhysicsInitialAverageFrameTime","0.01667",0x6000);
FUN_10399fe0(&DAT_1064f368,(int)"PhysicsSimulateTicks",&DAT_104a5410,0x6000);
FUN_10399fe0(&DAT_1064f3c0,(int)"PhysicsSmoothingFactor",&DAT_1043880c,0x6000);
FUN_10399d80(&DAT_1064f528,(int)"debug_touchlinks",&DAT_10436dec,0,"Spew touch link activity");
FUN_10399d80(&DAT_1064f6b8,(int)"sv_thinktimecheck",&DAT_10436dec,0,
	"Check for thinktimes all on same timestamp.");
FUN_10399d80(&DAT_1064f4d0,(int)"think_limit",&DAT_104897f0,0x82000,
	"Maximum think time in milliseconds, warning is printed if this is exceeded.");
FUN_10399fe0(&DAT_10650110,(int)"debug_physimpact",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106509c8,(int)"vis_force",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_10650498,(int)"autoaim_max_deflect",&DAT_104abf0c,0);
FUN_10399fe0(&DAT_10650440,(int)"autoaim_max_dist",&DAT_104abef0,0);
FUN_10399c60(&DAT_10650968,(int)"givecurrentammo",(int)FUN_10176630,
	"Give a supply of ammo for current weapon..\n",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10650b8c,(int)"mp_disable_autokick",(int)FUN_10181aa0,
	"Prevents a userid from being auto-kicked",0,(undefined *)0x0);
FUN_10399fe0(&DAT_106506a8,(int)"player_old_armor",&DAT_10436dec,0);
FUN_10399d80(&DAT_10650910,(int)"player_debug_print_damage",&DAT_10436dec,0x4000,
	"When true, print amount and type of all damage received by player to console.");
FUN_10399fe0(&DAT_10650860,(int)"sk_player_arm",&DAT_10436de8,0);
FUN_10399fe0(&DAT_106507b0,(int)"sk_player_chest",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10650758,(int)"sk_player_head",&DAT_10438794,0);
FUN_10399fe0(&DAT_106508b8,(int)"sk_player_leg",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10650808,(int)"sk_player_stomach",&DAT_10436de8,0);
FUN_10399d80(&DAT_106504f0,(int)"spec_freeze_time",&DAT_104abf54,0x6000,
	"Time spend frozen in observer freeze cam.");
FUN_10399ea0(&DAT_10650548,(int)"spec_freeze_traveltime",&DAT_104abfb0,0x6000,
	"Time taken to zoom in to frame a target in observer freeze cam.",1,0x3c23d70a,0,0);
FUN_10399d80(&DAT_106505a0,(int)"sv_bonus_challenge",&DAT_10436dec,0x2012,
	"Set to values other than 0 to select a bonus map challenge type.");
FUN_10399d80(&DAT_10650a20,(int)"sv_clockcorrection_msecs",&DAT_10469198,0,
	"The server tries to keep each player\'s m_nTickBase withing this many msecs of the server absolute tickcount"
FUN_10399d80(&DAT_10650650,(int)"sv_maxusrcmdprocessticks",&DAT_104ac0c0,0x100,
	"Maximum number of client-issued usrcmd ticks that can be replayed in packet loss conditions, 0 to allow no restrictions"
FUN_10399d80(&DAT_10650700,(int)"sv_noclipduringpause",&DAT_10436dec,0x6000,
	"If cheats are enabled, then you can noclip with the game paused (for doing screenshots, etc.)."
FUN_10399ea0(&DAT_10650a78,(int)"sv_playerperfhistorycount",&DAT_104acb50,0,
	"Number of samples to maintain in player perf history",1,0x3f800000,1,0x43000000);
FUN_10399fe0(&DAT_106505f8,(int)"sv_regeneration_wait_time",&DAT_10436e38,0x2000);
FUN_10399d80(&DAT_10650ad0,(int)"sv_usercmd_custom_random_seed",&DAT_10436de8,0x80000,
	"When enabled server will populate an additional random seed independent of the client"
FUN_10399fe0(&DAT_10650b28,(int)"xc_crouch_debounce",&DAT_10436dec,0);
FUN_10399d80(&DAT_10650cb0,(int)"sv_maxusrcmdprocessticks_holdaim",&DAT_10436de8,0x4000,
	"Hold client aim for multiple server sim ticks when client-issued usrcmd contains multiple actions (0: off; 1: hold this server tick; 2+: hold multiple ticks)"
FUN_10399d80(&DAT_10650c58,(int)"sv_maxusrcmdprocessticks_warning",&DAT_1043b6a0,0,
	"Print a warning when user commands get dropped due to insufficient usrcmd ticks allocated, number of seconds to throttle, negative disabled"
FUN_10399d80(&DAT_10650e70,(int)"sv_lagcompensationforcerestore",&DAT_10436de8,0x4000,
	"Don\'t test validity of a lag comp restore, just do it.");
FUN_10399d80(&DAT_10650dc0,(int)"sv_lagflushbonecache",&DAT_10436de8,2,
	"Flushes entity bone cache on lag compensation");
FUN_10399d80(&DAT_10650f20,(int)"sv_lagpushticks",&DAT_10436dec,2,
	"Push computed lag compensation amount by this many ticks.");
FUN_10399ea0(&DAT_10650d68,(int)"sv_maxunlag",&DAT_10436e38,2,
	"Maximum lag compensation in seconds",1,0,1,0x3f800000);
FUN_10399d80(&DAT_10650e18,(int)"sv_showlagcompensation",&DAT_10436dec,0x4000,
	"Show lag compensated hitboxes whenever a player is lag compensated.");
FUN_10399d80(&DAT_10650d10,(int)"sv_unlag",&DAT_10436de8,2,"Enables player lag compensation");
FUN_10399fe0(&DAT_10650ff0,(int)"sv_unlag_debug",&DAT_10436dec,6);
FUN_10399d80(&DAT_10650ec8,(int)"sv_unlag_fixstuck",&DAT_10436dec,2,
	"Disallow backtracking a player for lag compensation if it will cause them to become stuck"
FUN_10399fe0(&DAT_106513c0,(int)"voice_player_speaking_delay_threshold",&DAT_1045e898,0x4000);
FUN_10399fe0(&DAT_10652848,(int)"g_debug_angularsensor",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_10652c30,(int)"breakable_disable_gib_limit",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10652c88,(int)"breakable_multiplayer",&DAT_10436de8,0);
FUN_10399fe0(&DAT_10653008,(int)"debug_prop_force",&DAT_104b7ecc,0);
FUN_10399bc0(&DAT_10653194,(int)"ent_rotate",(int)FUN_10197470,
	"Rotates an entity by a specified # of degrees",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_10652d90,(int)"func_breakdmg_bullet",&DAT_10436e20,0);
FUN_10399fe0(&DAT_10652de8,(int)"func_breakdmg_club",&DAT_104b6724,0);
FUN_10399fe0(&DAT_10652e40,(int)"func_breakdmg_explosive",&DAT_104b673c,0);
FUN_10399fe0(&DAT_10652bd8,(int)"g_debug_doors",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10652ce0,(int)"prop_active_gib_limit",&DAT_104a5410,0);
FUN_10399fe0(&DAT_10652d38,(int)"prop_active_gib_max_fade_time",&DAT_10467504,0);
FUN_10399fe0(&DAT_10652ef0,(int)"prop_break_disable_float",&DAT_10436dec,0);
FUN_10399c60(&DAT_10652f48,(int)"prop_debug",(int)FUN_10197540,
	"Toggle prop debug mode. If on, props will show colorcoded bounding boxes. Red means ignore all damage. White means respond physically to damage but never break. Green maps health in the range of 100 down to 1."
FUN_10399bc0(&DAT_1065314c,(int)"prop_dynamic_create",(int)FUN_101975b0,
	"Creates a dynamic prop with a specific .mdl aimed away from where the player is looking.\n\tArguments: {.mdl name}"
FUN_10399bc0(&DAT_10653170,(int)"prop_physics_create",(int)FUN_10197ac0,
	"Creates a physics prop with a specific .mdl aimed away from where the player is looking.\n\tArguments: {.mdl name}"
FUN_10399d80(&DAT_10652e98,(int)"sv_turbophysics",&DAT_10436dec,0x2000,"Turns on turbo physics");
FUN_10399d80(&DAT_106543b0,(int)"props_break_max_pieces",&DAT_1043b6a0,0x2000,
	"Maximum prop breakable piece count (-1 = model default)");
FUN_10399d80(&DAT_10654408,(int)"props_break_max_pieces_perframe",&DAT_1043b6a0,0x2000,
	"Maximum prop breakable piece count per frame (-1 = model default)");
FUN_10399d80(&DAT_10654358,(int)"sv_pushaway_clientside_size",&DAT_104788a0,0x2002,
	"Minimum size of pushback objects");
FUN_10399d80(&DAT_10670538,(int)"sv_disable_querycache",&DAT_10436dec,0x6002,
	"debug - disable trace query cache");
FUN_10399bc0(&DAT_1066e514,(int)"sv_querycache_stats",(int)FUN_101a7000,
	"Display status of the query cache (client only)",0,(undefined *)0x0);
FUN_10399fe0(&DAT_10670700,(int)"g_debug_ragdoll_removal",&DAT_10436dec,0x6000);
FUN_10399fe0(&DAT_106707a8,(int)"g_ragdoll_important_maxcount",&DAT_10438794,0x2000);
FUN_10399fe0(&DAT_106706a8,(int)"g_ragdoll_maxcount",&DAT_1044d638,0x2000);
FUN_10399450(&DAT_105d0634,(int)&DAT_104bbe94,0x20);
FUN_10399c60(&DAT_10672174,(int)"listRecentNPCSpeech",(int)FUN_101ba290,
	"Displays a list of the last 5 lines of speech from NPCs.",0x20004,(undefined *)0x0);
FUN_10399d80(&DAT_106720c8,(int)"scene_async_prefetch_spew",&DAT_10436dec,0,
	"Display async .ani file loading info.");
FUN_10399d80(&DAT_10672008,(int)"scene_clientplayback",&DAT_10436de8,0,
	"Play all vcds on the clients.");
FUN_10399bc0(&DAT_10672198,(int)"scene_flush",(int)FUN_101bddc0,
	"Flush all .vcds from the cache and reload from disk.",0,(undefined *)0x0);
FUN_10399d80(&DAT_10671f58,(int)"scene_forcecombined",&DAT_10436dec,0,
	"When playing back, force use of combined .wav files even in english.");
FUN_10399d80(&DAT_10671fb0,(int)"scene_maxcaptionradius",&DAT_104375f4,0,
	"Only show closed captions if recipient is within this many units of speaking actor (0==disabled)."
FUN_10399bc0(&DAT_10672124,(int)"scene_playvcd",(int)FUN_101bddf0,
	"Play the given VCD as an instanced scripted scene.",0x4000,FUN_101bc230);
FUN_10399d80(&DAT_10672548,(int)"scene_clientflex",&DAT_10436de8,0x2000,
	"Do client side flex animation.");
FUN_10399d80(&DAT_106724f0,(int)"scene_print",&DAT_10436dec,0x2000,
	"When playing back a scene, print timing and event info to console.");
FUN_10399fe0(&DAT_106725b0,(int)"ai_task_pre_script",&DAT_10436dec,0);
FUN_10399d80(&DAT_106726e0,(int)"sv_benchmark_autovprofrecord",&DAT_10436dec,0,
	"If running a benchmark and this is set, it will record a vprof file over the duration of the benchmark with filename benchmark.vprof."
FUN_10399bc0(&DAT_10672824,(int)"sv_benchmark_force_start",(int)FUN_101c3640,
	"Force start the benchmark. This is only for debugging. It\'s better to set sv_benchmark to 1 and restart the level."
FUN_10399d80(&DAT_10672688,(int)"sv_benchmark_numticks",&DAT_104c03c4,0,
	"If > 0, then it only runs the benchmark for this # of ticks.");
FUN_10399e10(&DAT_10672ba8,(int)"sv_regeneration_force_on",&DAT_10436dec,0x4000,
	"Cheat to test regenerative health systems",(int)FUN_101c4a00);
FUN_10399d80(&DAT_106731c0,(int)"cc_norepeat",&DAT_10436df0,0,
	"In multiplayer games, don\'t repeat captions more often than this many seconds.");
FUN_10399d80(&DAT_10673168,(int)"cc_showmissing",&DAT_10436dec,0x2000,
	"Show missing closecaption entries.");
FUN_10399d80(&DAT_10673060,(int)"snd_prevent_ss_duplicates",&DAT_10436dec,0x6002,
	"switch to en/disable the prevention of splitscreen audio file duplicates\n");
FUN_10399fe0(&DAT_106730b8,(int)"snd_sos_show_server_xmit",&DAT_10436dec,0x4000);
FUN_10399bc0(&DAT_10673284,(int)"sv_findsoundname",(int)FUN_101c9800,
	"Find sound names which reference the specified wave files.",2,(undefined *)0x0);
FUN_10399bc0(&DAT_1067323c,(int)"sv_soundemitter_filecheck",(int)FUN_101c9910,
	"Report missing wave files for sounds and game_sounds files.",0,(undefined *)0x0);
FUN_10399bc0(&DAT_10673218,(int)"sv_soundemitter_flush",(int)FUN_101c9940,
	"Flushes the sounds.txt system (server only)",0,(undefined *)0x0);
FUN_10399bc0(&DAT_10673260,(int)"sv_soundemitter_reload",(int)FUN_101c9990,
	"Flushes the sounds.txt system",0,(undefined *)0x0);
FUN_10399bc0(&DAT_106732a8,(int)"sv_soundemitter_spew",(int)FUN_101c9a00,
	"Print details about a sound.",2,(undefined *)0x0);
FUN_10399d80(&DAT_10673110,(int)"sv_soundemitter_trace",&DAT_1043b6a0,0x2000,
	"Show all EmitSound calls including their symbolic name and the actual wave file they resolved to. (-1 = for nobody, 0 = for everybody, n = for one entity)\n"
FUN_10399d80(&DAT_10673008,(int)"sv_soundemitter_version",&DAT_10438794,0x6002,
	"specfies what version of soundemitter system to use\n");
FUN_10399bc0(&DAT_10673440,(int)"report_soundpatch",(int)FUN_101ccf10,"reports sound patch count",
FUN_10399d80(&DAT_106733e0,(int)"soundpatch_captionlength",&DAT_104c3308,0x2000,
	"How long looping soundpatch captions should display for.");
FUN_10399d80(&DAT_106735a0,(int)"soundscape_debug",&DAT_10436dec,0x4000,
	"When on, draws lines to all env_soundscape entities. Green lines show the active soundscape, red lines show soundscapes that aren\'t in range, and white lines show soundscapes that are in range, but not the active soundscape."
FUN_10399bc0(&DAT_10673800,(int)"soundscape_flush",(int)FUN_101cf5a0,
	"Flushes the server & client side soundscapes",0,(undefined *)0x0);
FUN_10399bc0(&DAT_10673824,(int)"sv_soundscape_printdebuginfo",(int)FUN_101cf680,
	"print soundscapes",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_10674920,(int)"mod_load_preload",&DAT_10436e38,0,
	"Indicates how far ahead in seconds to preload animations.");
FUN_10399d80(&DAT_106748c8,(int)"mod_load_showstall",&DAT_10436dec,0,
	"1 - show hitches , 2 - show stalls");
FUN_10399fe0(&DAT_10675288,(int)"phys_pushscale",&DAT_10436de8,0x2000);
FUN_10399fe0(&DAT_106756a8,(int)"template_debug",&DAT_10436dec,0);
FUN_10399c60(&DAT_1067576c,(int)"Test_EHandle",(int)FUN_101da570,(undefined *)0x0,0x4000,
FUN_10399d80(&DAT_10675c80,(int)"g_debug_transitions",&DAT_10436dec,0,
	"Set to 1 and restart the map to be warned if the map has no trigger_transition volumes. Set to 2 to see a dump of all entities & associated results during a transition."
FUN_10399d80(&DAT_10675cd8,(int)"showtriggers",&DAT_10436dec,0x4000,"Shows trigger brushes");
FUN_10399bc0(&DAT_10675d30,(int)"showtriggers_toggle",(int)FUN_101e6580,"Toggle show triggers",
FUN_10399bc0(&DAT_1067addc,(int)"collision_test",(int)FUN_101f20f0,"Tests collision system",0x4000
FUN_10399bc0(&DAT_10676c4c,(int)"dump_entity_sizes",(int)FUN_101f6af0,"Print sizeof(entclass)",0,
FUN_10399c60(&DAT_10676c28,(int)"dumpentityfactories",(int)FUN_101f3970,
	"Lists all entity factory names.",4,(undefined *)0x0);
FUN_10399bc0(&DAT_10676cb4,(int)"kdtree_test",(int)&DAT_101f27d0,
	"Tests spatial partition for entities queries.",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_1067ad18,(int)"sv_strict_notarget",&DAT_10436dec,0,
	"If set, notarget will cause entities to never think they are in the pvs");
FUN_10399bc0(&DAT_1067ad94,(int)"voxeltree_box",(int)FUN_101f2ea0,
	"View entities in the voxel-tree inside box <Vector(min), Vector(max)>.",0x4000,
FUN_10399c60(&DAT_1067ad70,(int)"voxeltree_playerview",(int)FUN_101f3240,
	"View entities in the voxel-tree at the player position.",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1067adb8,(int)"voxeltree_sphere",(int)FUN_101f3370,
	"View entities in the voxel-tree inside sphere <Vector(center), float(radius)>.",
FUN_10399c60(&DAT_1067acf4,(int)"voxeltree_view",(int)FUN_101f36e0,
	"View entities in the voxel-tree.",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_1067d278,(int)"developer",&DAT_10436dec,0x80000,"Set developer message level");
FUN_10399fe0(&DAT_1067d220,(int)"r_visualizetraces",&DAT_10436dec,0x4000);
FUN_10399d80(&DAT_1067d380,(int)"violence_ablood",&DAT_10436de8,0,"Draw alien blood");
FUN_10399d80(&DAT_1067d3d8,(int)"violence_agibs",&DAT_10436de8,0,"Show alien gib entities");
FUN_10399d80(&DAT_1067d2d0,(int)"violence_hblood",&DAT_10436de8,0,"Draw human blood");
FUN_10399d80(&DAT_1067d328,(int)"violence_hgibs",&DAT_10436de8,0,"Show human gib entities");
FUN_10399d80(&DAT_1067e0a0,(int)"sv_alltalk",&DAT_10436dec,0x82100,
	"Players can hear all other players, no team restrictions");
FUN_10399fe0(&DAT_1067e048,(int)"voice_serverdebug",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1067e100,(int)"script_connect_debugger_on_mapspawn",&DAT_10436dec,0);
FUN_10399bc0(&DAT_1067e1c0,(int)"script_reload_code",(int)FUN_101fbae0,
	"Execute a vscript file, replacing existing functions with the functions in the run script"
FUN_10399bc0(&DAT_1067e1e4,(int)"script_reload_entity_code",(int)FUN_101fbb70,
	"Execute all of this entity\'s VScripts, replacing existing functions with the functions in the run scripts"
FUN_10399bc0(&DAT_1067e208,(int)"script_reload_think",(int)FUN_101fbd10,
	"Execute an activation script, replacing existing functions with the functions in the run script"
FUN_10399bc0(&DAT_1067e24c,(int)"script",(int)FUN_101fbfc0,"Run the text as a script",0,
FUN_10399bc0(&DAT_1067e294,(int)"script_debug",(int)FUN_101fc0b0,
	"Connect the vscript VM to the script debugger",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1067e2dc,(int)"script_dump_all",(int)FUN_101fc0f0,
	"Dump the state of the VM to the console",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1067e270,(int)"script_execute",(int)FUN_101fc130,"Run a vscript file",0,
FUN_10399bc0(&DAT_1067e2b8,(int)"script_help",(int)FUN_101fc1b0,
	"Output help for script functions, optionally with a search string",0,
FUN_10399bc0(&DAT_1067e714,(int)"hammer_update_entity",(int)FUN_101fdcc0,
	"Updates the entity\'s position/angles when in edit mode",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1067e738,(int)"hammer_update_safe_entities",(int)FUN_101fde30,
	"Updates entities in the map that can safely be updated (don\'t have parents or are affected by constraints). Also excludes entities mentioned in any hammer_updateignorelist objects in this map."
FUN_10399c60(&DAT_1067e6a4,(int)"wc_air_edit_further",(int)FUN_101fcc50,
	"When in WC edit mode and editing air nodes,  moves position of air node crosshair and placement location further away from player"
FUN_10399c60(&DAT_1067e6c8,(int)"wc_air_edit_nearer",(int)FUN_101fcc90,
	"When in WC edit mode and editing air nodes,  moves position of air node crosshair and placement location nearer to from player"
FUN_10399c60(&DAT_1067e680,(int)"wc_air_node_edit",(int)FUN_101fcc30,
	"When in WC edit mode, toggles laying down or air nodes instead of ground nodes",
FUN_10399c60(&DAT_1067e614,(int)"wc_create",(int)FUN_101fccd0,
	"When in WC edit mode, creates a node where the player is looking if a node is allowed at that location for the currently selected hull size (see ai_next_hull)"
FUN_10399c60(&DAT_1067e638,(int)"wc_destroy",(int)FUN_101fcd10,
	"When in WC edit mode, destroys the node that the player is nearest to looking at.  (The node will be highlighted by a red box)."
FUN_10399c60(&DAT_1067e65c,(int)"wc_destroy_undo",(int)FUN_101fcd50,
	"When in WC edit mode restores the last deleted node",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1067e6ec,(int)"wc_link_edit",(int)FUN_101fcd70,(undefined *)0x0,0x4000,
FUN_10399d80(&DAT_1067f988,(int)"nav_area_bgcolor","0 0 0 30",0x4000,
	"RGBA color to draw as the background color for nav areas while editing.");
FUN_10399c60(&DAT_1067fda4,(int)"nav_check_floor",(int)FUN_10203740,
	"Updates the blocked/unblocked status for every nav area.",4,(undefined *)0x0);
FUN_10399fe0(&DAT_1067f880,(int)"nav_coplanar_slope_limit",&DAT_104abf0c,0x4000);
FUN_10399fe0(&DAT_1067f8d8,(int)"nav_coplanar_slope_limit_displacement",&DAT_104d9518,0x4000);
FUN_10399d80(&DAT_1067f9e0,(int)"nav_corner_adjust_adjacent",&DAT_1049be70,0x4000,
	"radius used to raise/lower corners in nearby areas when raising/lowering corners.");
FUN_10399fe0(&DAT_1067fa90,(int)"nav_debug_blocked",&DAT_10436dec,0x4000);
FUN_10399bc0(&DAT_1067fdc8,(int)"nav_mark_playerclips",(int)FUN_1020ba00,
	"Fixup nodes marked with NAV_PLAYERCLIP.",0x4004,(undefined *)0x0);
FUN_10399d80(&DAT_1067fb40,(int)"nav_max_view_distance",&DAT_10436dec,0x4000,
	"Maximum range for precomputed nav mesh visibility (0 = default 1500 units)");
FUN_10399fe0(&DAT_1067fbf0,(int)"nav_potentially_visible_dot_tolerance",&DAT_104d97bc,0x4000);
FUN_10399c60(&DAT_1067fdec,(int)"nav_select_overlapping",(int)FUN_102038e0,
	"Selects nav areas that are overlapping others.",4,(undefined *)0x0);
FUN_10399f40(&DAT_1067fcf8,(int)"nav_selected_set_border_color","100 100 0 255",0x4000,
	"Color used to draw the selected set borders while editing.",0,0,0,0,
FUN_10399f40(&DAT_1067fca0,(int)"nav_selected_set_color","255 255 200 96",0x4000,
	"Color used to draw the selected set background while editing.",0,0,0,0,
FUN_10399d80(&DAT_1067fae8,(int)"nav_show_continguous",&DAT_10436dec,0x4000,
	"Highlight non-contiguous connections");
FUN_10399fe0(&DAT_1067fa38,(int)"nav_show_light_intensity",&DAT_10436dec,0x4000);
FUN_10399d80(&DAT_1067fc48,(int)"nav_show_potentially_visible",&DAT_10436dec,0x4000,
	"Show areas that are potentially visible from the current nav area");
FUN_10399d80(&DAT_1067f930,(int)"nav_split_place_on_ground",&DAT_10436dec,0x4000,
	"If true, nav areas will be placed flush with the ground when split.");
FUN_10399c60(&DAT_1067fd80,(int)"nav_update_blocked",(int)FUN_10203930,
	"Updates the blocked/unblocked status for every nav area.",4,(undefined *)0x0);
FUN_10399bc0(&DAT_1067f85c,(int)"nav_update_lighting",(int)FUN_1020f4e0,
	"Recomputes lighting values",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_1067fb98,(int)"nav_update_visibility_on_edit",&DAT_10436dec,0x4000,
	"If nonzero editing the mesh will incrementally recompue visibility");
FUN_10399d80(&DAT_10682088,(int)"nav_create_area_at_feet",&DAT_10436dec,0x4000,
	"Anchor nav_begin_area Z to editing player\'s feet");
FUN_10399d80(&DAT_10681f80,(int)"nav_create_place_on_ground",&DAT_10436dec,0x4000,
	"If true, nav areas will be placed flush with the ground when created by hand.");
FUN_10399d80(&DAT_106820e0,(int)"nav_drag_selection_volume_zmax_offset",&DAT_104da02c,0x2000,
	"The offset of the nav drag volume top from center");
FUN_10399d80(&DAT_10682138,(int)"nav_drag_selection_volume_zmin_offset",&DAT_104da02c,0x2000,
	"The offset of the nav drag volume bottom from center");
FUN_10399d80(&DAT_10681fd8,(int)"nav_draw_limit",&DAT_10468718,0x4000,
	"The maximum number of areas to draw in edit mode");
FUN_10399d80(&DAT_10681ed0,(int)"nav_edit_grid",&DAT_10436de8,4,
	"Factor to scale the grid by when editing in nav_edit mode. Higher numbers allow more precise editing"
FUN_10399bc0(&DAT_10682230,(int)"nav_select_radius",(int)FUN_10218780,
	"Adds all areas in a radius to the selection set",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_106821e8,(int)"nav_shift",(int)FUN_10218870,
	"Shifts the selected areas by the specified amount",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_10681e78,(int)"nav_show_area_info",&DAT_10436e20,0x4000,
	"Duration in seconds to show nav area ID and attributes while editing");
FUN_10399fe0(&DAT_10682190,(int)"nav_show_compass",&DAT_10436dec,0x4000);
FUN_10399d80(&DAT_10681f28,(int)"nav_snap_to_grid",&DAT_10436dec,0x4000,
	"Snap to the nav generation grid when creating new nav areas");
FUN_10399d80(&DAT_10682030,(int)"nav_solid_props",&DAT_10436dec,0x4000,
	"Make props solid to nav generation/editing");
FUN_10399c60(&DAT_1068220c,(int)"nav_world_center",(int)FUN_102126c0,
	"Centers the nav mesh in the world",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_106822e0,(int)"nav_check_file_consistency",(int)FUN_10219af0,
	"Scans the maps directory and reports any missing/out-of-date navigation files.",
FUN_10399d80(&DAT_106827c8,(int)"nav_area_max_size",&DAT_10438740,0x4000,
	"Max area size created in nav generation");
FUN_10399c60(&DAT_10682820,(int)"nav_check_stairs",(int)FUN_10220c30,
	"Update the nav mesh STAIRS attribute",0,(undefined *)0x0);
FUN_10399d80(&DAT_10682610,(int)"nav_displacement_test","10000",0x4000,
	"Checks for nodes embedded in displacements (useful for in-development maps)");
FUN_10399bc0(&DAT_1068288c,(int)"nav_gen_cliffs_approx",(int)FUN_1022ad80,
	"Mark cliff areas, post-processing approximation",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_10682668,(int)"nav_generate_fencetops",&DAT_10436de8,0x4000,
	"Autogenerate nav areas on fence and obstacle tops");
FUN_10399d80(&DAT_106826c0,(int)"nav_generate_fixup_jump_areas",&DAT_10436de8,0x4000,
	"Convert obsolete jump areas into 2-way connections");
FUN_10399fe0(&DAT_10682718,(int)"nav_generate_incremental_range",&DAT_104dbaa4,0x4000);
FUN_10399d80(&DAT_10682770,(int)"nav_generate_incremental_tolerance",&DAT_10436dec,0x4000,
	"Z tolerance for adding new nav areas.");
FUN_10399fe0(&DAT_10682508,(int)"nav_generation_stepsize",&DAT_104db88c,0);
FUN_10399d80(&DAT_10682560,(int)"nav_slope_limit",&DAT_104d9518,0x4000,
	"The ground unit normal\'s Z component must be greater than this for nav areas to be generated."
FUN_10399d80(&DAT_106825b8,(int)"nav_slope_tolerance",&DAT_104388e4,0x4000,
	"The ground unit normal\'s Z component must be this close to the nav area\'s Z component to be generated."
FUN_10399bc0(&DAT_10682868,(int)"nav_subdivide",(int)FUN_1022ada0,"Subdivides all selected areas."
FUN_10399bc0(&DAT_10682844,(int)"nav_test_stairs",(int)FUN_1022ade0,
	"Test the selected set for being on stairs",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10682920,(int)"nav_merge_mesh",(int)FUN_1022dfe0,
	"Merges a saved selected set into the current mesh.",0x4004,FUN_1022dcf0);
FUN_10399bc0(&DAT_106828fc,(int)"nav_save_selected",(int)FUN_1022e000,
	"Writes the selected set to disk for merging into another mesh via nav_merge_mesh.",
FUN_10399c60(&DAT_10683738,(int)"wipe_nav_attributes",(int)FUN_10231f40,
	"Clear all nav attributes of selected area.",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1068375c,(int)"nav_clear_attribute",(int)FUN_10231f70,
	"Remove given nav attribute from all areas in the selected set.",0x4000,FUN_10231e90)
FUN_10399bc0(&DAT_10683780,(int)"nav_mark_attribute",(int)FUN_10232000,
	"Set nav attribute for all areas in the selected set.",0x4000,FUN_10231e90);
FUN_10399c60(&DAT_10682c64,(int)"nav_add_to_selected_set",(int)FUN_1022f000,
	"Add current area to the selected set.",0x4004,(undefined *)0x0);
FUN_10399bc0(&DAT_10682c88,(int)"nav_add_to_selected_set_by_id",(int)FUN_102331c0,
	"Add specified area id to the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683660,(int)"nav_analyze",(int)FUN_1022f030,
	"Re-analyze the current Navigation Mesh and save it to disk.",0x4004,(undefined *)0x0
FUN_10399bc0(&DAT_10683684,(int)"nav_analyze_scripted",(int)FUN_1022f070,
	"commandline hook to run a nav_analyze and then quit.",0x4014,(undefined *)0x0);
FUN_10399c60(&DAT_10683294,(int)"nav_avoid",(int)FUN_1022f110,
	"Toggles the \'avoid this area when possible\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_106830e4,(int)"nav_begin_area",(int)FUN_1022f140,
	"Defines a corner of a new Area or Ladder. To complete the Area or Ladder, drag the opposite corner to the desired location and issue a \'nav_end_area\' command."
FUN_10399c60(&DAT_10682ea4,(int)"nav_begin_deselecting",(int)FUN_1022f170,
	"Start continuously removing from the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682da8,(int)"nav_begin_drag_deselecting",(int)FUN_1022f1a0,
	"Start dragging a selection area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682d60,(int)"nav_begin_drag_selecting",(int)FUN_1022f1d0,
	"Start dragging a selection area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682d18,(int)"nav_begin_selecting",(int)FUN_1022f200,
	"Start continuously adding to the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682f34,(int)"nav_begin_shift_xy",(int)FUN_1022f230,
	"Begin shifting the Selected Set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683714,(int)"nav_build_ladder",(int)FUN_1022f260,
	"Attempts to build a nav ladder on the climbable surface under the cursor.",0x4004,
FUN_10399c60(&DAT_10682cf4,(int)"nav_clear_selected_set",(int)FUN_1022f290,
	"Clear the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_106836cc,(int)"nav_clear_walkable_marks",(int)FUN_1022f2c0,
	"Erase any previously placed walkable positions.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_106836f0,(int)"nav_compress_id",(int)FUN_1022f2f0,
	"Re-orders area and ladder ID\'s so they are continuous.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_1068312c,(int)"nav_connect",(int)FUN_1022f320,
	"To connect two Areas, mark the first Area, highlight the second Area, then invoke the connect command. Note that this creates a ONE-WAY connection from the first to the second Area. To make a two-way connection, also connect the second area to the first."
FUN_10399bc0(&DAT_10683588,(int)"nav_corner_lower",(int)FUN_102331f0,
	"Lower the selected corner of the currently marked Area.",0x4004,(undefined *)0x0);
FUN_10399bc0(&DAT_106835ac,(int)"nav_corner_place_on_ground",(int)FUN_10233220,
	"Places the selected corner of the currently marked Area on the ground.",0x4004,
FUN_10399bc0(&DAT_10683564,(int)"nav_corner_raise",(int)FUN_10233250,
	"Raise the selected corner of the currently marked Area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683540,(int)"nav_corner_select",(int)FUN_1022f350,
	"Select a corner of the currently marked Area. Use multiple times to access all four corners."
FUN_10399c60(&DAT_10683198,(int)"nav_crouch",(int)FUN_1022f380,
	"Toggles the \'must crouch in this area\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_10682b8c,(int)"nav_delete",(int)FUN_1022f3b0,
	"Deletes the currently highlighted Area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682bb0,(int)"nav_delete_marked",(int)FUN_1022f3e0,
	"Deletes the currently marked Area (if any).",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683150,(int)"nav_disconnect",(int)FUN_1022f410,
	"To disconnect two Areas, mark an Area, highlight a second Area, then invoke the disconnect command. This will remove all connections between the two Areas."
FUN_10399c60(&DAT_106832dc,(int)"nav_dont_hide",(int)FUN_1022f440,
	"Toggles the \'area is not suitable for hiding spots\' flag used by the AI system.",
FUN_10399d80(&DAT_10682958,(int)"nav_edit",&DAT_10436dec,0x4004,
	"Set to one to interactively edit the Navigation Mesh. Set to zero to leave edit mode."
FUN_10399c60(&DAT_10683108,(int)"nav_end_area",(int)FUN_1022f470,
	"Defines the second corner of a new Area or Ladder and creates it.",0x4004,
FUN_10399c60(&DAT_10682ec8,(int)"nav_end_deselecting",(int)FUN_1022f4a0,
	"Stop continuously removing from the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682dcc,(int)"nav_end_drag_deselecting",(int)FUN_1022f4d0,
	"Stop dragging a selection area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682d84,(int)"nav_end_drag_selecting",(int)FUN_1022f500,
	"Stop dragging a selection area.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682d3c,(int)"nav_end_selecting",(int)FUN_1022f4a0,
	"Stop continuously adding to the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682f58,(int)"nav_end_shift_xy",(int)FUN_1022f530,
	"Finish shifting the Selected Set.",0x4004,(undefined *)0x0);
FUN_10399bc0(&DAT_10682bd4,(int)"nav_flood_select",(int)FUN_10233280,
	"Selects the current Area and all Areas connected to it, recursively. To clear a selection, use this command again."
FUN_10399c60(&DAT_10683618,(int)"nav_generate",(int)FUN_1022f560,
	"Generate a Navigation Mesh for the current map and save it to disk.",0x4004,
FUN_10399c60(&DAT_1068363c,(int)"nav_generate_incremental",(int)FUN_1022f590,
	"Generate a Navigation Mesh for the current map and save it to disk.",0x4004,
FUN_10399c60(&DAT_106831e0,(int)"nav_jump",(int)FUN_1022f5c0,
	"Toggles the \'traverse this area by jumping\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_106835f4,(int)"nav_ladder_flip",(int)FUN_1022f5f0,
	"Flips the selected ladder\'s direction.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_106833b4,(int)"nav_load",(int)FUN_1022f620,
	"Loads the Navigation Mesh for the current map.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682e14,(int)"nav_lower_drag_volume_max",(int)FUN_1022f650,
	"Lower the top of the drag select volume.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682e5c,(int)"nav_lower_drag_volume_min",(int)FUN_1022f680,
	"Lower the bottom of the drag select volume.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683054,(int)"nav_make_sniper_spots",(int)FUN_1022f6b0,
	"Chops the marked area into disconnected sub-areas suitable for sniper spots.",0x4004
FUN_10399bc0(&DAT_1068309c,(int)"nav_mark",(int)FUN_1022f6e0,
	"Marks the Area or Ladder under the cursor for manipulation by subsequent editing commands."
FUN_10399c60(&DAT_1068351c,(int)"nav_mark_unnamed",(int)FUN_1022f710,
	"Mark an Area with no Place name. Useful for finding stray areas missed when Place Painting."
FUN_10399c60(&DAT_106836a8,(int)"nav_mark_walkable",(int)FUN_1022f740,
	"Mark the current location as a walkable position. These positions are used as seed locations when sampling the map to generate a Navigation Mesh."
FUN_10399fe0(&DAT_10682b10,(int)"nav_max_vis_delta_list_length",&DAT_104a5410,0x4000);
FUN_10399c60(&DAT_10683078,(int)"nav_merge",(int)FUN_1022f890,
	"To merge two Areas into one, mark the first Area, highlight the second by pointing your cursor at it, and invoke the merge command."
FUN_10399c60(&DAT_10683348,(int)"nav_no_dogs",(int)FUN_1022f8c0,
	"Toggles the \'dogs cannot use this area\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_10683324,(int)"nav_no_hostages",(int)FUN_1022f8c0,
	"Toggles the \'hostages cannot use this area\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_10683204,(int)"nav_no_jump",(int)FUN_1022f8f0,
	"Toggles the \'dont jump in this area\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_1068348c,(int)"nav_place_floodfill",(int)FUN_1022f920,
	"Sets the Place of the Area under the cursor to the curent Place, and \'flood-fills\' the Place to all adjacent Areas. Flood-filling stops when it hits an Area with the same Place, or a different Place than that of the initial Area."
FUN_10399c60(&DAT_10683420,(int)"nav_place_list",(int)FUN_1022f950,
	"Lists all place names used in the map.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_106834d4,(int)"nav_place_pick",(int)FUN_1022fa60,
	"Sets the current Place to the Place of the Area under the cursor.",0x4004,
FUN_10399bc0(&DAT_106833fc,(int)"nav_place_replace",(int)FUN_1022fa90,
	"Replaces all instances of the first place with the second place.",0x4004,
FUN_10399c60(&DAT_106834b0,(int)"nav_place_set",(int)FUN_1022fb60,
	"Sets the Place of all selected areas to the current Place.",0x4004,(undefined *)0x0)
FUN_10399c60(&DAT_106831bc,(int)"nav_precise",(int)FUN_1022fb90,
	"Toggles the \'dont avoid obstacles\' flag used by the AI system.",0x4004,
FUN_10399d80(&DAT_106829b0,(int)"nav_quicksave",&DAT_10436de8,0x4004,
	"Set to one to skip the time consuming phases of the analysis.  Useful for data collection and testing."
FUN_10399c60(&DAT_10682df0,(int)"nav_raise_drag_volume_max",(int)FUN_1022fbc0,
	"Raise the top of the drag select volume.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682e38,(int)"nav_raise_drag_volume_min",(int)FUN_1022fbf0,
	"Raise the bottom of the drag select volume.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682c40,(int)"nav_recall_selected_set",(int)FUN_1022fc20,
	"Re-selects the stored selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682cac,(int)"nav_remove_from_selected_set",(int)FUN_1022fc50,
	"Remove current area from the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682b68,(int)"nav_remove_jump_areas",(int)FUN_1022fc80,
	"Removes legacy jump areas, replacing them with connections.",0x4004,(undefined *)0x0
FUN_10399c60(&DAT_10683270,(int)"nav_run",(int)FUN_1022fcb0,
	"Toggles the \'traverse this area by running\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_10683390,(int)"nav_save",(int)FUN_1022fce0,
	"Saves the current Navigation Mesh to disk.",0x4004,(undefined *)0x0);
FUN_10399bc0(&DAT_10682fa0,(int)"nav_select_blocked_areas",(int)FUN_102332b0,
	"Adds all blocked areas to the selected set",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10682fe8,(int)"nav_select_damaging_areas",(int)FUN_102332e0,
	"Adds all damaging areas to the selected set",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10682f10,(int)"nav_select_half_space",(int)FUN_10233310,
	"Selects any areas that intersect the given half-space.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682f7c,(int)"nav_select_invalid_areas",(int)FUN_1022fd50,
	"Adds all invalid areas to the Selected Set.",0x4004,(undefined *)0x0);
FUN_10399bc0(&DAT_10682fc4,(int)"nav_select_obstructed_areas",(int)FUN_10233340,
	"Adds all obstructed areas to the selected set",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_1068300c,(int)"nav_select_stairs",(int)FUN_10233370,
	"Adds all stairway areas to the selected set",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10683468,(int)"nav_set_place_mode",(int)FUN_1022fd80,
	"Sets the editor into or out of Place mode. Place mode allows labelling of Area with Place names."
FUN_10399d80(&DAT_10682a08,(int)"nav_show_approach_points",&DAT_10436dec,0x4004,
	"Show Approach Points in the Navigation Mesh.");
FUN_10399d80(&DAT_10682a60,(int)"nav_show_danger",&DAT_10436dec,0x4004,
	"Show current \'danger\' levels.");
FUN_10399d80(&DAT_10682ab8,(int)"nav_show_player_counts",&DAT_10436dec,0x4004,
	"Show current player counts in each area.");
FUN_10399c60(&DAT_10683174,(int)"nav_splice",(int)FUN_1022fde0,
	"To splice, mark an area, highlight a second area, then invoke the splice command to create a new, connected area between them."
FUN_10399c60(&DAT_10683030,(int)"nav_split",(int)FUN_1022fe10,
	"To split an Area into two, align the split line using your cursor and invoke the split command."
FUN_10399c60(&DAT_10683300,(int)"nav_stand",(int)FUN_1022fe40,
	"Toggles the \'stand while hiding\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_10683228,(int)"nav_stop",(int)FUN_1022fe70,
	"Toggles the \'must stop when entering this area\' flag used by the AI system.",
FUN_10399c60(&DAT_10682c1c,(int)"nav_store_selected_set",(int)FUN_1022fea0,
	"Stores the current selected set for later retrieval.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_1068336c,(int)"nav_strip",(int)FUN_1022fed0,
	"Strips all Hiding Spots, Approach Points, and Encounter Spots from the current Area."
FUN_10399c60(&DAT_10682eec,(int)"nav_toggle_deselecting",(int)FUN_1022ff20,
	"Start or stop continuously removing from the selected set.",0x4004,(undefined *)0x0)
FUN_10399c60(&DAT_10682cd0,(int)"nav_toggle_in_selected_set",(int)FUN_1022ff50,
	"Remove current area from the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10683444,(int)"nav_toggle_place_mode",(int)FUN_1022ff80,
	"Toggle the editor into and out of Place mode. Place mode allows labelling of Area with Place names."
FUN_10399c60(&DAT_106834f8,(int)"nav_toggle_place_painting",(int)FUN_1022ffb0,
	"Toggles Place Painting mode. When Place Painting, pointing at an Area will \'paint\' it with the current Place."
FUN_10399c60(&DAT_10682bf8,(int)"nav_toggle_selected_set",(int)FUN_1022ffe0,
	"Toggles all areas into/out of the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_10682e80,(int)"nav_toggle_selecting",(int)FUN_10230010,
	"Start or stop continuously adding to the selected set.",0x4004,(undefined *)0x0);
FUN_10399c60(&DAT_106832b8,(int)"nav_transient",(int)FUN_10230040,
	"Toggles the \'area is transient and may become blocked\' flag used by the AI system."
FUN_10399c60(&DAT_106830c0,(int)"nav_unmark",(int)FUN_10230070,"Clears the marked Area or Ladder."
FUN_10399bc0(&DAT_106833d8,(int)"nav_use_place",(int)FUN_102300a0,
	"If used without arguments, all available Places will be listed. If a Place argument is given, the current Place is set."
FUN_10399c60(&DAT_1068324c,(int)"nav_walk",(int)FUN_10230130,
	"Toggles the \'traverse this area by walking\' flag used by the AI system.",0x4004,
FUN_10399c60(&DAT_106835d0,(int)"nav_warp_to_mark",(int)FUN_10230160,
	"Warps the player to the marked area.",0x4004,(undefined *)0x0);
FUN_10399fe0(&DAT_10683970,(int)"nav_show_node_grid",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_10683810,(int)"nav_show_node_id",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_106837b8,(int)"nav_show_nodes",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_10683868,(int)"nav_test_node",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_106838c0,(int)"nav_test_node_crouch",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_10683918,(int)"nav_test_node_crouch_dir",&DAT_1049bd98,0x4000);
FUN_10399bc0(&DAT_10683a68,(int)"nav_chop_selected",(int)FUN_10234f10,
	"Chops all selected areas into their component 1x1 areas",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10683a8c,(int)"nav_simplify_selected",(int)FUN_10234fe0,
	"Chops all selected areas into their component 1x1 areas and re-merges them together into larger areas"
FUN_10399d80(&DAT_10683fc8,(int)"ti_reliable_bullets",&DAT_10436dec,0x80000,
	"Send TE_FireBullets reliably (slower)");
FUN_10399bc0(&DAT_10684d00,(int)"burninate",(int)FUN_1025cb50,"burninate target under crosshair",4
FUN_10399c60(&DAT_10684ab4,(int)"CreatePredictionError",(int)FUN_1025cc00,
	"Create a prediction error",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_10684da0,(int)"debug_disable_dogs",&DAT_10436dec,2,"GTFO! I\'m testing shit");
FUN_10399fe0(&DAT_10684c50,(int)"debug_force_ready",&DAT_10436dec,4);
FUN_10399d80(&DAT_10684df8,(int)"debug_spawndog",&DAT_10436dec,2,
	"1 == spawn malinois/doberman, >=2 == husky/pitbull with the number representative of the dogs level-2"
FUN_10399bc0(&DAT_10684e50,(int)"md_record",(int)FUN_1025cca0,"movie director: record",0,
FUN_10399bc0(&DAT_10684e74,(int)"md_stop",(int)FUN_1025cd90,"movie director: stop recording demo",
FUN_10399fe0(&DAT_10684ca8,(int)"mp_allow_defenders_to_pickup_dropped_shields",&DAT_10436de8,0);
FUN_10399d80(&DAT_10684ad8,(int)"mp_enemy_spotting_distance",&DAT_10469594,0x80004,
	"Distance players can spot enemies for adding to friendly radar");
FUN_10399d80(&DAT_10684b30,(int)"mp_enemy_visible_time",&DAT_104e2b48,0x80004,
	"Time enemy stays visible on friendly radars after being spotted, and spotter looks away"
FUN_10399bc0(&DAT_10684d24,(int)"plr_list_attributes",(int)FUN_1025ce20,
	"print out list of attributes the issuer is affected by",0x4002,(undefined *)0x0);
FUN_10399d80(&DAT_10684780,(int)"sv_autokick_finaltime",&DAT_104897f0,0x80004,
	"Time above gracetime for which the AFK player will actually be kicked");
FUN_10399d80(&DAT_10684728,(int)"sv_autokick_gracetime",&DAT_104e2070,0x80004,
	"Time allowed for players to be AFK before the server will kick them.");
FUN_10399fe0(&DAT_10684b88,(int)"sv_debugenemyLook",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10684d48,(int)"sv_disable_afk",&DAT_10436dec,0);
FUN_10399d80(&DAT_10684830,(int)"sv_disablefreezecam",&DAT_10436dec,0x2000,
	"Turn on/off freezecam on server");
FUN_10399d80(&DAT_10684bf8,(int)"sv_player_flinch_delay",&DAT_104e4080,6,
	"minimum time between player flinches, lower values eat more network.");
FUN_10399d80(&DAT_106847d8,(int)"ti_showplayerstatetransitions",&DAT_104e2148,0x4000,
	"ti_showplayerstatetransitions <ent index or -1 for all>. Show player state transitions."
FUN_10399fe0(&DAT_10684888,(int)"ti_sr_prim",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106848e0,(int)"ti_sr_prim_skin",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10684938,(int)"ti_sr_sec",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10684990,(int)"ti_sr_sec_skin",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106846d0,(int)"z_splatterdistance",&DAT_104691d8,0x82000);
FUN_10399bc0(&DAT_10687bc4,(int)"load_point_values",(int)thunk_FUN_1025e260,
	"Load Point Values from Script",0x4002,(undefined *)0x0);
FUN_10399d80(&DAT_10688050,(int)"bot_ai_speed",&DAT_104388e4,0,
	"How fast the bot will think.. Faster think bots are more expensive ");
FUN_10399d80(&DAT_10687d38,(int)"bot_accuracy",&DAT_1049cdec,0,
	"Accuracy modifier (0 - 100) for the bots. 100 = best aim");
FUN_10399bc0(&DAT_10688310,(int)"bot_add",(int)FUN_10036410,"Add a bot.",0,(undefined *)0x0);
FUN_10399fe0(&DAT_106884a8,(int)"bot_backspeed",&DAT_10468650,0x4010);
FUN_10399d80(&DAT_10687de8,(int)"bot_changeclass",&DAT_10436dec,0,
	"Force all bots to change to the specified class.");
FUN_10399d80(&DAT_10688100,(int)"bot_crouch",&DAT_10436dec,0,"Bot crouches");
FUN_10399d80(&DAT_10688158,(int)"bot_debug",&DAT_10436dec,0x4000,"Show bot AI debug information");
FUN_10399fe0(&DAT_106882b8,(int)"bot_drivers",&DAT_10436dec,0x4002);
FUN_10399d80(&DAT_10687d90,(int)"bot_flipout",&DAT_10436dec,0,"When on, all bots fire their guns."
FUN_10399d80(&DAT_10687c88,(int)"bot_forceattack2",&DAT_10436dec,0,"When firing, use attack2.");
FUN_10399d80(&DAT_10687ce0,(int)"bot_forceattackon",&DAT_10436dec,0,
	"When firing, don\'t tap fire, hold it down.");
FUN_10399d80(&DAT_10687c30,(int)"bot_forcefireweapon",&DAT_1043677a,0,
	"Force bots with the specified weapon to fire.");
FUN_10399fe0(&DAT_10688450,(int)"bot_forwardspeed",&DAT_10468650,0x4010);
FUN_10399d80(&DAT_10687ef0,(int)"bot_frozen",&DAT_10436dec,0,"Don\'t do anything.");
FUN_10399d80(&DAT_10688208,(int)"bot_giveshield",&DAT_10436dec,0,"all bots have shields, huzzah!")
FUN_10399d80(&DAT_106881b0,(int)"bot_health",&DAT_10469128,0,"Starting Health");
FUN_10399d80(&DAT_10687ff8,(int)"bot_ignore_enemy",&DAT_10436dec,0,
	"Don\'t shoot!! Don\'t detect enemies. I use this for debugging purposes");
FUN_10399c60(&DAT_10688334,(int)"bot_kickall",(int)FUN_102611f0,"Kick all Bots",0x20000,
FUN_10399bc0(&DAT_10688358,(int)"bot_killall",(int)FUN_10268770,"Make all bots suicide.",0,
FUN_10399fe0(&DAT_106883f8,(int)"bot_max_separation_force",&DAT_10469398,0x4010);
FUN_10399d80(&DAT_10687e40,(int)"bot_mimic",&DAT_10436dec,0,"Bot uses usercmd of player by index."
FUN_10399d80(&DAT_10687e98,(int)"bot_mimic_yaw_offset",&DAT_10436dec,0,"Offsets the bot yaw.");
FUN_10399fe0(&DAT_10688260,(int)"bot_opposite_team",&DAT_10436dec,0);
FUN_10399d80(&DAT_10687f48,(int)"bot_pacifist",&DAT_10436dec,0,
	"Don\'t shoot!! Just run around and look happy.");
FUN_10399d80(&DAT_106880a8,(int)"bot_sendcmd",&DAT_1043677a,0,
	"Forces bots to send the specified command.");
FUN_10399fe0(&DAT_10688500,(int)"bot_sidespeed",&DAT_10468650,0x4010);
FUN_10399d80(&DAT_10687fa0,(int)"bot_standstill",&DAT_10436dec,0,
	"Don\'t run around and look happy.");
FUN_10399bc0(&DAT_1068857c,(int)"bot_target",(int)FUN_102687d0,
	"<bot name>.  Targets the bot you\'re looking at, or targets directly with <bot name>"
FUN_10399bc0(&DAT_1068837c,(int)"bot_teleport",(int)FUN_10268a20,
	"<bot name>.  Teleports Bot to where you\'re looking",0x10000000,(undefined *)0x0);
FUN_10399bc0(&DAT_10688558,(int)"npc_fadeout",(int)FUN_10268cd0,
	"fade out an npc or npc car, use bot_target to find it.",0x10000000,(undefined *)0x0)
FUN_10399d80(&DAT_106883a0,(int)"sv_threaded_botthink",&DAT_10436dec,0,
	"Enable parallel processing bot think methods");
FUN_10399c60(&DAT_10688664,(int)"ch_create_blockade",(int)FUN_1026c020,
	"Spawn a ballistic in front of the player.",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_106887f8,(int)"sv_bomb_radius",&DAT_1044a708,0x2000);
FUN_10399c60(&DAT_10688b54,(int)"ch_create_fireextinguisher",(int)FUN_1026f530,
	"Spawn a fire extinguisher in front of the player.",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_10688f70,(int)"ch_create_propanetank",(int)FUN_10270e50,
	"Spawn a propane tank in front of the player.",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_10688ec0,(int)"sv_propane_tank_speed",&DAT_10438830,0);
FUN_10399fe0(&DAT_10688f18,(int)"sv_propane_tank_torque",&DAT_104e8160,0);
FUN_10399fe0(&DAT_10689520,(int)"soffs_forward",&DAT_10436df0,0x2000);
FUN_10399fe0(&DAT_10689578,(int)"soffs_right",&DAT_10436dec,0x2000);
FUN_10399fe0(&DAT_106895d0,(int)"soffs_up",&DAT_10436dec,0x2000);
FUN_10399fe0(&DAT_106899b0,(int)"bomb_dramatime",&DAT_104e96f0,0);
FUN_10399fe0(&DAT_10689958,(int)"bomb_realtime",&DAT_10436dec,0);
FUN_10399d80(&DAT_10689a60,(int)"mp_civkill_lose",&DAT_10436dec,0x80004,
	"killing too many civillians causes your team to lose");
FUN_10399d80(&DAT_10689a08,(int)"mp_hold_score_interval",&DAT_104e9a5c,0x80004,
	"Interval between teams getting points for being in the zone");
FUN_10399d80(&DAT_10689b08,(int)"mp_equipment_assign_dog",&DAT_1043b6a0,2,"Dog Count");
FUN_10399d80(&DAT_10689b60,(int)"mp_equipment_assign_shields",&DAT_10436dec,2,"Shield Count");
FUN_10399d80(&DAT_10689bb8,(int)"mp_equipment_assign_sniper",&DAT_1043b6a0,2,"Sniper Count");
FUN_10399bc0(&DAT_1068a524,(int)"advanceround",(int)FUN_102944d0,"Advance to the next round",0,
FUN_10399fe0(&DAT_1068a640,(int)"debug_bots_can_drive",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068a5e8,(int)"debug_ignore_no_drivers",&DAT_10436dec,0);
FUN_10399bc0(&DAT_1068a56c,(int)"endgame",(int)FUN_10294520,"End the whole game",0,
FUN_10399d80(&DAT_1068a348,(int)"mp_intelroundtime",&DAT_10469358,0x80004,
	"Duration of each INTEL round");
FUN_10399d80(&DAT_1068a3f8,(int)"mp_maxhostages",&DAT_10467504,0x82000,
	"Max number of hostages to spawn this round");
FUN_10399d80(&DAT_1068a3a0,(int)"mp_plantime",&DAT_104897f0,0x80004,
	"[offline mode] planning phase time (squad is this/2-2)");
FUN_10399d80(&DAT_1068a450,(int)"mp_roadblock_spacing",&DAT_104ed65c,4,
	"Spacing between the next roadblock.");
FUN_10399d80(&DAT_1068a2f0,(int)"mp_roundtime",&DAT_10469178,0x80004,"Duration of each round");
FUN_10399fe0(&DAT_1068a698,(int)"mp_scale_time_with_players",&DAT_10436dec,2);
FUN_10399bc0(&DAT_1068a500,(int)"repeatround",(int)FUN_102945e0,"Repeat the current round",0,
FUN_10399bc0(&DAT_1068a548,(int)"restartmatch",(int)FUN_10294630,"Restart the whole match",0,
FUN_10399fe0(&DAT_1068a590,(int)"ti_debug_vis_spawn",&DAT_10436dec,0x4002);
FUN_10399fe0(&DAT_1068a6f0,(int)"ti_showRoundStateTransitions",&DAT_10436de8,0);
FUN_10399d80(&DAT_1068a4a8,(int)"time_of_day_rate",&DAT_104ed6b8,0x6000,
	"Rate at which time of day changes relative to game seconds");
FUN_10399d80(&DAT_1068a800,(int)"sv_vote_issue_kick_allowed",&DAT_10436de8,0,
	"Can people hold votes to kick players from the server?");
FUN_10399d80(&DAT_1068a7a8,(int)"sv_vote_issue_restart_game_allowed",&DAT_10436de8,0,
	"Can people hold votes to restart the game?");
FUN_10399d80(&DAT_1068a858,(int)"sv_vote_kick_ban_duration",&DAT_1045424c,0,
	"How long should a kick vote ban someone from the server? (in minutes)");
FUN_10399c60(&DAT_1068ac58,(int)"listissues",(int)FUN_10295800,
	"List all the issues that can be voted on.",0,(undefined *)0x0);
FUN_10399bc0(&DAT_1068ac7c,(int)"callvote",(int)FUN_102979d0,"Start a vote on an issue.",0,
FUN_10399d80(&DAT_1068a998,(int)"sv_allow_votes",&DAT_10436de8,0,
	"Allow voting? (Requires mod\'s support first.)");
FUN_10399d80(&DAT_1068ab50,(int)"sv_vote_allow_spectators",&DAT_10436dec,0,
	"Allow spectators to vote?");
FUN_10399ea0(&DAT_1068a940,(int)"sv_vote_command_delay",&DAT_10438794,2,
	"How long after a vote passes until the action happens",0,0,1,0x40900000);
FUN_10399d80(&DAT_1068aa48,(int)"sv_vote_creation_timer",&DAT_10469178,0x6000,
	"How often someone can individually call a vote.");
FUN_10399d80(&DAT_1068a9f0,(int)"sv_vote_failure_timer",&DAT_10469448,2,
	"A vote that fails cannot be re-submitted for this long");
FUN_10399d80(&DAT_1068ac00,(int)"sv_vote_plr_map_limit",&DAT_1045424c,0x6000,
	"Number of failed votes a user can call per map");
FUN_10399ea0(&DAT_1068aaa0,(int)"sv_vote_quorum_ratio",&DAT_10438884,1,
	"The minimum ratio of players needed to vote on an issue to resolve it.",1,0x3dcccccd
FUN_10399d80(&DAT_1068aaf8,(int)"sv_vote_show_caller",&DAT_10436de8,0x6000,
	"Show the name of the person that called the vote? (1: Yes, 0: No)");
FUN_10399d80(&DAT_1068a8e8,(int)"sv_vote_timer_duration",&DAT_104788a0,2,
	"How long to allow voting on an issue");
FUN_10399d80(&DAT_1068aba8,(int)"sv_vote_ui_hide_disabled_issues",&DAT_10436de8,0,
	"Suppress listing of disabled issues in the vote setup screen.");
FUN_10399fe0(&DAT_1068aca0,(int)"vote_debug",&DAT_10436dec,0);
FUN_10399d80(&DAT_1068b048,(int)"sv_vote_issue_change_map_later_allowed",&DAT_10436de8,0,
	"Can people hold votes to change the map after this round?");
FUN_10399d80(&DAT_1068aff0,(int)"sv_vote_issue_change_map_now_allowed",&DAT_10436de8,0,
	"Can people hold votes to immediately change the map?");
FUN_10399d80(&DAT_1068b9c0,(int)"inferno_child_spawn_interval_multiplier",&DAT_10436de8,0x4000,
	"Amount spawn interval increases for each child");
FUN_10399fe0(&DAT_1068be38,(int)"inferno_child_spawn_max_depth",&DAT_1049bd98,0x4000);
FUN_10399d80(&DAT_1068bc28,(int)"inferno_damage",&DAT_10469128,0x4000,"Damage per second");
FUN_10399fe0(&DAT_1068bbd0,(int)"inferno_debug",&DAT_10436dec,0x4000);
FUN_10399d80(&DAT_1068bb78,(int)"inferno_flame_lifetime",&DAT_104f2680,0x4000,
	"Average lifetime of each flame in seconds");
FUN_10399d80(&DAT_1068bb20,(int)"inferno_flame_spacing",&DAT_104acb50,0x4000,
	"Minimum distance between separate flame spawns");
FUN_10399d80(&DAT_1068b968,(int)"inferno_initial_spawn_interval",&DAT_1045ce04,0x4000,
	"Time between spawning flames for first fire");
FUN_10399d80(&DAT_1068ba18,(int)"inferno_max_child_spawn_interval",&DAT_10436de8,0x4000,
	"Largest time interval for child flame spawning");
FUN_10399d80(&DAT_1068bac8,(int)"inferno_max_flames",&DAT_104da02c,0x4000,
	"Maximum number of flames that can be created");
FUN_10399d80(&DAT_1068bc80,(int)"inferno_max_range",&DAT_10469380,0x4000,
	"Maximum distance flames can spread from their initial ignition point");
FUN_10399d80(&DAT_1068b910,(int)"inferno_per_flame_spawn_duration",&DAT_10436df0,0x4000,
	"Duration each new flame will attempt to spawn new flames");
FUN_10399d80(&DAT_1068ba70,(int)"inferno_spawn_angle",&DAT_104e8160,0x4000,
	"Angular change from parent");
FUN_10399fe0(&DAT_1068bde0,(int)"inferno_surface_offset",&DAT_104f278c,0x4000);
FUN_10399fe0(&DAT_1068bd30,(int)"inferno_velocity_decay_factor",&DAT_104a4250,0x4000);
FUN_10399fe0(&DAT_1068bcd8,(int)"inferno_velocity_factor","0.003",0x4000);
FUN_10399fe0(&DAT_1068bd88,(int)"inferno_velocity_normal_factor",&DAT_10436dec,0x4000);
FUN_10399fe0(&DAT_1068bf40,(int)"inferno_forward_reduction_factor",&DAT_104f2800,0x4000);
FUN_10399fe0(&DAT_1068bee8,(int)"inferno_max_trace_per_tick",&DAT_104f27e0,0);
FUN_10399fe0(&DAT_1068be90,(int)"inferno_scorch_decals",&DAT_10436de8,0x4000);
FUN_10399d80(&DAT_1068c258,(int)"debug_disable_dynamic_roadblock",&DAT_10436de8,4,
	"Yo , sucketh my cocketh");
FUN_10399fe0(&DAT_1068c2b0,(int)"debug_disable_auto_cars",&DAT_10436dec,0);
FUN_10399d80(&DAT_1068c7c8,(int)"mp_ammobox_timer",&DAT_104f6e80,4,
	"The time before the ammo box is opened. Indicated in a ratio of the round time ");
FUN_10399c60(&DAT_1068cc10,(int)"ch_create_supplycrate",(int)FUN_102a4fe0,"Spawn a supply crate.",
FUN_10399c60(&DAT_1068ce60,(int)"hr_backward",(int)FUN_102a5ed0,
	"spits out previous locations of the hostages.",0x4000,(undefined *)0x0);
FUN_10399fe0(&DAT_1068cc60,(int)"hr_cv_fileindex",&DAT_10436de8,0);
FUN_10399fe0(&DAT_1068ccb8,(int)"hr_cv_hostageindex",&DAT_1043b6a0,0);
FUN_10399fe0(&DAT_1068cd10,(int)"hr_cv_speed",&DAT_10438740,0);
FUN_10399fe0(&DAT_1068cd68,(int)"hr_cv_stepsize",&DAT_10436de8,0);
FUN_10399c60(&DAT_1068ce3c,(int)"hr_forward",(int)FUN_102a5ef0,
	"spits out next locations of the hostages.",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068cf14,(int)"hr_jump_backward",(int)FUN_102a5f10,&DAT_1043677a,0x4000,
FUN_10399c60(&DAT_1068cef0,(int)"hr_jump_forward",(int)FUN_102a5f30,&DAT_1043677a,0x4000,
FUN_10399c60(&DAT_1068cf38,(int)"hr_readfile",(int)FUN_102a5f50,
	"Reads the file. To change the index; use hos_recorder_fileindex.",0x4000,
FUN_10399c60(&DAT_1068cf5c,(int)"hr_reset_playback",(int)FUN_102a5f70,
	"Resets the playback to the beginning",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068ce18,(int)"hr_stepbackward",(int)FUN_102a5f80,
	"spits out previous locations of the hostages.",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068cdf4,(int)"hr_stepforward",(int)FUN_102a5fc0,
	"spits out next locations of the hostages.",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068cea8,(int)"hr_stop_start_playback",(int)FUN_102a6000,
	"Will alternate between playing/not playing state",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068ce84,(int)"hr_stop_start_record",(int)FUN_102a6030,
	"Will alternate between recording/not recording state",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068cecc,(int)"hr_toggle_waypoint",(int)FUN_102a60a0,&DAT_1043677a,0x4000,
FUN_10399fe0(&DAT_1068cfb0,(int)"npc_plane_torque_test",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068e058,(int)"npc_torque_test",&DAT_10436dec,0);
FUN_10399c60(&DAT_1068f468,(int)"ch_analyze_vehicle",(int)FUN_102af820,
	"Vehicle diagnostics for the vehicle we\'re pointing at",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068f444,(int)"ch_check_surface_normal",(int)FUN_102af530,
	"Draw the normal of the displacement/brush we\'re pointing at.",0x4000,
FUN_10399c60(&DAT_1068f4b0,(int)"ch_control_npcvehicle_steerleft",(int)FUN_102af920,
	"Duh.. winning",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068f4d4,(int)"ch_control_npcvehicle_steerright",(int)FUN_102af990,
	"Duh.. winning",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068f420,(int)"ch_create_npcvehicle",(int)FUN_102af700,
	"Spawn NPC vehicle in front of the player.",0x4000,(undefined *)0x0);
FUN_10399c60(&DAT_1068f48c,(int)"ch_remove_vehicle",(int)FUN_102af720,"DIE Vehicle!",0x4000,
FUN_10399fe0(&DAT_1068f210,(int)"debug_car_model",&DAT_1043b6a0,0);
FUN_10399fe0(&DAT_1068f268,(int)"debug_car_type",&DAT_1043b6a0,0);
FUN_10399fe0(&DAT_1068f078,(int)"debug_npc_allvehicles_speed_modifier",&DAT_104d9518,0);
FUN_10399fe0(&DAT_1068f020,(int)"debug_npcvehicle",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068efc8,(int)"debug_npcvehicle_showobstacle_avoidance",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068f2c0,(int)"debug_overstress_npccars",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068f148,(int)"npc_car_damping",&DAT_104e9a5c,0);
FUN_10399fe0(&DAT_1068f1a0,(int)"npc_car_damping_angular",&DAT_104fa1ec,0);
FUN_10399fe0(&DAT_1068ed08,(int)"npc_car_speed","3150000",0);
FUN_10399fe0(&DAT_1068ed60,(int)"npc_car_speed_modifier",&DAT_104fa084,0);
FUN_10399fe0(&DAT_1068ef18,(int)"npc_loadedtruck_speed","4400000",0);
FUN_10399fe0(&DAT_1068ef70,(int)"npc_loadedtruck_speed_modifier",&DAT_104fa138,0);
FUN_10399fe0(&DAT_1068eec0,(int)"npc_loadedtruck_turnspeed","18000",0);
FUN_10399fe0(&DAT_1068f0d0,(int)"npc_physics_tick",&DAT_104fa1c0,0);
FUN_10399fe0(&DAT_1068ee10,(int)"npc_truck_speed","5150000",0);
FUN_10399fe0(&DAT_1068ee68,(int)"npc_truck_speed_modifier",&DAT_104fa0d0,0);
FUN_10399fe0(&DAT_1068edb8,(int)"npc_truck_turnspeed","30000",0);
FUN_10399fe0(&DAT_1068ecb0,(int)"npc_turnspeed","16000",0);
FUN_10399fe0(&DAT_1068f318,(int)"npcvehicle_adjust_z",&DAT_10436dec,0);
FUN_10399fe0(&DAT_1068f370,(int)"npcvehicle_thrust_modifier",&DAT_104f2680,0);
FUN_10399fe0(&DAT_1068f3c8,(int)"npcvehicle_torque_modifier",&DAT_104f2680,0);
FUN_10399fe0(&DAT_1068ec58,(int)"vip_turnspeed",&DAT_104fa03c,0);
FUN_10399d80(&DAT_1068fee8,(int)"dog_debug",&DAT_10436dec,0x4000,"Show dog AI debug information");
FUN_10399fe0(&DAT_10690008,(int)"sv_dog_damping",&DAT_104fb438,0);
FUN_10399fe0(&DAT_1068ffb0,(int)"sv_dog_force_multiplier",&DAT_104fb418,0);
FUN_10399fe0(&DAT_10690060,(int)"sv_dog_gravity",&DAT_10469448,0);
FUN_10399c60(&DAT_10690bf0,(int)"ch_create_hostage",(int)FUN_102c9a00,
	"Spawn hostage in front of the player.",0,(undefined *)0x0);
FUN_10399c60(&DAT_10690c14,(int)"ch_create_hostage_vip",(int)FUN_102c9c20,
	"Spawn vip hostage in front of the player.",0,(undefined *)0x0);
FUN_10399c60(&DAT_10690c38,(int)"ch_create_hostage_rag",(int)FUN_102c9a30,&DAT_1043677a,0,
FUN_10399bc0(&DAT_10690c5c,(int)"ch_hostage_dance",(int)FUN_102dced0,&DAT_1043677a,0,
FUN_10399fe0(&DAT_10690b98,(int)"debug_hostage_damping",&DAT_10436e38,0);
FUN_10399fe0(&DAT_10690b40,(int)"debug_hostage_speed",&DAT_104693f8,0);
FUN_10399d80(&DAT_106908c0,(int)"hostage_debug",&DAT_10436dec,0x4000,
	"Show hostage AI debug information");
FUN_10399fe0(&DAT_10690918,(int)"sv_hostage_gravity",&DAT_104691c8,0);
FUN_10399fe0(&DAT_10690ae8,(int)"sv_hostage_speed",&DAT_10436e38,0);
FUN_10399d80(&DAT_106909c8,(int)"sv_pushaway_hostage_force","20000",0x6000,
	"How hard the hostage is pushed away from physics objects (falls off with inverse square of distance)."
FUN_10399d80(&DAT_10690a20,(int)"sv_pushaway_max_hostage_force",&DAT_10438830,0x6000,
	"Maximum of how hard the hostage is pushed away from physics objects.");
FUN_10399fe0(&DAT_10690970,(int)"ti_harlem_shake",&DAT_10436dec,0);
FUN_10399d80(&DAT_10691b68,(int)"mp_vehicle_spacing_modifier",&DAT_1043885c,0x80004,
	"Factor to adjust the spacing between npc cars when they get spawned.");
FUN_10399d80(&DAT_10691a60,(int)"ti_armed_vehicle_count",&DAT_10436dec,0x80004,"Cars to spawn");
FUN_10399d80(&DAT_10691b10,(int)"ti_cargo_truck_count",&DAT_10436de8,0x80004,
	"Cargo trucks to spawn");
FUN_10399d80(&DAT_10691ab8,(int)"ti_loaded_truck_count",&DAT_10436de8,0x80004,
	"Trucks with loads in their trunk to spawn");
FUN_10399fe0(&DAT_10691bc0,(int)"ti_npc_vehicle",&DAT_10436de8,0);
FUN_10399d80(&DAT_10691a08,(int)"ti_npc_vehicle_percent",&DAT_10436e38,0x80004,
	"Factor to multiply the pre-calculated number of cars to spawn");
FUN_10399fe0(&DAT_10692148,(int)"ti_user_stat_spew",&DAT_10436dec,0x2002);
FUN_10399c60(&DAT_10692340,(int)"dump_mapids_server",(int)FUN_102e8720,&DAT_1043677a,0x4000,
FUN_10399d80(&DAT_10692208,(int)"ti_holiday",&DAT_10436dec,0x2000,
	"Force Holiday: 1: hw, 2: xmas, 3: ti bday");
FUN_10399fe0(&DAT_106927a8,(int)"mp_tournament",&DAT_10436dec,0x2100);
FUN_10399d80(&DAT_10692a08,(int)"anim_showstate",&DAT_1043b6a0,0x6002,
	"Show the (client) animation state for the specified entity (-1 for none).");
FUN_10399d80(&DAT_10692a60,(int)"anim_showstatelog",&DAT_10436dec,0x6002,
	"1 to output anim_showstate to Msg(). 2 to store in AnimState.log. 3 for both.");
FUN_10399fe0(&DAT_10692b68,(int)"movement_anim_playback_minrate",&DAT_10489854,0);
FUN_10399d80(&DAT_10692ab8,(int)"mp_showgestureslots",&DAT_1043b6a0,0x6002,
	"Show multiplayer client/server gesture slot information for the specified player index (-1 for no one)."
FUN_10399d80(&DAT_10692b10,(int)"mp_slammoveyaw",&DAT_10436dec,0x2002,
	"Force movement yaw along an animation path.");
FUN_10399fe0(&DAT_10692c38,(int)"debug_show_player_shoot_angles",&DAT_10436dec,0x2002);
FUN_10399ea0(&DAT_10692be0,(int)"ti_feetyawboost",&DAT_104c3308,2,"feet yaw boost",1,0x3f800000,1,
FUN_10399d80(&DAT_10692d58,(int)"sv_showdamage",&DAT_10436dec,0x2000,"Shows damage done by bullet"
FUN_10399d80(&DAT_10692ca8,(int)"sv_showimpacts",&DAT_10436dec,0x2000,
	"Shows client (red) and server (blue) bullet impact point");
FUN_10399d80(&DAT_10692d00,(int)"sv_showplayerhitboxes",&DAT_10436dec,0x2000,
	"Show lag compensated hitboxes for the specified player index whenever a player fires."
FUN_10399fe0(&DAT_10692de0,(int)"ti_debug_drama_cam",&DAT_10436dec,2);
FUN_10399ea0(&DAT_10693d98,(int)"mp_limitteams",&DAT_10436de8,0x82100,
	"Max # of players 1 team can have over another (0 disables check)",1,0,1,0x41f00000);
FUN_10399d80(&DAT_10693be0,(int)"mp_maxpetsperteam",&DAT_1043b6a0,0x82000,
	"Max pets per team (-1 == based on player count)");
FUN_10399d80(&DAT_10693c38,(int)"mp_maxsnipersperteam",&DAT_1043b6a0,0x82000,
	"Max snipers per team (-1 == based on player count)");
FUN_10399fe0(&DAT_10693d40,(int)"sk_plr_dmg_grenade",&DAT_10436dec,0);
FUN_10399d80(&DAT_10693b88,(int)"mp_playermodelname",&DAT_10436dec,0x6002,
	"Debug purposes, set the model of the player");
FUN_10399ea0(&DAT_10693df0,(int)"ti_gamemode_override",&DAT_1043b6a0,0x2000,
	"\n[-1] LOBBY(Online)\n[0] MISSION\n[1] TDM\n[2] FFA\n[3] INTEL",1,-0x40800000,1,
FUN_10399d80(&DAT_10693e48,(int)"ti_tdm_fraglimit",&DAT_104695d4,0x2000,
	"frag limit in offline mode");
FUN_10399d80(&DAT_10693c90,(int)"ti_tournament",&DAT_10436dec,0x2000,"Tournament Mode");
FUN_10399d80(&DAT_10693b30,(int)"wp_drawplans",&DAT_10436dec,0x6002,
	"Do we draw the plans our not?");
FUN_10399bc0(&DAT_10694d9c,(int)"wp_setdata",(int)FUN_10316400,
	"Sets the current data for which plans to draw. (Team Stage Squad Plan)",0,
FUN_10399d80(&DAT_10694dc0,(int)"wp_use_eyes",&DAT_10436dec,0x6000,
	"When placing markers this determines if we place at the feet or eye level.");
FUN_10399bc0(&DAT_10694e70,(int)"l_gameents_sv",(int)FUN_103173e0,"List game entities",0,
FUN_10399fe0(&DAT_10695000,(int)"cl_dog_yawspeed",&DAT_104b6724,0);
FUN_10399e10(&DAT_10695138,(int)"mp_planoverride",&DAT_1043b6a0,0x4000,&DAT_1043677a,
FUN_10399fe0(&DAT_10695260,(int)"boat_brake_speed",&DAT_104388a4,0x2000);
FUN_10399fe0(&DAT_10695208,(int)"boat_force",&DAT_1043b6a0,0x2000);
FUN_10399fe0(&DAT_106952b8,(int)"boat_idle_speed",&DAT_104388e4,0x2000);
FUN_10399fe0(&DAT_106954c8,(int)"boat_ray_debug_server",&DAT_10436dec,0);
FUN_10399fe0(&DAT_106953c0,(int)"boat_spring_damp",&DAT_1043880c,0x2002);
FUN_10399fe0(&DAT_10695368,(int)"boat_spring_force",&DAT_1043880c,0x2002);
FUN_10399fe0(&DAT_10695418,(int)"boat_spring_length",&DAT_1043880c,0x2002);
FUN_10399d80(&DAT_10695310,(int)"boat_steering_sensitivity",&DAT_10510418,0x80008,
	"Ranges from 0 --> 1.0;  1.0 is very sensitive. ");
FUN_10399fe0(&DAT_10695470,(int)"boat_turnoverride",&DAT_1043880c,0x2002);
FUN_10399c60(&DAT_10695aac,(int)"ch_create_new_helicopter",(int)FUN_10321c80,
	"Spawn helicopter in front of the player.",0x4000,(undefined *)0x0);
FUN_10399d80(&DAT_10695a48,(int)"cl_heli_disable_controls",&DAT_10436dec,0x80,
	"0 = basic, 1 = advanced");
FUN_10399fe0(&DAT_106959f0,(int)"debug_heli_forward_speed",&DAT_10511e20,0);
FUN_10399fe0(&DAT_10695998,(int)"debug_heli_yaw_speed",&DAT_104691f0,0);
FUN_10399fe0(&DAT_10695890,(int)"heli_damping",&DAT_10511c0c,0x2000);
FUN_10399fe0(&DAT_10695838,(int)"heli_damping_rot",&DAT_10511bf4,0x2000);
FUN_10399fe0(&DAT_106957e0,(int)"nullify_collective",&DAT_10456018,0x2000);
FUN_10399fe0(&DAT_10695730,(int)"nullify_forward",&DAT_1043885c,0x2000);
FUN_10399fe0(&DAT_10695788,(int)"nullify_lateral",&DAT_10456018,0x2000);
FUN_10399fe0(&DAT_106956d8,(int)"nullify_pitch",&DAT_1046931c,0x2000);
FUN_10399fe0(&DAT_10695628,(int)"nullify_roll",&DAT_10469394,0x2000);
FUN_10399fe0(&DAT_10695680,(int)"nullify_yaw",&DAT_104687f0,0x2000);
FUN_10399d80(&DAT_106955d0,(int)"sv_helicopter_skill_cap",&DAT_10438794,0x2080,
	"0 = both, 1 = basic only, 2 = advanced only");
FUN_10399fe0(&DAT_10695ec8,(int)"car_passenger_dmg_magnitude",&DAT_10436e20,0);
FUN_10399fe0(&DAT_10695e70,(int)"car_passenger_dmg_radius",&DAT_10436e38,0);
FUN_10399fe0(&DAT_10695f20,(int)"debug_allow_enemy_passenger",&DAT_10436dec,0);
FUN_10399bc0(&DAT_10695fe4,(int)"rc_vehicle_go",(int)FUN_1032d7f0,&DAT_1043677a,0x4000,
FUN_10399bc0(&DAT_10696008,(int)"rc_vehicle_stop",(int)FUN_1032d830,&DAT_1043677a,0x4000,
FUN_10399bc0(&DAT_10695fc0,(int)"rc_vehicle_turn",(int)FUN_1032d850,&DAT_1043677a,0x4000,
FUN_10399fe0(&DAT_10695de8,(int)"ti_vehicle_authmode",&DAT_10438794,0x2000);
FUN_10399bc0(&DAT_10695f9c,(int)"vehicle_rc",(int)FUN_10036410,
	"take remote control command of a vehicle",0x4000,(undefined *)0x0);
FUN_10399bc0(&DAT_10695f78,(int)"vehicle_reload",(int)FUN_1032d890,"Reload vehicle script",0x4000,
FUN_10399d80(&DAT_106966a0,(int)"car_collision_delay",&DAT_104388a4,4,&DAT_1043677a);
FUN_10399d80(&DAT_10696750,(int)"car_collision_other",&DAT_104e4080,4,&DAT_1043677a);
FUN_10399d80(&DAT_106966f8,(int)"car_collision_self",&DAT_104e2b48,4,&DAT_1043677a);
FUN_10399d80(&DAT_106967a8,(int)"car_dontpush_friends",&DAT_10436de8,4,&DAT_1043677a);
FUN_10399d80(&DAT_10696888,(int)"car_lookahead_buffer_time",&DAT_104a4250,4,&DAT_1043677a);
FUN_10399fe0(&DAT_106968e0,(int)"impactTorqueModifier",&DAT_1045ce04,0x80000);
FUN_10399fe0(&DAT_10696800,(int)"sv_debug_vehicle_update",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10697510,(int)"car_force",&DAT_1043b6a0,0x2000);
FUN_10399fe0(&DAT_106974b8,(int)"car_friction",&DAT_1043885c,0);
FUN_10399fe0(&DAT_10697568,(int)"car_gearmod",&DAT_1043b6a0,0x2000);
FUN_10399fe0(&DAT_106975c0,(int)"car_turnoverride",&DAT_1043880c,0x2002);
FUN_10399fe0(&DAT_106976c8,(int)"car_use_grip_nullify",&DAT_10436dec,0x2000);
FUN_10399fe0(&DAT_10697618,(int)"carbump_torque_value",&DAT_1051410c,0x2000);
FUN_10399bc0(&DAT_106977a8,(int)"ch_create_car",(int)FUN_10332f00,&DAT_1043677a,0x4000,
FUN_10399fe0(&DAT_10697750,(int)"sv_vehicle_serverside_reduced_force",&DAT_104abf0c,0);
FUN_10399fe0(&DAT_10697670,(int)"vehicle_wheel_debug_server",&DAT_10436dec,0);
FUN_10399fe0(&DAT_10698228,(int)"sv_grenade_size",&DAT_10438794,0);
FUN_10399fe0(&DAT_10698928,(int)"sv_infiniteammo",&DAT_10436dec,0x6100);
FUN_10399fe0(&DAT_10699260,(int)"melee_collateral_shove_count",&DAT_104f27e0,0x4000);
FUN_10399fe0(&DAT_106991b0,(int)"melee_force_scalar",&DAT_104f278c,0x6000);
FUN_10399fe0(&DAT_10699208,(int)"melee_force_scalar_combat_character",&DAT_10436df0,0x6000);
FUN_10399fe0(&DAT_106990b8,(int)"melee_range",&DAT_10516258,0x6000);
FUN_10399d80(&DAT_10699110,(int)"melee_return_to_idle_time",&DAT_10516298,0x6000,
	"time after stopping attack to return to idle");
FUN_10399fe0(&DAT_10699060,(int)"melee_show_swing",&DAT_10436dec,0x6000);
FUN_10399bc0(&DAT_106a59f4,(int)"ent_keyvalue",(int)FUN_10368750,
	"Applies the comma delimited key=value pairs to the entity with the given Hammer ID.\n\tFormat: ent_keyvalue <entity id> <key1>=<value1>,<key2>=<value2>,...,<keyN>=<valueN>\n"
FUN_10399d80(&DAT_106a5a98,(int)"cl_simdbones",&DAT_10436dec,0x2000,"Use SIMD bone setup.");
FUN_10399d80(&DAT_106a5b60,(int)"cl_use_simd_bones",&DAT_10436de8,0x2000,
	"1 use SIMD bones 0 use scalar bones.");
FUN_10399fe0(&DAT_106a5af8,(int)"BlendBonesMode",&DAT_10438794,0x2000);
FUN_10399d80(&DAT_106a5bc0,(int)"anim_3wayblend",&DAT_10436de8,0x2000,
	"Toggle the 3-way animation blending code.");
FUN_10399d80(&DAT_106a5c18,(int)"anim_twistbones_enabled",&DAT_10436de8,0x6000,
	"Enable procedural twist bones.");
FUN_10399d80(&DAT_106a5e08,(int)"choreo_spew_filter",&DAT_1043677a,0x2000,
	"Spew choreo. Use a sub-string or * to display all events.");
FUN_10399bc0(&DAT_106b9638,(int)"rr_debugresponseconcept_exclude",(int)FUN_103912f0,
	"Set a list of concepts to exclude from rr_debugresponseconcept. Separate multiple concepts with spaces. Call with no arguments to see current list. Call \'rr_debug_responseconcept_exclude !\' to reset."
FUN_10399d80(&DAT_106b9dc0,(int)"rr_debugresponseconcept",&DAT_1043677a,0,
	"If set, rr_debugresponses will print only responses testing for the specified concept"
FUN_10399d80(&DAT_106b9e18,(int)"rr_debugresponses",&DAT_10436dec,0,
	"Show verbose matching output (1 for simple, 2 for rule scoring, 3 for noisy). If set to 4, it will only show response success/failure for npc_selected NPCs."
FUN_10399d80(&DAT_106b9e70,(int)"rr_debugrule",&DAT_1043677a,0,
	"If set to the name of the rule, that rule\'s score will be shown whenever a concept is passed into the response rules system."
FUN_10399d80(&DAT_106b9d60,(int)"rr_dumpresponses",&DAT_10436dec,0,
	"Dump all response_rules.txt and rules (requires restart)");
FUN_10399d80(&DAT_106cfdb8,(int)"panel_test_title_safe",&DAT_10436dec,0x4000,
	"Test vgui panel positioning with title safe indentation");